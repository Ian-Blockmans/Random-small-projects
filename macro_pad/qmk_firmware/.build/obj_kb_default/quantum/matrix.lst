   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.setPinInputHigh_atomic,"ax",@progbits
  12               	setPinInputHigh_atomic:
  13               	.LFB118:
  14               		.file 1 "quantum/matrix.c"
   1:quantum/matrix.c **** /*
   2:quantum/matrix.c **** Copyright 2012-2018 Jun Wako, Jack Humbert, Yiancar
   3:quantum/matrix.c **** 
   4:quantum/matrix.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/matrix.c **** it under the terms of the GNU General Public License as published by
   6:quantum/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/matrix.c **** (at your option) any later version.
   8:quantum/matrix.c **** 
   9:quantum/matrix.c **** This program is distributed in the hope that it will be useful,
  10:quantum/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/matrix.c **** GNU General Public License for more details.
  13:quantum/matrix.c **** 
  14:quantum/matrix.c **** You should have received a copy of the GNU General Public License
  15:quantum/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/matrix.c **** */
  17:quantum/matrix.c **** #include <stdint.h>
  18:quantum/matrix.c **** #include <stdbool.h>
  19:quantum/matrix.c **** #include "util.h"
  20:quantum/matrix.c **** #include "matrix.h"
  21:quantum/matrix.c **** #include "debounce.h"
  22:quantum/matrix.c **** #include "quantum.h"
  23:quantum/matrix.c **** 
  24:quantum/matrix.c **** #ifdef DIRECT_PINS
  25:quantum/matrix.c **** static pin_t direct_pins[MATRIX_ROWS][MATRIX_COLS] = DIRECT_PINS;
  26:quantum/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL) || (DIODE_DIRECTION == COL2ROW)
  27:quantum/matrix.c **** static const pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  28:quantum/matrix.c **** static const pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  29:quantum/matrix.c **** #endif
  30:quantum/matrix.c **** 
  31:quantum/matrix.c **** /* matrix state(1:on, 0:off) */
  32:quantum/matrix.c **** extern matrix_row_t raw_matrix[MATRIX_ROWS];  // raw values
  33:quantum/matrix.c **** extern matrix_row_t matrix[MATRIX_ROWS];      // debounced values
  34:quantum/matrix.c **** 
  35:quantum/matrix.c **** static inline void setPinOutput_writeLow(pin_t pin) {
  36:quantum/matrix.c ****     ATOMIC_BLOCK_FORCEON {
  37:quantum/matrix.c ****         setPinOutput(pin);
  38:quantum/matrix.c ****         writePinLow(pin);
  39:quantum/matrix.c ****     }
  40:quantum/matrix.c **** }
  41:quantum/matrix.c **** 
  42:quantum/matrix.c **** static inline void setPinInputHigh_atomic(pin_t pin) {
  15               		.loc 1 42 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LBB14:
  23               	.LBB15:
  24               	.LBB16:
  25               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
  26               		.loc 2 50 0
  27               	/* #APP */
  28               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
  29 0000 F894      		cli
  30               	 ;  0 "" 2
  31               	.LVL1:
  32               	/* #NOAPP */
  33               	.LBE16:
  34               	.LBE15:
  43:quantum/matrix.c ****     ATOMIC_BLOCK_FORCEON {
  44:quantum/matrix.c ****         setPinInputHigh(pin);
  35               		.loc 1 44 0
  36 0002 E82F      		mov r30,r24
  37 0004 E295      		swap r30
  38 0006 EF70      		andi r30,lo8(15)
  39 0008 F0E0      		ldi r31,0
  40 000a 31A1      		ldd r19,Z+33
  41 000c 282F      		mov r18,r24
  42 000e 2F70      		andi r18,lo8(15)
  43 0010 81E0      		ldi r24,lo8(1)
  44 0012 90E0      		ldi r25,0
  45               	.LVL2:
  46 0014 00C0      		rjmp 2f
  47               		1:
  48 0016 880F      		lsl r24
  49               		2:
  50 0018 2A95      		dec r18
  51 001a 02F4      		brpl 1b
  52 001c 982F      		mov r25,r24
  53 001e 9095      		com r25
  54 0020 9323      		and r25,r19
  55 0022 91A3      		std Z+33,r25
  56 0024 92A1      		ldd r25,Z+34
  57 0026 892B      		or r24,r25
  58 0028 82A3      		std Z+34,r24
  59               	.LVL3:
  60               	.LBB17:
  61               	.LBB18:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  62               		.loc 2 56 0
  63               	/* #APP */
  64               	 ;  56 "/usr/lib/avr/include/util/atomic.h" 1
  65 002a 7894      		sei
  66               	 ;  0 "" 2
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  67               		.loc 2 57 0
  68               	.LVL4:
  69               	/* #NOAPP */
  70 002c 0895      		ret
  71               	.LBE18:
  72               	.LBE17:
  73               	.LBE14:
  74               		.cfi_endproc
  75               	.LFE118:
  77               		.section	.text.matrix_init,"ax",@progbits
  78               	.global	matrix_init
  80               	matrix_init:
  81               	.LFB124:
  45:quantum/matrix.c ****     }
  46:quantum/matrix.c **** }
  47:quantum/matrix.c **** 
  48:quantum/matrix.c **** // matrix code
  49:quantum/matrix.c **** 
  50:quantum/matrix.c **** #ifdef DIRECT_PINS
  51:quantum/matrix.c **** 
  52:quantum/matrix.c **** static void init_pins(void) {
  53:quantum/matrix.c ****     for (int row = 0; row < MATRIX_ROWS; row++) {
  54:quantum/matrix.c ****         for (int col = 0; col < MATRIX_COLS; col++) {
  55:quantum/matrix.c ****             pin_t pin = direct_pins[row][col];
  56:quantum/matrix.c ****             if (pin != NO_PIN) {
  57:quantum/matrix.c ****                 setPinInputHigh(pin);
  58:quantum/matrix.c ****             }
  59:quantum/matrix.c ****         }
  60:quantum/matrix.c ****     }
  61:quantum/matrix.c **** }
  62:quantum/matrix.c **** 
  63:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row) {
  64:quantum/matrix.c ****     // Start with a clear matrix row
  65:quantum/matrix.c ****     matrix_row_t current_row_value = 0;
  66:quantum/matrix.c **** 
  67:quantum/matrix.c ****     for (uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
  68:quantum/matrix.c ****         pin_t pin = direct_pins[current_row][col_index];
  69:quantum/matrix.c ****         if (pin != NO_PIN) {
  70:quantum/matrix.c ****             current_row_value |= readPin(pin) ? 0 : (MATRIX_ROW_SHIFTER << col_index);
  71:quantum/matrix.c ****         }
  72:quantum/matrix.c ****     }
  73:quantum/matrix.c **** 
  74:quantum/matrix.c ****     // If the row has changed, store the row and return the changed flag.
  75:quantum/matrix.c ****     if (current_matrix[current_row] != current_row_value) {
  76:quantum/matrix.c ****         current_matrix[current_row] = current_row_value;
  77:quantum/matrix.c ****         return true;
  78:quantum/matrix.c ****     }
  79:quantum/matrix.c ****     return false;
  80:quantum/matrix.c **** }
  81:quantum/matrix.c **** 
  82:quantum/matrix.c **** #elif defined(DIODE_DIRECTION)
  83:quantum/matrix.c **** #    if (DIODE_DIRECTION == COL2ROW)
  84:quantum/matrix.c **** 
  85:quantum/matrix.c **** static void select_row(uint8_t row) {
  86:quantum/matrix.c ****     setPinOutput_writeLow(row_pins[row]);
  87:quantum/matrix.c **** }
  88:quantum/matrix.c **** 
  89:quantum/matrix.c **** static void unselect_row(uint8_t row) {
  90:quantum/matrix.c ****     setPinInputHigh_atomic(row_pins[row]);
  91:quantum/matrix.c **** }
  92:quantum/matrix.c **** 
  93:quantum/matrix.c **** static void unselect_rows(void) {
  94:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
  95:quantum/matrix.c ****         setPinInputHigh_atomic(row_pins[x]);
  96:quantum/matrix.c ****     }
  97:quantum/matrix.c **** }
  98:quantum/matrix.c **** 
  99:quantum/matrix.c **** static void init_pins(void) {
 100:quantum/matrix.c ****     unselect_rows();
 101:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_COLS; x++) {
 102:quantum/matrix.c ****         setPinInputHigh_atomic(col_pins[x]);
 103:quantum/matrix.c ****     }
 104:quantum/matrix.c **** }
 105:quantum/matrix.c **** 
 106:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row) {
 107:quantum/matrix.c ****     // Start with a clear matrix row
 108:quantum/matrix.c ****     matrix_row_t current_row_value = 0;
 109:quantum/matrix.c **** 
 110:quantum/matrix.c ****     // Select row and wait for row selecton to stabilize
 111:quantum/matrix.c ****     select_row(current_row);
 112:quantum/matrix.c ****     matrix_io_delay();
 113:quantum/matrix.c **** 
 114:quantum/matrix.c ****     // For each col...
 115:quantum/matrix.c ****     for (uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 116:quantum/matrix.c ****         // Select the col pin to read (active low)
 117:quantum/matrix.c ****         uint8_t pin_state = readPin(col_pins[col_index]);
 118:quantum/matrix.c **** 
 119:quantum/matrix.c ****         // Populate the matrix row with the state of the col pin
 120:quantum/matrix.c ****         current_row_value |= pin_state ? 0 : (MATRIX_ROW_SHIFTER << col_index);
 121:quantum/matrix.c ****     }
 122:quantum/matrix.c **** 
 123:quantum/matrix.c ****     // Unselect row
 124:quantum/matrix.c ****     unselect_row(current_row);
 125:quantum/matrix.c **** 
 126:quantum/matrix.c ****     // If the row has changed, store the row and return the changed flag.
 127:quantum/matrix.c ****     if (current_matrix[current_row] != current_row_value) {
 128:quantum/matrix.c ****         current_matrix[current_row] = current_row_value;
 129:quantum/matrix.c ****         return true;
 130:quantum/matrix.c ****     }
 131:quantum/matrix.c ****     return false;
 132:quantum/matrix.c **** }
 133:quantum/matrix.c **** 
 134:quantum/matrix.c **** #    elif (DIODE_DIRECTION == ROW2COL)
 135:quantum/matrix.c **** 
 136:quantum/matrix.c **** static void select_col(uint8_t col) {
 137:quantum/matrix.c ****     setPinOutput_writeLow(col_pins[col]);
 138:quantum/matrix.c **** }
 139:quantum/matrix.c **** 
 140:quantum/matrix.c **** static void unselect_col(uint8_t col) {
 141:quantum/matrix.c ****     setPinInputHigh_atomic(col_pins[col]);
 142:quantum/matrix.c **** }
 143:quantum/matrix.c **** 
 144:quantum/matrix.c **** static void unselect_cols(void) {
 145:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_COLS; x++) {
 146:quantum/matrix.c ****         setPinInputHigh_atomic(col_pins[x]);
 147:quantum/matrix.c ****     }
 148:quantum/matrix.c **** }
 149:quantum/matrix.c **** 
 150:quantum/matrix.c **** static void init_pins(void) {
 151:quantum/matrix.c ****     unselect_cols();
 152:quantum/matrix.c ****     for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
 153:quantum/matrix.c ****         setPinInputHigh_atomic(row_pins[x]);
 154:quantum/matrix.c ****     }
 155:quantum/matrix.c **** }
 156:quantum/matrix.c **** 
 157:quantum/matrix.c **** static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col) {
 158:quantum/matrix.c ****     bool matrix_changed = false;
 159:quantum/matrix.c **** 
 160:quantum/matrix.c ****     // Select col and wait for col selecton to stabilize
 161:quantum/matrix.c ****     select_col(current_col);
 162:quantum/matrix.c ****     matrix_io_delay();
 163:quantum/matrix.c **** 
 164:quantum/matrix.c ****     // For each row...
 165:quantum/matrix.c ****     for (uint8_t row_index = 0; row_index < MATRIX_ROWS; row_index++) {
 166:quantum/matrix.c ****         // Store last value of row prior to reading
 167:quantum/matrix.c ****         matrix_row_t last_row_value    = current_matrix[row_index];
 168:quantum/matrix.c ****         matrix_row_t current_row_value = last_row_value;
 169:quantum/matrix.c **** 
 170:quantum/matrix.c ****         // Check row pin state
 171:quantum/matrix.c ****         if (readPin(row_pins[row_index]) == 0) {
 172:quantum/matrix.c ****             // Pin LO, set col bit
 173:quantum/matrix.c ****             current_row_value |= (MATRIX_ROW_SHIFTER << current_col);
 174:quantum/matrix.c ****         } else {
 175:quantum/matrix.c ****             // Pin HI, clear col bit
 176:quantum/matrix.c ****             current_row_value &= ~(MATRIX_ROW_SHIFTER << current_col);
 177:quantum/matrix.c ****         }
 178:quantum/matrix.c **** 
 179:quantum/matrix.c ****         // Determine if the matrix changed state
 180:quantum/matrix.c ****         if ((last_row_value != current_row_value)) {
 181:quantum/matrix.c ****             matrix_changed |= true;
 182:quantum/matrix.c ****             current_matrix[row_index] = current_row_value;
 183:quantum/matrix.c ****         }
 184:quantum/matrix.c ****     }
 185:quantum/matrix.c **** 
 186:quantum/matrix.c ****     // Unselect col
 187:quantum/matrix.c ****     unselect_col(current_col);
 188:quantum/matrix.c **** 
 189:quantum/matrix.c ****     return matrix_changed;
 190:quantum/matrix.c **** }
 191:quantum/matrix.c **** 
 192:quantum/matrix.c **** #    else
 193:quantum/matrix.c **** #        error DIODE_DIRECTION must be one of COL2ROW or ROW2COL!
 194:quantum/matrix.c **** #    endif
 195:quantum/matrix.c **** #else
 196:quantum/matrix.c **** #    error DIODE_DIRECTION is not defined!
 197:quantum/matrix.c **** #endif
 198:quantum/matrix.c **** 
 199:quantum/matrix.c **** void matrix_init(void) {
  82               		.loc 1 199 0
  83               		.cfi_startproc
  84               	/* prologue: function */
  85               	/* frame size = 0 */
  86               	/* stack size = 0 */
  87               	.L__stack_usage = 0
  88               	.LVL5:
  89               	.LBB26:
  90               	.LBB27:
  91               	.LBB28:
  95:quantum/matrix.c ****     }
  92               		.loc 1 95 0
  93 0000 87E6      		ldi r24,lo8(103)
  94 0002 0E94 0000 		call setPinInputHigh_atomic
  95               	.LVL6:
  96 0006 86E6      		ldi r24,lo8(102)
  97 0008 0E94 0000 		call setPinInputHigh_atomic
  98               	.LVL7:
  99 000c 87EF      		ldi r24,lo8(-9)
 100 000e 0E94 0000 		call setPinInputHigh_atomic
 101               	.LVL8:
 102 0012 86EF      		ldi r24,lo8(-10)
 103 0014 0E94 0000 		call setPinInputHigh_atomic
 104               	.LVL9:
 105               	.LBE28:
 106               	.LBE27:
 107               	.LBB29:
 102:quantum/matrix.c ****     }
 108               		.loc 1 102 0
 109 0018 85EF      		ldi r24,lo8(-11)
 110 001a 0E94 0000 		call setPinInputHigh_atomic
 111               	.LVL10:
 112 001e 84EF      		ldi r24,lo8(-12)
 113 0020 0E94 0000 		call setPinInputHigh_atomic
 114               	.LVL11:
 115 0024 81EF      		ldi r24,lo8(-15)
 116 0026 0E94 0000 		call setPinInputHigh_atomic
 117               	.LVL12:
 118 002a 80EF      		ldi r24,lo8(-16)
 119 002c 0E94 0000 		call setPinInputHigh_atomic
 120               	.LVL13:
 121               	.LBE29:
 122               	.LBE26:
 123               	.LBB30:
 200:quantum/matrix.c ****     // initialize key pins
 201:quantum/matrix.c ****     init_pins();
 202:quantum/matrix.c **** 
 203:quantum/matrix.c ****     // initialize matrix state: all keys off
 204:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 205:quantum/matrix.c ****         raw_matrix[i] = 0;
 124               		.loc 1 205 0
 125 0030 A0E0      		ldi r26,lo8(raw_matrix)
 126 0032 B0E0      		ldi r27,hi8(raw_matrix)
 127 0034 1C92      		st X,__zero_reg__
 206:quantum/matrix.c ****         matrix[i]     = 0;
 128               		.loc 1 206 0
 129 0036 E0E0      		ldi r30,lo8(matrix)
 130 0038 F0E0      		ldi r31,hi8(matrix)
 131 003a 1082      		st Z,__zero_reg__
 132               	.LVL14:
 205:quantum/matrix.c ****         matrix[i]     = 0;
 133               		.loc 1 205 0
 134 003c 1196      		adiw r26,1
 135 003e 1C92      		st X,__zero_reg__
 136 0040 1197      		sbiw r26,1
 137               		.loc 1 206 0
 138 0042 1182      		std Z+1,__zero_reg__
 139               	.LVL15:
 205:quantum/matrix.c ****         matrix[i]     = 0;
 140               		.loc 1 205 0
 141 0044 1296      		adiw r26,2
 142 0046 1C92      		st X,__zero_reg__
 143 0048 1297      		sbiw r26,2
 144               		.loc 1 206 0
 145 004a 1282      		std Z+2,__zero_reg__
 146               	.LVL16:
 205:quantum/matrix.c ****         matrix[i]     = 0;
 147               		.loc 1 205 0
 148 004c 1396      		adiw r26,3
 149 004e 1C92      		st X,__zero_reg__
 150               		.loc 1 206 0
 151 0050 1382      		std Z+3,__zero_reg__
 152               	.LVL17:
 153               	.LBE30:
 207:quantum/matrix.c ****     }
 208:quantum/matrix.c **** 
 209:quantum/matrix.c ****     debounce_init(MATRIX_ROWS);
 154               		.loc 1 209 0
 155 0052 84E0      		ldi r24,lo8(4)
 156 0054 0E94 0000 		call debounce_init
 157               	.LVL18:
 210:quantum/matrix.c **** 
 211:quantum/matrix.c ****     matrix_init_quantum();
 158               		.loc 1 211 0
 159 0058 0C94 0000 		jmp matrix_init_quantum
 160               	.LVL19:
 161               		.cfi_endproc
 162               	.LFE124:
 164               		.section	.text.matrix_scan,"ax",@progbits
 165               	.global	matrix_scan
 167               	matrix_scan:
 168               	.LFB125:
 212:quantum/matrix.c **** }
 213:quantum/matrix.c **** 
 214:quantum/matrix.c **** uint8_t matrix_scan(void) {
 169               		.loc 1 214 0
 170               		.cfi_startproc
 171 0000 8F92      		push r8
 172               	.LCFI0:
 173               		.cfi_def_cfa_offset 3
 174               		.cfi_offset 8, -2
 175 0002 9F92      		push r9
 176               	.LCFI1:
 177               		.cfi_def_cfa_offset 4
 178               		.cfi_offset 9, -3
 179 0004 AF92      		push r10
 180               	.LCFI2:
 181               		.cfi_def_cfa_offset 5
 182               		.cfi_offset 10, -4
 183 0006 BF92      		push r11
 184               	.LCFI3:
 185               		.cfi_def_cfa_offset 6
 186               		.cfi_offset 11, -5
 187 0008 CF92      		push r12
 188               	.LCFI4:
 189               		.cfi_def_cfa_offset 7
 190               		.cfi_offset 12, -6
 191 000a DF92      		push r13
 192               	.LCFI5:
 193               		.cfi_def_cfa_offset 8
 194               		.cfi_offset 13, -7
 195 000c EF92      		push r14
 196               	.LCFI6:
 197               		.cfi_def_cfa_offset 9
 198               		.cfi_offset 14, -8
 199 000e FF92      		push r15
 200               	.LCFI7:
 201               		.cfi_def_cfa_offset 10
 202               		.cfi_offset 15, -9
 203 0010 0F93      		push r16
 204               	.LCFI8:
 205               		.cfi_def_cfa_offset 11
 206               		.cfi_offset 16, -10
 207 0012 1F93      		push r17
 208               	.LCFI9:
 209               		.cfi_def_cfa_offset 12
 210               		.cfi_offset 17, -11
 211 0014 CF93      		push r28
 212               	.LCFI10:
 213               		.cfi_def_cfa_offset 13
 214               		.cfi_offset 28, -12
 215 0016 DF93      		push r29
 216               	.LCFI11:
 217               		.cfi_def_cfa_offset 14
 218               		.cfi_offset 29, -13
 219               	/* prologue: function */
 220               	/* frame size = 0 */
 221               	/* stack size = 12 */
 222               	.L__stack_usage = 12
 223               	.LVL20:
 224 0018 80E0      		ldi r24,lo8(row_pins)
 225 001a A82E      		mov r10,r24
 226 001c 80E0      		ldi r24,hi8(row_pins)
 227 001e B82E      		mov r11,r24
 228 0020 C0E0      		ldi r28,lo8(raw_matrix)
 229 0022 D0E0      		ldi r29,hi8(raw_matrix)
 230 0024 90E0      		ldi r25,lo8(row_pins+4)
 231 0026 E92E      		mov r14,r25
 232 0028 90E0      		ldi r25,hi8(row_pins+4)
 233 002a F92E      		mov r15,r25
 215:quantum/matrix.c ****     bool changed = false;
 234               		.loc 1 215 0
 235 002c 912C      		mov r9,__zero_reg__
 236               	.LBB47:
 237               	.LBB48:
 238               	.LBB49:
 239               	.LBB50:
 240               	.LBB51:
 241               	.LBB52:
 242               	.LBB53:
  37:quantum/matrix.c ****         writePinLow(pin);
 243               		.loc 1 37 0
 244 002e 01E0      		ldi r16,lo8(1)
 245 0030 10E0      		ldi r17,0
 246               	.LVL21:
 247               	.L7:
 248 0032 6501      		movw r12,r10
 249               	.LBE53:
 250               	.LBE52:
  86:quantum/matrix.c **** }
 251               		.loc 1 86 0
 252 0034 F501      		movw r30,r10
 253 0036 8081      		ld r24,Z
 254               	.LVL22:
 255               	.LBB59:
 256               	.LBB58:
 257               	.LBB54:
 258               	.LBB55:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 259               		.loc 2 50 0
 260               	/* #APP */
 261               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 262 0038 F894      		cli
 263               	 ;  0 "" 2
 264               	.LVL23:
 265               	/* #NOAPP */
 266               	.LBE55:
 267               	.LBE54:
  37:quantum/matrix.c ****         writePinLow(pin);
 268               		.loc 1 37 0
 269 003a E82F      		mov r30,r24
 270 003c E295      		swap r30
 271 003e EF70      		andi r30,lo8(15)
 272 0040 F0E0      		ldi r31,0
 273 0042 21A1      		ldd r18,Z+33
 274 0044 8F70      		andi r24,lo8(15)
 275               	.LVL24:
 276 0046 A801      		movw r20,r16
 277 0048 00C0      		rjmp 2f
 278               		1:
 279 004a 440F      		lsl r20
 280 004c 551F      		rol r21
 281               		2:
 282 004e 8A95      		dec r24
 283 0050 02F4      		brpl 1b
 284 0052 CA01      		movw r24,r20
 285 0054 922F      		mov r25,r18
 286 0056 982B      		or r25,r24
 287 0058 91A3      		std Z+33,r25
 288               	.LVL25:
  38:quantum/matrix.c ****     }
 289               		.loc 1 38 0
 290 005a 92A1      		ldd r25,Z+34
 291 005c 8095      		com r24
 292 005e 8923      		and r24,r25
 293 0060 82A3      		std Z+34,r24
 294               	.LVL26:
 295               	.LBB56:
 296               	.LBB57:
  56:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 297               		.loc 2 56 0
 298               	/* #APP */
 299               	 ;  56 "/usr/lib/avr/include/util/atomic.h" 1
 300 0062 7894      		sei
 301               	 ;  0 "" 2
 302               		.loc 2 57 0
 303               	.LVL27:
 304               	/* #NOAPP */
 305               	.LBE57:
 306               	.LBE56:
 307               	.LBE58:
 308               	.LBE59:
 309               	.LBE51:
 310               	.LBE50:
 112:quantum/matrix.c **** 
 311               		.loc 1 112 0
 312 0064 0E94 0000 		call matrix_io_delay
 313               	.LVL28:
 314 0068 E0E0      		ldi r30,lo8(col_pins)
 315 006a F0E0      		ldi r31,hi8(col_pins)
 316 006c 20E0      		ldi r18,0
 317 006e 30E0      		ldi r19,0
 108:quantum/matrix.c **** 
 318               		.loc 1 108 0
 319 0070 812C      		mov r8,__zero_reg__
 320               	.LVL29:
 321               	.L5:
 322               	.LBB60:
 323               	.LBB61:
 117:quantum/matrix.c **** 
 324               		.loc 1 117 0
 325 0072 4191      		ld r20,Z+
 326 0074 A42F      		mov r26,r20
 327 0076 A295      		swap r26
 328 0078 AF70      		andi r26,lo8(15)
 329 007a B0E0      		ldi r27,0
 330 007c 9096      		adiw r26,32
 331 007e 8C91      		ld r24,X
 332               	.LVL30:
 120:quantum/matrix.c ****     }
 333               		.loc 1 120 0
 334 0080 90E0      		ldi r25,0
 335 0082 4F70      		andi r20,lo8(15)
 336               	.LVL31:
 337 0084 00C0      		rjmp 2f
 338               		1:
 339 0086 9595      		asr r25
 340 0088 8795      		ror r24
 341               		2:
 342 008a 4A95      		dec r20
 343 008c 02F4      		brpl 1b
 344               	.LVL32:
 345 008e 80FD      		sbrc r24,0
 346 0090 00C0      		rjmp .L8
 347 0092 802F      		mov r24,r16
 348 0094 022E      		mov r0,r18
 349 0096 00C0      		rjmp 2f
 350               		1:
 351 0098 880F      		lsl r24
 352               		2:
 353 009a 0A94      		dec r0
 354 009c 02F4      		brpl 1b
 355 009e 00C0      		rjmp .L4
 356               	.L8:
 357 00a0 80E0      		ldi r24,0
 358               	.L4:
 359 00a2 882A      		or r8,r24
 360               	.LVL33:
 361 00a4 2F5F      		subi r18,-1
 362 00a6 3F4F      		sbci r19,-1
 363               	.LVL34:
 364               	.LBE61:
 115:quantum/matrix.c ****         // Select the col pin to read (active low)
 365               		.loc 1 115 0
 366 00a8 2430      		cpi r18,4
 367 00aa 3105      		cpc r19,__zero_reg__
 368 00ac 01F4      		brne .L5
 369               	.LVL35:
 370 00ae 5FEF      		ldi r21,-1
 371 00b0 A51A      		sub r10,r21
 372 00b2 B50A      		sbc r11,r21
 373               	.LVL36:
 374               	.LBE60:
 375               	.LBB62:
 376               	.LBB63:
  90:quantum/matrix.c **** }
 377               		.loc 1 90 0
 378 00b4 F601      		movw r30,r12
 379 00b6 8081      		ld r24,Z
 380 00b8 0E94 0000 		call setPinInputHigh_atomic
 381               	.LVL37:
 382               	.LBE63:
 383               	.LBE62:
 127:quantum/matrix.c ****         current_matrix[current_row] = current_row_value;
 384               		.loc 1 127 0
 385 00bc 8881      		ld r24,Y
 386 00be 8816      		cp r8,r24
 387 00c0 01F0      		breq .L9
 128:quantum/matrix.c ****         return true;
 388               		.loc 1 128 0
 389 00c2 8882      		st Y,r8
 129:quantum/matrix.c ****     }
 390               		.loc 1 129 0
 391 00c4 81E0      		ldi r24,lo8(1)
 392 00c6 00C0      		rjmp .L6
 393               	.L9:
 131:quantum/matrix.c **** }
 394               		.loc 1 131 0
 395 00c8 80E0      		ldi r24,0
 396               	.L6:
 397               	.LVL38:
 398               	.LBE49:
 399               	.LBE48:
 216:quantum/matrix.c **** 
 217:quantum/matrix.c **** #if defined(DIRECT_PINS) || (DIODE_DIRECTION == COL2ROW)
 218:quantum/matrix.c ****     // Set row, read cols
 219:quantum/matrix.c ****     for (uint8_t current_row = 0; current_row < MATRIX_ROWS; current_row++) {
 220:quantum/matrix.c ****         changed |= read_cols_on_row(raw_matrix, current_row);
 400               		.loc 1 220 0
 401 00ca 982A      		or r9,r24
 402               	.LVL39:
 403 00cc 2196      		adiw r28,1
 219:quantum/matrix.c ****         changed |= read_cols_on_row(raw_matrix, current_row);
 404               		.loc 1 219 0
 405 00ce EA14      		cp r14,r10
 406 00d0 FB04      		cpc r15,r11
 407 00d2 01F0      		breq .+2
 408 00d4 00C0      		rjmp .L7
 409               	.LBE47:
 221:quantum/matrix.c ****     }
 222:quantum/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL)
 223:quantum/matrix.c ****     // Set col, read rows
 224:quantum/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 225:quantum/matrix.c ****         changed |= read_rows_on_col(raw_matrix, current_col);
 226:quantum/matrix.c ****     }
 227:quantum/matrix.c **** #endif
 228:quantum/matrix.c **** 
 229:quantum/matrix.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 410               		.loc 1 229 0
 411 00d6 292D      		mov r18,r9
 412 00d8 44E0      		ldi r20,lo8(4)
 413 00da 60E0      		ldi r22,lo8(matrix)
 414 00dc 70E0      		ldi r23,hi8(matrix)
 415 00de 80E0      		ldi r24,lo8(raw_matrix)
 416 00e0 90E0      		ldi r25,hi8(raw_matrix)
 417 00e2 0E94 0000 		call debounce
 418               	.LVL40:
 230:quantum/matrix.c **** 
 231:quantum/matrix.c ****     matrix_scan_quantum();
 419               		.loc 1 231 0
 420 00e6 0E94 0000 		call matrix_scan_quantum
 421               	.LVL41:
 232:quantum/matrix.c ****     return (uint8_t)changed;
 233:quantum/matrix.c **** }
 422               		.loc 1 233 0
 423 00ea 892D      		mov r24,r9
 424               	/* epilogue start */
 425 00ec DF91      		pop r29
 426 00ee CF91      		pop r28
 427 00f0 1F91      		pop r17
 428 00f2 0F91      		pop r16
 429 00f4 FF90      		pop r15
 430 00f6 EF90      		pop r14
 431 00f8 DF90      		pop r13
 432 00fa CF90      		pop r12
 433 00fc BF90      		pop r11
 434 00fe AF90      		pop r10
 435               	.LVL42:
 436 0100 9F90      		pop r9
 437               	.LVL43:
 438 0102 8F90      		pop r8
 439 0104 0895      		ret
 440               		.cfi_endproc
 441               	.LFE125:
 443               		.section	.rodata.col_pins,"a",@progbits
 446               	col_pins:
 447 0000 F5        		.byte	-11
 448 0001 F4        		.byte	-12
 449 0002 F1        		.byte	-15
 450 0003 F0        		.byte	-16
 451               		.section	.rodata.row_pins,"a",@progbits
 454               	row_pins:
 455 0000 67        		.byte	103
 456 0001 66        		.byte	102
 457 0002 F7        		.byte	-9
 458 0003 F6        		.byte	-10
 459               		.text
 460               	.Letext0:
 461               		.file 3 "/usr/lib/avr/include/stdint.h"
 462               		.file 4 "tmk_core/common/matrix.h"
 463               		.file 5 "tmk_core/common/report.h"
 464               		.file 6 "quantum/quantum.h"
 465               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 466               		.file 8 "tmk_core/common/action_util.h"
 467               		.file 9 "quantum/debounce.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
     /tmp/ccBIIPRf.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBIIPRf.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBIIPRf.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBIIPRf.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBIIPRf.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBIIPRf.s:12     .text.setPinInputHigh_atomic:0000000000000000 setPinInputHigh_atomic
     /tmp/ccBIIPRf.s:80     .text.matrix_init:0000000000000000 matrix_init
     /tmp/ccBIIPRf.s:167    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/ccBIIPRf.s:454    .rodata.row_pins:0000000000000000 row_pins
     /tmp/ccBIIPRf.s:446    .rodata.col_pins:0000000000000000 col_pins

UNDEFINED SYMBOLS
raw_matrix
matrix
debounce_init
matrix_init_quantum
matrix_io_delay
debounce
matrix_scan_quantum
__do_copy_data
