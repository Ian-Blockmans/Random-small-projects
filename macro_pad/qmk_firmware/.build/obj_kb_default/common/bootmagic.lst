   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB106:
  14               		.file 1 "tmk_core/common/bootmagic.c"
   1:tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:tmk_core/common/bootmagic.c **** #include "wait.h"
   4:tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:tmk_core/common/bootmagic.c **** #include "debug.h"
   7:tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:tmk_core/common/bootmagic.c **** #include "host.h"
   9:tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:tmk_core/common/bootmagic.c **** 
  13:tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  14:tmk_core/common/bootmagic.c **** 
  15:tmk_core/common/bootmagic.c **** /** \brief Bootmagic
  16:tmk_core/common/bootmagic.c ****  *
  17:tmk_core/common/bootmagic.c ****  * FIXME: needs doc
  18:tmk_core/common/bootmagic.c ****  */
  19:tmk_core/common/bootmagic.c **** void bootmagic(void) {
  20:tmk_core/common/bootmagic.c ****     /* check signature */
  21:tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  22:tmk_core/common/bootmagic.c ****         eeconfig_init();
  23:tmk_core/common/bootmagic.c ****     }
  24:tmk_core/common/bootmagic.c **** 
  25:tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  26:tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  27:tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  28:tmk_core/common/bootmagic.c ****     while (scan--) {
  29:tmk_core/common/bootmagic.c ****         matrix_scan();
  30:tmk_core/common/bootmagic.c ****         wait_ms(10);
  31:tmk_core/common/bootmagic.c ****     }
  32:tmk_core/common/bootmagic.c ****     print("done.\n");
  33:tmk_core/common/bootmagic.c **** 
  34:tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  35:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  36:tmk_core/common/bootmagic.c ****         return;
  37:tmk_core/common/bootmagic.c ****     }
  38:tmk_core/common/bootmagic.c **** 
  39:tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  40:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  41:tmk_core/common/bootmagic.c ****         eeconfig_init();
  42:tmk_core/common/bootmagic.c ****     }
  43:tmk_core/common/bootmagic.c **** 
  44:tmk_core/common/bootmagic.c ****     /* bootloader */
  45:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  46:tmk_core/common/bootmagic.c ****         bootloader_jump();
  47:tmk_core/common/bootmagic.c ****     }
  48:tmk_core/common/bootmagic.c **** 
  49:tmk_core/common/bootmagic.c ****     /* debug enable */
  50:tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  51:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  52:tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  53:tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  54:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  55:tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  56:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  57:tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  58:tmk_core/common/bootmagic.c ****         } else {
  59:tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  60:tmk_core/common/bootmagic.c ****         }
  61:tmk_core/common/bootmagic.c ****     }
  62:tmk_core/common/bootmagic.c ****     eeconfig_update_debug(debug_config.raw);
  63:tmk_core/common/bootmagic.c **** 
  64:tmk_core/common/bootmagic.c ****     /* keymap config */
  65:tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  66:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  67:tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  68:tmk_core/common/bootmagic.c ****     }
  69:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  70:tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  71:tmk_core/common/bootmagic.c ****     }
  72:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  73:tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  74:tmk_core/common/bootmagic.c ****     }
  75:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  76:tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  77:tmk_core/common/bootmagic.c ****     }
  78:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  79:tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  80:tmk_core/common/bootmagic.c ****     }
  81:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  82:tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  83:tmk_core/common/bootmagic.c ****     }
  84:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  85:tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  86:tmk_core/common/bootmagic.c ****     }
  87:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  88:tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  89:tmk_core/common/bootmagic.c ****     }
  90:tmk_core/common/bootmagic.c ****     eeconfig_update_keymap(keymap_config.raw);
  91:tmk_core/common/bootmagic.c **** 
  92:tmk_core/common/bootmagic.c ****     /* default layer */
  93:tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  94:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) {
  95:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 0);
  96:tmk_core/common/bootmagic.c ****     }
  97:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) {
  98:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 1);
  99:tmk_core/common/bootmagic.c ****     }
 100:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) {
 101:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 2);
 102:tmk_core/common/bootmagic.c ****     }
 103:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) {
 104:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 3);
 105:tmk_core/common/bootmagic.c ****     }
 106:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) {
 107:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 4);
 108:tmk_core/common/bootmagic.c ****     }
 109:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) {
 110:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 5);
 111:tmk_core/common/bootmagic.c ****     }
 112:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) {
 113:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 6);
 114:tmk_core/common/bootmagic.c ****     }
 115:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) {
 116:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 7);
 117:tmk_core/common/bootmagic.c ****     }
 118:tmk_core/common/bootmagic.c ****     if (default_layer) {
 119:tmk_core/common/bootmagic.c ****         eeconfig_update_default_layer(default_layer);
 120:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 121:tmk_core/common/bootmagic.c ****     } else {
 122:tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 123:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 124:tmk_core/common/bootmagic.c ****     }
 125:tmk_core/common/bootmagic.c ****     /* Also initialize layer state to trigger callback functions for layer_state */
 126:tmk_core/common/bootmagic.c ****     layer_state_set_kb((layer_state_t)layer_state);
 127:tmk_core/common/bootmagic.c **** 
 128:tmk_core/common/bootmagic.c ****     /* EE_HANDS handedness */
 129:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EE_HANDS_LEFT)) {
 130:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(true);
 131:tmk_core/common/bootmagic.c ****     }
 132:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EE_HANDS_RIGHT)) {
 133:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(false);
 134:tmk_core/common/bootmagic.c ****     }
 135:tmk_core/common/bootmagic.c **** }
 136:tmk_core/common/bootmagic.c **** 
 137:tmk_core/common/bootmagic.c **** /** \brief Scan Keycode
 138:tmk_core/common/bootmagic.c ****  *
 139:tmk_core/common/bootmagic.c ****  * FIXME: needs doc
 140:tmk_core/common/bootmagic.c ****  */
 141:tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode) {
  15               		.loc 1 141 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF92      		push r12
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 12, -2
  22 0002 DF92      		push r13
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 13, -3
  26 0004 EF92      		push r14
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 14, -4
  30 0006 FF92      		push r15
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 15, -5
  34 0008 0F93      		push r16
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 16, -6
  38 000a 1F93      		push r17
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 17, -7
  42 000c CF93      		push r28
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 28, -8
  46               	/* prologue: function */
  47               	/* frame size = 0 */
  48               	/* stack size = 7 */
  49               	.L__stack_usage = 7
  50               	.LVL1:
  51               	.LBB4:
 142:tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  52               		.loc 1 142 0
  53 000e C0E0      		ldi r28,0
  54               	.LBB5:
  55               	.LBB6:
 143:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 144:tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 145:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
 146:tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){.row = r, .col = c})) {
  56               		.loc 1 146 0
  57 0010 E82E      		mov r14,r24
  58 0012 F12C      		mov r15,__zero_reg__
  59               	.LVL2:
  60               	.L7:
  61               	.LBE6:
 143:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  62               		.loc 1 143 0
  63 0014 8C2F      		mov r24,r28
  64 0016 0E94 0000 		call matrix_get_row
  65               	.LVL3:
  66 001a 00E0      		ldi r16,0
  67 001c 10E0      		ldi r17,0
  68               	.LBB7:
 145:tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){.row = r, .col = c})) {
  69               		.loc 1 145 0
  70 001e C82E      		mov r12,r24
  71 0020 D12C      		mov r13,__zero_reg__
  72               	.LVL4:
  73               	.L3:
  74 0022 C601      		movw r24,r12
  75 0024 002E      		mov r0,r16
  76 0026 00C0      		rjmp 2f
  77               		1:
  78 0028 9595      		asr r25
  79 002a 8795      		ror r24
  80               		2:
  81 002c 0A94      		dec r0
  82 002e 02F4      		brpl 1b
  83 0030 80FD      		sbrc r24,0
  84 0032 00C0      		rjmp .L2
  85               	.L6:
  86               	.LVL5:
  87 0034 0F5F      		subi r16,-1
  88 0036 1F4F      		sbci r17,-1
  89               	.LVL6:
 144:tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1 << c)) {
  90               		.loc 1 144 0
  91 0038 0430      		cpi r16,4
  92 003a 1105      		cpc r17,__zero_reg__
  93 003c 01F4      		brne .L3
  94 003e 00C0      		rjmp .L13
  95               	.L2:
  96               		.loc 1 146 0
  97 0040 602F      		mov r22,r16
  98 0042 7C2F      		mov r23,r28
  99 0044 80E0      		ldi r24,0
 100 0046 0E94 0000 		call keymap_key_to_keycode
 101               	.LVL7:
 102 004a E816      		cp r14,r24
 103 004c F906      		cpc r15,r25
 104 004e 01F4      		brne .L6
 147:tmk_core/common/bootmagic.c ****                     return true;
 105               		.loc 1 147 0
 106 0050 81E0      		ldi r24,lo8(1)
 107 0052 00C0      		rjmp .L5
 108               	.L13:
 109               	.LBE7:
 110               	.LBE5:
 142:tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 111               		.loc 1 142 0 discriminator 2
 112 0054 CF5F      		subi r28,lo8(-(1))
 113               	.LVL8:
 114 0056 C430      		cpi r28,lo8(4)
 115 0058 01F4      		brne .L7
 116               	.LBE4:
 148:tmk_core/common/bootmagic.c ****                 }
 149:tmk_core/common/bootmagic.c ****             }
 150:tmk_core/common/bootmagic.c ****         }
 151:tmk_core/common/bootmagic.c ****     }
 152:tmk_core/common/bootmagic.c ****     return false;
 117               		.loc 1 152 0
 118 005a 80E0      		ldi r24,0
 119               	.LVL9:
 120               	.L5:
 121               	/* epilogue start */
 153:tmk_core/common/bootmagic.c **** }
 122               		.loc 1 153 0
 123 005c CF91      		pop r28
 124               	.LVL10:
 125 005e 1F91      		pop r17
 126 0060 0F91      		pop r16
 127 0062 FF90      		pop r15
 128 0064 EF90      		pop r14
 129               	.LVL11:
 130 0066 DF90      		pop r13
 131 0068 CF90      		pop r12
 132               	.LVL12:
 133 006a 0895      		ret
 134               		.cfi_endproc
 135               	.LFE106:
 137               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 138               	.global	bootmagic_scan_keycode
 140               	bootmagic_scan_keycode:
 141               	.LFB107:
 154:tmk_core/common/bootmagic.c **** 
 155:tmk_core/common/bootmagic.c **** /** \brief Bootmagic Scan Keycode
 156:tmk_core/common/bootmagic.c ****  *
 157:tmk_core/common/bootmagic.c ****  * FIXME: needs doc
 158:tmk_core/common/bootmagic.c ****  */
 159:tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode) {
 142               		.loc 1 159 0
 143               		.cfi_startproc
 144               	.LVL13:
 145 0000 CF93      		push r28
 146               	.LCFI7:
 147               		.cfi_def_cfa_offset 3
 148               		.cfi_offset 28, -2
 149               	/* prologue: function */
 150               	/* frame size = 0 */
 151               	/* stack size = 1 */
 152               	.L__stack_usage = 1
 153 0002 C82F      		mov r28,r24
 160:tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 154               		.loc 1 160 0
 155 0004 8CE2      		ldi r24,lo8(44)
 156               	.LVL14:
 157 0006 0E94 0000 		call scan_keycode
 158               	.LVL15:
 159 000a 8823      		tst r24
 160 000c 01F0      		breq .L15
 161:tmk_core/common/bootmagic.c **** 
 162:tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 161               		.loc 1 162 0
 162 000e 8C2F      		mov r24,r28
 163               	/* epilogue start */
 163:tmk_core/common/bootmagic.c **** }
 164               		.loc 1 163 0
 165 0010 CF91      		pop r28
 166               	.LVL16:
 162:tmk_core/common/bootmagic.c **** }
 167               		.loc 1 162 0
 168 0012 0C94 0000 		jmp scan_keycode
 169               	.LVL17:
 170               	.L15:
 171               		.loc 1 163 0
 172 0016 80E0      		ldi r24,0
 173               	/* epilogue start */
 174 0018 CF91      		pop r28
 175               	.LVL18:
 176 001a 0895      		ret
 177               		.cfi_endproc
 178               	.LFE107:
 180               		.section	.text.bootmagic,"ax",@progbits
 181               	.global	bootmagic
 183               	bootmagic:
 184               	.LFB105:
  19:tmk_core/common/bootmagic.c ****     /* check signature */
 185               		.loc 1 19 0
 186               		.cfi_startproc
 187 0000 CF93      		push r28
 188               	.LCFI8:
 189               		.cfi_def_cfa_offset 3
 190               		.cfi_offset 28, -2
 191               	/* prologue: function */
 192               	/* frame size = 0 */
 193               	/* stack size = 1 */
 194               	.L__stack_usage = 1
  21:tmk_core/common/bootmagic.c ****         eeconfig_init();
 195               		.loc 1 21 0
 196 0002 0E94 0000 		call eeconfig_is_enabled
 197               	.LVL19:
 198 0006 8111      		cpse r24,__zero_reg__
 199 0008 00C0      		rjmp .L17
  22:tmk_core/common/bootmagic.c ****     }
 200               		.loc 1 22 0
 201 000a 0E94 0000 		call eeconfig_init
 202               	.LVL20:
 203               	.L17:
  19:tmk_core/common/bootmagic.c ****     /* check signature */
 204               		.loc 1 19 0
 205 000e C5E6      		ldi r28,lo8(101)
 206               	.L18:
 207               	.LVL21:
 208 0010 C150      		subi r28,lo8(-(-1))
 209               	.LVL22:
  28:tmk_core/common/bootmagic.c ****         matrix_scan();
 210               		.loc 1 28 0
 211 0012 01F0      		breq .L108
 212               	.LVL23:
  29:tmk_core/common/bootmagic.c ****         wait_ms(10);
 213               		.loc 1 29 0
 214 0014 0E94 0000 		call matrix_scan
 215               	.LVL24:
 216               	.LBB8:
 217               	.LBB9:
 218               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 219               		.loc 2 187 0
 220 0018 8FE3      		ldi r24,lo8(-25537)
 221 001a 9CE9      		ldi r25,hi8(-25537)
 222 001c 0197      	1:	sbiw r24,1
 223 001e 01F4      		brne 1b
 224 0020 00C0      		rjmp .
 225 0022 0000      		nop
 226 0024 00C0      		rjmp .L18
 227               	.LVL25:
 228               	.L108:
 229               	.LBE9:
 230               	.LBE8:
  35:tmk_core/common/bootmagic.c ****         return;
 231               		.loc 1 35 0
 232 0026 89E2      		ldi r24,lo8(41)
 233 0028 0E94 0000 		call bootmagic_scan_keycode
 234               	.LVL26:
 235 002c 8111      		cpse r24,__zero_reg__
 236 002e 00C0      		rjmp .L16
  40:tmk_core/common/bootmagic.c ****         eeconfig_init();
 237               		.loc 1 40 0
 238 0030 8AE2      		ldi r24,lo8(42)
 239 0032 0E94 0000 		call bootmagic_scan_keycode
 240               	.LVL27:
 241 0036 8111      		cpse r24,__zero_reg__
  41:tmk_core/common/bootmagic.c ****     }
 242               		.loc 1 41 0
 243 0038 0E94 0000 		call eeconfig_init
 244               	.LVL28:
 245               	.L22:
  45:tmk_core/common/bootmagic.c ****         bootloader_jump();
 246               		.loc 1 45 0
 247 003c 85E0      		ldi r24,lo8(5)
 248 003e 0E94 0000 		call bootmagic_scan_keycode
 249               	.LVL29:
 250 0042 8111      		cpse r24,__zero_reg__
  46:tmk_core/common/bootmagic.c ****     }
 251               		.loc 1 46 0
 252 0044 0E94 0000 		call bootloader_jump
 253               	.LVL30:
 254               	.L23:
  50:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 255               		.loc 1 50 0
 256 0048 0E94 0000 		call eeconfig_read_debug
 257               	.LVL31:
 258 004c 8093 0000 		sts debug_config,r24
  51:tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 259               		.loc 1 51 0
 260 0050 87E0      		ldi r24,lo8(7)
 261 0052 0E94 0000 		call bootmagic_scan_keycode
 262               	.LVL32:
 263 0056 8823      		tst r24
 264 0058 01F0      		breq .L24
  52:tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 265               		.loc 1 52 0
 266 005a 8BE1      		ldi r24,lo8(27)
 267 005c 0E94 0000 		call bootmagic_scan_keycode
 268               	.LVL33:
 269 0060 8823      		tst r24
 270 0062 01F0      		breq .L25
  53:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 271               		.loc 1 53 0
 272 0064 8091 0000 		lds r24,debug_config
 273 0068 81FB      		bst r24,1
 274 006a 2227      		clr r18
 275 006c 20F9      		bld r18,0
 276 006e 91E0      		ldi r25,lo8(1)
 277 0070 9227      		eor r25,r18
 278 0072 90FB      		bst r25,0
 279 0074 81F9      		bld r24,1
 280 0076 00C0      		rjmp .L105
 281               	.L25:
  54:tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 282               		.loc 1 54 0
 283 0078 8EE0      		ldi r24,lo8(14)
 284 007a 0E94 0000 		call bootmagic_scan_keycode
 285               	.LVL34:
 286 007e 8823      		tst r24
 287 0080 01F0      		breq .L26
  55:tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 288               		.loc 1 55 0
 289 0082 8091 0000 		lds r24,debug_config
 290 0086 82FB      		bst r24,2
 291 0088 2227      		clr r18
 292 008a 20F9      		bld r18,0
 293 008c 91E0      		ldi r25,lo8(1)
 294 008e 9227      		eor r25,r18
 295 0090 90FB      		bst r25,0
 296 0092 82F9      		bld r24,2
 297               	.L105:
 298 0094 8093 0000 		sts debug_config,r24
 299 0098 00C0      		rjmp .L24
 300               	.L26:
  56:tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 301               		.loc 1 56 0
 302 009a 80E1      		ldi r24,lo8(16)
 303 009c 0E94 0000 		call bootmagic_scan_keycode
 304               	.LVL35:
 305 00a0 9091 0000 		lds r25,debug_config
 306 00a4 8823      		tst r24
 307 00a6 01F0      		breq .L27
  57:tmk_core/common/bootmagic.c ****         } else {
 308               		.loc 1 57 0
 309 00a8 93FB      		bst r25,3
 310 00aa 2227      		clr r18
 311 00ac 20F9      		bld r18,0
 312 00ae 81E0      		ldi r24,lo8(1)
 313 00b0 8227      		eor r24,r18
 314 00b2 80FB      		bst r24,0
 315 00b4 93F9      		bld r25,3
 316 00b6 00C0      		rjmp .L106
 317               	.L27:
  59:tmk_core/common/bootmagic.c ****         }
 318               		.loc 1 59 0
 319 00b8 892F      		mov r24,r25
 320 00ba 8095      		com r24
 321 00bc 80FB      		bst r24,0
 322 00be 90F9      		bld r25,0
 323               	.L106:
 324 00c0 9093 0000 		sts debug_config,r25
 325               	.L24:
  62:tmk_core/common/bootmagic.c **** 
 326               		.loc 1 62 0
 327 00c4 8091 0000 		lds r24,debug_config
 328 00c8 0E94 0000 		call eeconfig_update_debug
 329               	.LVL36:
  65:tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 330               		.loc 1 65 0
 331 00cc 0E94 0000 		call eeconfig_read_keymap
 332               	.LVL37:
 333 00d0 9093 0000 		sts keymap_config+1,r25
 334 00d4 8093 0000 		sts keymap_config,r24
  66:tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 335               		.loc 1 66 0
 336 00d8 80EE      		ldi r24,lo8(-32)
 337 00da 0E94 0000 		call bootmagic_scan_keycode
 338               	.LVL38:
 339 00de 8823      		tst r24
 340 00e0 01F0      		breq .L28
  67:tmk_core/common/bootmagic.c ****     }
 341               		.loc 1 67 0
 342 00e2 8091 0000 		lds r24,keymap_config
 343 00e6 982F      		mov r25,r24
 344 00e8 9095      		com r25
 345 00ea 90FB      		bst r25,0
 346 00ec 80F9      		bld r24,0
 347 00ee 8093 0000 		sts keymap_config,r24
 348               	.L28:
  69:tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 349               		.loc 1 69 0
 350 00f2 89E3      		ldi r24,lo8(57)
 351 00f4 0E94 0000 		call bootmagic_scan_keycode
 352               	.LVL39:
 353 00f8 8823      		tst r24
 354 00fa 01F0      		breq .L29
  70:tmk_core/common/bootmagic.c ****     }
 355               		.loc 1 70 0
 356 00fc 8091 0000 		lds r24,keymap_config
 357 0100 81FB      		bst r24,1
 358 0102 2227      		clr r18
 359 0104 20F9      		bld r18,0
 360 0106 91E0      		ldi r25,lo8(1)
 361 0108 9227      		eor r25,r18
 362 010a 90FB      		bst r25,0
 363 010c 81F9      		bld r24,1
 364 010e 8093 0000 		sts keymap_config,r24
 365               	.L29:
  72:tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 366               		.loc 1 72 0
 367 0112 82EE      		ldi r24,lo8(-30)
 368 0114 0E94 0000 		call bootmagic_scan_keycode
 369               	.LVL40:
 370 0118 8823      		tst r24
 371 011a 01F0      		breq .L30
  73:tmk_core/common/bootmagic.c ****     }
 372               		.loc 1 73 0
 373 011c 8091 0000 		lds r24,keymap_config
 374 0120 82FB      		bst r24,2
 375 0122 2227      		clr r18
 376 0124 20F9      		bld r18,0
 377 0126 91E0      		ldi r25,lo8(1)
 378 0128 9227      		eor r25,r18
 379 012a 90FB      		bst r25,0
 380 012c 82F9      		bld r24,2
 381 012e 8093 0000 		sts keymap_config,r24
 382               	.L30:
  75:tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 383               		.loc 1 75 0
 384 0132 86EE      		ldi r24,lo8(-26)
 385 0134 0E94 0000 		call bootmagic_scan_keycode
 386               	.LVL41:
 387 0138 8823      		tst r24
 388 013a 01F0      		breq .L31
  76:tmk_core/common/bootmagic.c ****     }
 389               		.loc 1 76 0
 390 013c 8091 0000 		lds r24,keymap_config
 391 0140 83FB      		bst r24,3
 392 0142 2227      		clr r18
 393 0144 20F9      		bld r18,0
 394 0146 91E0      		ldi r25,lo8(1)
 395 0148 9227      		eor r25,r18
 396 014a 90FB      		bst r25,0
 397 014c 83F9      		bld r24,3
 398 014e 8093 0000 		sts keymap_config,r24
 399               	.L31:
  78:tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 400               		.loc 1 78 0
 401 0152 83EE      		ldi r24,lo8(-29)
 402 0154 0E94 0000 		call bootmagic_scan_keycode
 403               	.LVL42:
 404 0158 8823      		tst r24
 405 015a 01F0      		breq .L32
  79:tmk_core/common/bootmagic.c ****     }
 406               		.loc 1 79 0
 407 015c 8091 0000 		lds r24,keymap_config
 408 0160 84FB      		bst r24,4
 409 0162 2227      		clr r18
 410 0164 20F9      		bld r18,0
 411 0166 91E0      		ldi r25,lo8(1)
 412 0168 9227      		eor r25,r18
 413 016a 90FB      		bst r25,0
 414 016c 84F9      		bld r24,4
 415 016e 8093 0000 		sts keymap_config,r24
 416               	.L32:
  81:tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 417               		.loc 1 81 0
 418 0172 85E3      		ldi r24,lo8(53)
 419 0174 0E94 0000 		call bootmagic_scan_keycode
 420               	.LVL43:
 421 0178 8823      		tst r24
 422 017a 01F0      		breq .L33
  82:tmk_core/common/bootmagic.c ****     }
 423               		.loc 1 82 0
 424 017c 8091 0000 		lds r24,keymap_config
 425 0180 85FB      		bst r24,5
 426 0182 2227      		clr r18
 427 0184 20F9      		bld r18,0
 428 0186 91E0      		ldi r25,lo8(1)
 429 0188 9227      		eor r25,r18
 430 018a 90FB      		bst r25,0
 431 018c 85F9      		bld r24,5
 432 018e 8093 0000 		sts keymap_config,r24
 433               	.L33:
  84:tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 434               		.loc 1 84 0
 435 0192 81E3      		ldi r24,lo8(49)
 436 0194 0E94 0000 		call bootmagic_scan_keycode
 437               	.LVL44:
 438 0198 8823      		tst r24
 439 019a 01F0      		breq .L34
  85:tmk_core/common/bootmagic.c ****     }
 440               		.loc 1 85 0
 441 019c 8091 0000 		lds r24,keymap_config
 442 01a0 86FB      		bst r24,6
 443 01a2 2227      		clr r18
 444 01a4 20F9      		bld r18,0
 445 01a6 91E0      		ldi r25,lo8(1)
 446 01a8 9227      		eor r25,r18
 447 01aa 90FB      		bst r25,0
 448 01ac 86F9      		bld r24,6
 449 01ae 8093 0000 		sts keymap_config,r24
 450               	.L34:
  87:tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 451               		.loc 1 87 0
 452 01b2 81E1      		ldi r24,lo8(17)
 453 01b4 0E94 0000 		call bootmagic_scan_keycode
 454               	.LVL45:
 455 01b8 8823      		tst r24
 456 01ba 01F0      		breq .L35
  88:tmk_core/common/bootmagic.c ****     }
 457               		.loc 1 88 0
 458 01bc 8091 0000 		lds r24,keymap_config
 459 01c0 87FB      		bst r24,7
 460 01c2 2227      		clr r18
 461 01c4 20F9      		bld r18,0
 462 01c6 91E0      		ldi r25,lo8(1)
 463 01c8 9227      		eor r25,r18
 464 01ca 90FB      		bst r25,0
 465 01cc 87F9      		bld r24,7
 466 01ce 8093 0000 		sts keymap_config,r24
 467               	.L35:
  90:tmk_core/common/bootmagic.c **** 
 468               		.loc 1 90 0
 469 01d2 8091 0000 		lds r24,keymap_config
 470 01d6 9091 0000 		lds r25,keymap_config+1
 471 01da 0E94 0000 		call eeconfig_update_keymap
 472               	.LVL46:
  94:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 0);
 473               		.loc 1 94 0
 474 01de 87E2      		ldi r24,lo8(39)
 475 01e0 0E94 0000 		call bootmagic_scan_keycode
 476               	.LVL47:
 477 01e4 C82F      		mov r28,r24
 478               	.LVL48:
  97:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 1);
 479               		.loc 1 97 0
 480 01e6 8EE1      		ldi r24,lo8(30)
 481               	.LVL49:
 482 01e8 0E94 0000 		call bootmagic_scan_keycode
 483               	.LVL50:
 484 01ec 8111      		cpse r24,__zero_reg__
  98:tmk_core/common/bootmagic.c ****     }
 485               		.loc 1 98 0
 486 01ee C260      		ori r28,lo8(2)
 487               	.LVL51:
 488               	.L36:
 100:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 2);
 489               		.loc 1 100 0
 490 01f0 8FE1      		ldi r24,lo8(31)
 491 01f2 0E94 0000 		call bootmagic_scan_keycode
 492               	.LVL52:
 493 01f6 8111      		cpse r24,__zero_reg__
 101:tmk_core/common/bootmagic.c ****     }
 494               		.loc 1 101 0
 495 01f8 C460      		ori r28,lo8(4)
 496               	.LVL53:
 497               	.L37:
 103:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 3);
 498               		.loc 1 103 0
 499 01fa 80E2      		ldi r24,lo8(32)
 500 01fc 0E94 0000 		call bootmagic_scan_keycode
 501               	.LVL54:
 502 0200 8111      		cpse r24,__zero_reg__
 104:tmk_core/common/bootmagic.c ****     }
 503               		.loc 1 104 0
 504 0202 C860      		ori r28,lo8(8)
 505               	.LVL55:
 506               	.L38:
 106:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 4);
 507               		.loc 1 106 0
 508 0204 81E2      		ldi r24,lo8(33)
 509 0206 0E94 0000 		call bootmagic_scan_keycode
 510               	.LVL56:
 511 020a 8111      		cpse r24,__zero_reg__
 107:tmk_core/common/bootmagic.c ****     }
 512               		.loc 1 107 0
 513 020c C061      		ori r28,lo8(16)
 514               	.LVL57:
 515               	.L39:
 109:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 5);
 516               		.loc 1 109 0
 517 020e 82E2      		ldi r24,lo8(34)
 518 0210 0E94 0000 		call bootmagic_scan_keycode
 519               	.LVL58:
 520 0214 8111      		cpse r24,__zero_reg__
 110:tmk_core/common/bootmagic.c ****     }
 521               		.loc 1 110 0
 522 0216 C062      		ori r28,lo8(32)
 523               	.LVL59:
 524               	.L40:
 112:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 6);
 525               		.loc 1 112 0
 526 0218 83E2      		ldi r24,lo8(35)
 527 021a 0E94 0000 		call bootmagic_scan_keycode
 528               	.LVL60:
 529 021e 8111      		cpse r24,__zero_reg__
 113:tmk_core/common/bootmagic.c ****     }
 530               		.loc 1 113 0
 531 0220 C064      		ori r28,lo8(64)
 532               	.LVL61:
 533               	.L41:
 115:tmk_core/common/bootmagic.c ****         default_layer |= (1 << 7);
 534               		.loc 1 115 0
 535 0222 84E2      		ldi r24,lo8(36)
 536 0224 0E94 0000 		call bootmagic_scan_keycode
 537               	.LVL62:
 538 0228 8823      		tst r24
 539 022a 01F0      		breq .L42
 116:tmk_core/common/bootmagic.c ****     }
 540               		.loc 1 116 0
 541 022c C068      		ori r28,lo8(-128)
 542               	.LVL63:
 543 022e 00C0      		rjmp .L43
 544               	.L42:
 118:tmk_core/common/bootmagic.c ****         eeconfig_update_default_layer(default_layer);
 545               		.loc 1 118 0
 546 0230 CC23      		tst r28
 547 0232 01F0      		breq .L44
 548               	.L43:
 119:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 549               		.loc 1 119 0
 550 0234 8C2F      		mov r24,r28
 551 0236 0E94 0000 		call eeconfig_update_default_layer
 552               	.LVL64:
 120:tmk_core/common/bootmagic.c ****     } else {
 553               		.loc 1 120 0
 554 023a 6C2F      		mov r22,r28
 555 023c 00C0      		rjmp .L107
 556               	.L44:
 122:tmk_core/common/bootmagic.c ****         default_layer_set((layer_state_t)default_layer);
 557               		.loc 1 122 0
 558 023e 0E94 0000 		call eeconfig_read_default_layer
 559               	.LVL65:
 123:tmk_core/common/bootmagic.c ****     }
 560               		.loc 1 123 0
 561 0242 682F      		mov r22,r24
 562               	.LVL66:
 563               	.L107:
 564 0244 70E0      		ldi r23,0
 565 0246 80E0      		ldi r24,0
 566 0248 90E0      		ldi r25,0
 567 024a 0E94 0000 		call default_layer_set
 568               	.LVL67:
 126:tmk_core/common/bootmagic.c **** 
 569               		.loc 1 126 0
 570 024e 6091 0000 		lds r22,layer_state
 571 0252 7091 0000 		lds r23,layer_state+1
 572 0256 8091 0000 		lds r24,layer_state+2
 573 025a 9091 0000 		lds r25,layer_state+3
 574 025e 0E94 0000 		call layer_state_set_kb
 575               	.LVL68:
 129:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(true);
 576               		.loc 1 129 0
 577 0262 8FE0      		ldi r24,lo8(15)
 578 0264 0E94 0000 		call bootmagic_scan_keycode
 579               	.LVL69:
 580 0268 8823      		tst r24
 581 026a 01F0      		breq .L46
 130:tmk_core/common/bootmagic.c ****     }
 582               		.loc 1 130 0
 583 026c 81E0      		ldi r24,lo8(1)
 584 026e 0E94 0000 		call eeconfig_update_handedness
 585               	.LVL70:
 586               	.L46:
 132:tmk_core/common/bootmagic.c ****         eeconfig_update_handedness(false);
 587               		.loc 1 132 0
 588 0272 85E1      		ldi r24,lo8(21)
 589 0274 0E94 0000 		call bootmagic_scan_keycode
 590               	.LVL71:
 591 0278 8823      		tst r24
 592 027a 01F0      		breq .L16
 133:tmk_core/common/bootmagic.c ****     }
 593               		.loc 1 133 0
 594 027c 80E0      		ldi r24,0
 595               	/* epilogue start */
 135:tmk_core/common/bootmagic.c **** 
 596               		.loc 1 135 0
 597 027e CF91      		pop r28
 133:tmk_core/common/bootmagic.c ****     }
 598               		.loc 1 133 0
 599 0280 0C94 0000 		jmp eeconfig_update_handedness
 600               	.LVL72:
 601               	.L16:
 602               	/* epilogue start */
 135:tmk_core/common/bootmagic.c **** 
 603               		.loc 1 135 0
 604 0284 CF91      		pop r28
 605 0286 0895      		ret
 606               		.cfi_endproc
 607               	.LFE105:
 609               		.comm	keymap_config,2,1
 610               		.text
 611               	.Letext0:
 612               		.file 3 "/usr/lib/avr/include/stdint.h"
 613               		.file 4 "tmk_core/common/matrix.h"
 614               		.file 5 "tmk_core/common/debug.h"
 615               		.file 6 "tmk_core/common/keyboard.h"
 616               		.file 7 "quantum/keycode_config.h"
 617               		.file 8 "tmk_core/common/action_layer.h"
 618               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 619               		.file 10 "quantum/keymap.h"
 620               		.file 11 "tmk_core/common/eeconfig.h"
 621               		.file 12 "tmk_core/common/bootloader.h"
 622               		.file 13 "tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/ccpIIUun.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccpIIUun.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccpIIUun.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccpIIUun.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccpIIUun.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccpIIUun.s:12     .text.scan_keycode:0000000000000000 scan_keycode
     /tmp/ccpIIUun.s:140    .text.bootmagic_scan_keycode:0000000000000000 bootmagic_scan_keycode
     /tmp/ccpIIUun.s:183    .text.bootmagic:0000000000000000 bootmagic
                            *COM*:0000000000000002 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_update_debug
eeconfig_read_keymap
eeconfig_update_keymap
eeconfig_update_default_layer
eeconfig_read_default_layer
default_layer_set
layer_state
layer_state_set_kb
eeconfig_update_handedness
__do_clear_bss
