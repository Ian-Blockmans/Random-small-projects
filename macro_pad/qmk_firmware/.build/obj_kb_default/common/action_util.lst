   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB102:
  15               		.file 1 "tmk_core/common/action_util.h"
   1:tmk_core/common/action_util.h **** /*
   2:tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.h **** 
   4:tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.h **** (at your option) any later version.
   8:tmk_core/common/action_util.h **** 
   9:tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:tmk_core/common/action_util.h **** 
  14:tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.h **** */
  17:tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:tmk_core/common/action_util.h **** 
  20:tmk_core/common/action_util.h **** #include <stdint.h>
  21:tmk_core/common/action_util.h **** #include "report.h"
  22:tmk_core/common/action_util.h **** 
  23:tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:tmk_core/common/action_util.h **** extern "C" {
  25:tmk_core/common/action_util.h **** #endif
  26:tmk_core/common/action_util.h **** 
  27:tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:tmk_core/common/action_util.h **** 
  29:tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:tmk_core/common/action_util.h **** 
  31:tmk_core/common/action_util.h **** /* key */
  32:tmk_core/common/action_util.h **** inline void add_key(uint8_t key) { add_key_to_report(keyboard_report, key); }
  16               		.loc 1 32 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 32 0
  24 0000 682F      		mov r22,r24
  25 0002 8091 0000 		lds r24,keyboard_report
  26 0006 9091 0000 		lds r25,keyboard_report+1
  27               	.LVL1:
  28 000a 0C94 0000 		jmp add_key_to_report
  29               	.LVL2:
  30               		.cfi_endproc
  31               	.LFE102:
  33               		.section	.text.del_key,"ax",@progbits
  34               	.global	del_key
  36               	del_key:
  37               	.LFB103:
  33:tmk_core/common/action_util.h **** 
  34:tmk_core/common/action_util.h **** inline void del_key(uint8_t key) { del_key_from_report(keyboard_report, key); }
  38               		.loc 1 34 0
  39               		.cfi_startproc
  40               	.LVL3:
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45               		.loc 1 34 0
  46 0000 682F      		mov r22,r24
  47 0002 8091 0000 		lds r24,keyboard_report
  48 0006 9091 0000 		lds r25,keyboard_report+1
  49               	.LVL4:
  50 000a 0C94 0000 		jmp del_key_from_report
  51               	.LVL5:
  52               		.cfi_endproc
  53               	.LFE103:
  55               		.section	.text.clear_keys,"ax",@progbits
  56               	.global	clear_keys
  58               	clear_keys:
  59               	.LFB104:
  35:tmk_core/common/action_util.h **** 
  36:tmk_core/common/action_util.h **** inline void clear_keys(void) { clear_keys_from_report(keyboard_report); }
  60               		.loc 1 36 0
  61               		.cfi_startproc
  62               	/* prologue: function */
  63               	/* frame size = 0 */
  64               	/* stack size = 0 */
  65               	.L__stack_usage = 0
  66               		.loc 1 36 0
  67 0000 8091 0000 		lds r24,keyboard_report
  68 0004 9091 0000 		lds r25,keyboard_report+1
  69 0008 0C94 0000 		jmp clear_keys_from_report
  70               	.LVL6:
  71               		.cfi_endproc
  72               	.LFE104:
  74               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  75               	.global	get_oneshot_locked_mods
  77               	get_oneshot_locked_mods:
  78               	.LFB108:
  79               		.file 2 "tmk_core/common/action_util.c"
   1:tmk_core/common/action_util.c **** /*
   2:tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.c **** 
   4:tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.c **** (at your option) any later version.
   8:tmk_core/common/action_util.c **** 
   9:tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:tmk_core/common/action_util.c **** 
  14:tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.c **** */
  17:tmk_core/common/action_util.c **** #include "host.h"
  18:tmk_core/common/action_util.c **** #include "report.h"
  19:tmk_core/common/action_util.c **** #include "debug.h"
  20:tmk_core/common/action_util.c **** #include "action_util.h"
  21:tmk_core/common/action_util.c **** #include "action_layer.h"
  22:tmk_core/common/action_util.c **** #include "timer.h"
  23:tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:tmk_core/common/action_util.c **** 
  25:tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:tmk_core/common/action_util.c **** 
  27:tmk_core/common/action_util.c **** static uint8_t real_mods  = 0;
  28:tmk_core/common/action_util.c **** static uint8_t weak_mods  = 0;
  29:tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  30:tmk_core/common/action_util.c **** 
  31:tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  32:tmk_core/common/action_util.c **** #    define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  33:tmk_core/common/action_util.c **** #    define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  34:tmk_core/common/action_util.c **** #    define RO_INC(a) RO_ADD(a, 1)
  35:tmk_core/common/action_util.c **** #    define RO_DEC(a) RO_SUB(a, 1)
  36:tmk_core/common/action_util.c **** static int8_t cb_head  = 0;
  37:tmk_core/common/action_util.c **** static int8_t cb_tail  = 0;
  38:tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  39:tmk_core/common/action_util.c **** #endif
  40:tmk_core/common/action_util.c **** 
  41:tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  42:tmk_core/common/action_util.c **** // report_keyboard_t keyboard_report = {};
  43:tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  44:tmk_core/common/action_util.c **** 
  45:tmk_core/common/action_util.c **** extern inline void add_key(uint8_t key);
  46:tmk_core/common/action_util.c **** extern inline void del_key(uint8_t key);
  47:tmk_core/common/action_util.c **** extern inline void clear_keys(void);
  48:tmk_core/common/action_util.c **** 
  49:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  50:tmk_core/common/action_util.c **** static uint8_t oneshot_mods        = 0;
  51:tmk_core/common/action_util.c **** static uint8_t oneshot_locked_mods = 0;
  52:tmk_core/common/action_util.c **** uint8_t        get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  80               		.loc 2 52 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  86               		.loc 2 52 0
  87 0000 8091 0000 		lds r24,oneshot_locked_mods
  88 0004 0895      		ret
  89               		.cfi_endproc
  90               	.LFE108:
  92               		.section	.text.has_oneshot_mods_timed_out,"ax",@progbits
  93               	.global	has_oneshot_mods_timed_out
  95               	has_oneshot_mods_timed_out:
  96               	.LFB111:
  53:tmk_core/common/action_util.c **** void           set_oneshot_locked_mods(uint8_t mods) {
  54:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
  56:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  57:tmk_core/common/action_util.c ****     }
  58:tmk_core/common/action_util.c **** }
  59:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
  60:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
  62:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  63:tmk_core/common/action_util.c ****     }
  64:tmk_core/common/action_util.c **** }
  65:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  66:tmk_core/common/action_util.c **** static uint16_t oneshot_time = 0;
  67:tmk_core/common/action_util.c **** bool            has_oneshot_mods_timed_out(void) { return TIMER_DIFF_16(timer_read(), oneshot_time)
  68:tmk_core/common/action_util.c **** #    else
  69:tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) { return false; }
  97               		.loc 2 69 0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103               		.loc 2 69 0
 104 0000 80E0      		ldi r24,0
 105 0002 0895      		ret
 106               		.cfi_endproc
 107               	.LFE111:
 109               		.section	.text.get_oneshot_layer,"ax",@progbits
 110               	.global	get_oneshot_layer
 112               	get_oneshot_layer:
 113               	.LFB112:
  70:tmk_core/common/action_util.c **** #    endif
  71:tmk_core/common/action_util.c **** #endif
  72:tmk_core/common/action_util.c **** 
  73:tmk_core/common/action_util.c **** /* oneshot layer */
  74:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  75:tmk_core/common/action_util.c **** /** \brief oneshot_layer_data bits
  76:tmk_core/common/action_util.c ****  * LLLL LSSS
  77:tmk_core/common/action_util.c ****  * where:
  78:tmk_core/common/action_util.c ****  *   L => are layer bits
  79:tmk_core/common/action_util.c ****  *   S => oneshot state bits
  80:tmk_core/common/action_util.c ****  */
  81:tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  82:tmk_core/common/action_util.c **** 
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
 114               		.loc 2 83 0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 120               		.loc 2 83 0
 121 0000 8091 0000 		lds r24,oneshot_layer_data
 122 0004 8595      		asr r24
 123 0006 8595      		asr r24
 124 0008 8595      		asr r24
 125 000a 0895      		ret
 126               		.cfi_endproc
 127               	.LFE112:
 129               		.section	.text.get_oneshot_layer_state,"ax",@progbits
 130               	.global	get_oneshot_layer_state
 132               	get_oneshot_layer_state:
 133               	.LFB113:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 134               		.loc 2 84 0
 135               		.cfi_startproc
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 140               		.loc 2 84 0
 141 0000 8091 0000 		lds r24,oneshot_layer_data
 142 0004 8770      		andi r24,lo8(7)
 143 0006 0895      		ret
 144               		.cfi_endproc
 145               	.LFE113:
 147               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 148               	.global	is_oneshot_layer_active
 150               	is_oneshot_layer_active:
 151               	.LFB117:
  85:tmk_core/common/action_util.c **** 
  86:tmk_core/common/action_util.c **** #    ifdef SWAP_HANDS_ENABLE
  87:tmk_core/common/action_util.c **** enum {
  88:tmk_core/common/action_util.c ****     SHO_OFF,
  89:tmk_core/common/action_util.c ****     SHO_ACTIVE,   // Swap hands button was pressed, and we didn't send any swapped keys yet
  90:tmk_core/common/action_util.c ****     SHO_PRESSED,  // Swap hands button is currently pressed
  91:tmk_core/common/action_util.c ****     SHO_USED,     // Swap hands button is still pressed, and we already sent swapped keys
  92:tmk_core/common/action_util.c **** } swap_hands_oneshot = SHO_OFF;
  93:tmk_core/common/action_util.c **** #    endif
  94:tmk_core/common/action_util.c **** 
  95:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  96:tmk_core/common/action_util.c **** static uint16_t oneshot_layer_time = 0;
  97:tmk_core/common/action_util.c **** inline bool     has_oneshot_layer_timed_out() { return TIMER_DIFF_16(timer_read(), oneshot_layer_ti
  98:tmk_core/common/action_util.c **** #        ifdef SWAP_HANDS_ENABLE
  99:tmk_core/common/action_util.c **** static uint16_t oneshot_swaphands_time = 0;
 100:tmk_core/common/action_util.c **** inline bool     has_oneshot_swaphands_timed_out() { return TIMER_DIFF_16(timer_read(), oneshot_swap
 101:tmk_core/common/action_util.c **** #        endif
 102:tmk_core/common/action_util.c **** #    endif
 103:tmk_core/common/action_util.c **** 
 104:tmk_core/common/action_util.c **** #    ifdef SWAP_HANDS_ENABLE
 105:tmk_core/common/action_util.c **** 
 106:tmk_core/common/action_util.c **** void set_oneshot_swaphands(void) {
 107:tmk_core/common/action_util.c ****     swap_hands_oneshot = SHO_PRESSED;
 108:tmk_core/common/action_util.c ****     swap_hands         = true;
 109:tmk_core/common/action_util.c **** #        if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:tmk_core/common/action_util.c ****     oneshot_swaphands_time = timer_read();
 111:tmk_core/common/action_util.c ****     if (oneshot_layer_time != 0) {
 112:tmk_core/common/action_util.c ****         oneshot_layer_time = oneshot_swaphands_time;
 113:tmk_core/common/action_util.c ****     }
 114:tmk_core/common/action_util.c **** #        endif
 115:tmk_core/common/action_util.c **** }
 116:tmk_core/common/action_util.c **** 
 117:tmk_core/common/action_util.c **** void release_oneshot_swaphands(void) {
 118:tmk_core/common/action_util.c ****     if (swap_hands_oneshot == SHO_PRESSED) {
 119:tmk_core/common/action_util.c ****         swap_hands_oneshot = SHO_ACTIVE;
 120:tmk_core/common/action_util.c ****     }
 121:tmk_core/common/action_util.c ****     if (swap_hands_oneshot == SHO_USED) {
 122:tmk_core/common/action_util.c ****         clear_oneshot_swaphands();
 123:tmk_core/common/action_util.c ****     }
 124:tmk_core/common/action_util.c **** }
 125:tmk_core/common/action_util.c **** 
 126:tmk_core/common/action_util.c **** void use_oneshot_swaphands(void) {
 127:tmk_core/common/action_util.c ****     if (swap_hands_oneshot == SHO_PRESSED) {
 128:tmk_core/common/action_util.c ****         swap_hands_oneshot = SHO_USED;
 129:tmk_core/common/action_util.c ****     }
 130:tmk_core/common/action_util.c ****     if (swap_hands_oneshot == SHO_ACTIVE) {
 131:tmk_core/common/action_util.c ****         clear_oneshot_swaphands();
 132:tmk_core/common/action_util.c ****     }
 133:tmk_core/common/action_util.c **** }
 134:tmk_core/common/action_util.c **** 
 135:tmk_core/common/action_util.c **** void clear_oneshot_swaphands(void) {
 136:tmk_core/common/action_util.c ****     swap_hands_oneshot = SHO_OFF;
 137:tmk_core/common/action_util.c ****     swap_hands         = false;
 138:tmk_core/common/action_util.c **** #        if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 139:tmk_core/common/action_util.c ****     oneshot_swaphands_time = 0;
 140:tmk_core/common/action_util.c **** #        endif
 141:tmk_core/common/action_util.c **** }
 142:tmk_core/common/action_util.c **** 
 143:tmk_core/common/action_util.c **** #    endif
 144:tmk_core/common/action_util.c **** 
 145:tmk_core/common/action_util.c **** /** \brief Set oneshot layer
 146:tmk_core/common/action_util.c ****  *
 147:tmk_core/common/action_util.c ****  * FIXME: needs doc
 148:tmk_core/common/action_util.c ****  */
 149:tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state) {
 150:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 151:tmk_core/common/action_util.c ****     layer_on(layer);
 152:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 153:tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
 154:tmk_core/common/action_util.c **** #    endif
 155:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 156:tmk_core/common/action_util.c **** }
 157:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer
 158:tmk_core/common/action_util.c ****  *
 159:tmk_core/common/action_util.c ****  * FIXME: needs doc
 160:tmk_core/common/action_util.c ****  */
 161:tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 162:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 163:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 164:tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 165:tmk_core/common/action_util.c **** #    endif
 166:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 167:tmk_core/common/action_util.c **** }
 168:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer
 169:tmk_core/common/action_util.c ****  *
 170:tmk_core/common/action_util.c ****  * FIXME: needs doc
 171:tmk_core/common/action_util.c ****  */
 172:tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state) {
 173:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 174:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 175:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 176:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 177:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 178:tmk_core/common/action_util.c ****     }
 179:tmk_core/common/action_util.c **** }
 180:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 181:tmk_core/common/action_util.c ****  *
 182:tmk_core/common/action_util.c ****  * FIXME: needs doc
 183:tmk_core/common/action_util.c ****  */
 184:tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void) { return get_oneshot_layer_state(); }
 152               		.loc 2 184 0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 158               		.loc 2 184 0
 159 0000 9091 0000 		lds r25,oneshot_layer_data
 160 0004 9770      		andi r25,lo8(7)
 161 0006 81E0      		ldi r24,lo8(1)
 162 0008 01F4      		brne .L9
 163 000a 80E0      		ldi r24,0
 164               	.L9:
 165 000c 0895      		ret
 166               		.cfi_endproc
 167               	.LFE117:
 169               		.section	.text.get_mods,"ax",@progbits
 170               	.global	get_mods
 172               	get_mods:
 173               	.LFB119:
 185:tmk_core/common/action_util.c **** #endif
 186:tmk_core/common/action_util.c **** 
 187:tmk_core/common/action_util.c **** /** \brief Send keyboard report
 188:tmk_core/common/action_util.c ****  *
 189:tmk_core/common/action_util.c ****  * FIXME: needs doc
 190:tmk_core/common/action_util.c ****  */
 191:tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 192:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 193:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 194:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 195:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 196:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 197:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 198:tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 199:tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 200:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 201:tmk_core/common/action_util.c ****         }
 202:tmk_core/common/action_util.c **** #    endif
 203:tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 204:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 205:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 206:tmk_core/common/action_util.c ****         }
 207:tmk_core/common/action_util.c ****     }
 208:tmk_core/common/action_util.c **** 
 209:tmk_core/common/action_util.c **** #endif
 210:tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 211:tmk_core/common/action_util.c **** }
 212:tmk_core/common/action_util.c **** 
 213:tmk_core/common/action_util.c **** /** \brief Get mods
 214:tmk_core/common/action_util.c ****  *
 215:tmk_core/common/action_util.c ****  * FIXME: needs doc
 216:tmk_core/common/action_util.c ****  */
 217:tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 174               		.loc 2 217 0
 175               		.cfi_startproc
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 0 */
 179               	.L__stack_usage = 0
 180               		.loc 2 217 0
 181 0000 8091 0000 		lds r24,real_mods
 182 0004 0895      		ret
 183               		.cfi_endproc
 184               	.LFE119:
 186               		.section	.text.add_mods,"ax",@progbits
 187               	.global	add_mods
 189               	add_mods:
 190               	.LFB120:
 218:tmk_core/common/action_util.c **** /** \brief add mods
 219:tmk_core/common/action_util.c ****  *
 220:tmk_core/common/action_util.c ****  * FIXME: needs doc
 221:tmk_core/common/action_util.c ****  */
 222:tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 191               		.loc 2 222 0
 192               		.cfi_startproc
 193               	.LVL7:
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 0 */
 197               	.L__stack_usage = 0
 198               		.loc 2 222 0
 199 0000 9091 0000 		lds r25,real_mods
 200 0004 892B      		or r24,r25
 201               	.LVL8:
 202 0006 8093 0000 		sts real_mods,r24
 203 000a 0895      		ret
 204               		.cfi_endproc
 205               	.LFE120:
 207               		.section	.text.del_mods,"ax",@progbits
 208               	.global	del_mods
 210               	del_mods:
 211               	.LFB121:
 223:tmk_core/common/action_util.c **** /** \brief del mods
 224:tmk_core/common/action_util.c ****  *
 225:tmk_core/common/action_util.c ****  * FIXME: needs doc
 226:tmk_core/common/action_util.c ****  */
 227:tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 212               		.loc 2 227 0
 213               		.cfi_startproc
 214               	.LVL9:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 0 */
 218               	.L__stack_usage = 0
 219               		.loc 2 227 0
 220 0000 8095      		com r24
 221               	.LVL10:
 222 0002 9091 0000 		lds r25,real_mods
 223 0006 8923      		and r24,r25
 224               	.LVL11:
 225 0008 8093 0000 		sts real_mods,r24
 226 000c 0895      		ret
 227               		.cfi_endproc
 228               	.LFE121:
 230               		.section	.text.set_mods,"ax",@progbits
 231               	.global	set_mods
 233               	set_mods:
 234               	.LFB122:
 228:tmk_core/common/action_util.c **** /** \brief set mods
 229:tmk_core/common/action_util.c ****  *
 230:tmk_core/common/action_util.c ****  * FIXME: needs doc
 231:tmk_core/common/action_util.c ****  */
 232:tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 235               		.loc 2 232 0
 236               		.cfi_startproc
 237               	.LVL12:
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
 242               		.loc 2 232 0
 243 0000 8093 0000 		sts real_mods,r24
 244 0004 0895      		ret
 245               		.cfi_endproc
 246               	.LFE122:
 248               		.section	.text.clear_mods,"ax",@progbits
 249               	.global	clear_mods
 251               	clear_mods:
 252               	.LFB123:
 233:tmk_core/common/action_util.c **** /** \brief clear mods
 234:tmk_core/common/action_util.c ****  *
 235:tmk_core/common/action_util.c ****  * FIXME: needs doc
 236:tmk_core/common/action_util.c ****  */
 237:tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 253               		.loc 2 237 0
 254               		.cfi_startproc
 255               	/* prologue: function */
 256               	/* frame size = 0 */
 257               	/* stack size = 0 */
 258               	.L__stack_usage = 0
 259               		.loc 2 237 0
 260 0000 1092 0000 		sts real_mods,__zero_reg__
 261 0004 0895      		ret
 262               		.cfi_endproc
 263               	.LFE123:
 265               		.section	.text.get_weak_mods,"ax",@progbits
 266               	.global	get_weak_mods
 268               	get_weak_mods:
 269               	.LFB124:
 238:tmk_core/common/action_util.c **** 
 239:tmk_core/common/action_util.c **** /** \brief get weak mods
 240:tmk_core/common/action_util.c ****  *
 241:tmk_core/common/action_util.c ****  * FIXME: needs doc
 242:tmk_core/common/action_util.c ****  */
 243:tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 270               		.loc 2 243 0
 271               		.cfi_startproc
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274               	/* stack size = 0 */
 275               	.L__stack_usage = 0
 276               		.loc 2 243 0
 277 0000 8091 0000 		lds r24,weak_mods
 278 0004 0895      		ret
 279               		.cfi_endproc
 280               	.LFE124:
 282               		.section	.text.add_weak_mods,"ax",@progbits
 283               	.global	add_weak_mods
 285               	add_weak_mods:
 286               	.LFB125:
 244:tmk_core/common/action_util.c **** /** \brief add weak mods
 245:tmk_core/common/action_util.c ****  *
 246:tmk_core/common/action_util.c ****  * FIXME: needs doc
 247:tmk_core/common/action_util.c ****  */
 248:tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 287               		.loc 2 248 0
 288               		.cfi_startproc
 289               	.LVL13:
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 294               		.loc 2 248 0
 295 0000 9091 0000 		lds r25,weak_mods
 296 0004 892B      		or r24,r25
 297               	.LVL14:
 298 0006 8093 0000 		sts weak_mods,r24
 299 000a 0895      		ret
 300               		.cfi_endproc
 301               	.LFE125:
 303               		.section	.text.del_weak_mods,"ax",@progbits
 304               	.global	del_weak_mods
 306               	del_weak_mods:
 307               	.LFB126:
 249:tmk_core/common/action_util.c **** /** \brief del weak mods
 250:tmk_core/common/action_util.c ****  *
 251:tmk_core/common/action_util.c ****  * FIXME: needs doc
 252:tmk_core/common/action_util.c ****  */
 253:tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 308               		.loc 2 253 0
 309               		.cfi_startproc
 310               	.LVL15:
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 315               		.loc 2 253 0
 316 0000 8095      		com r24
 317               	.LVL16:
 318 0002 9091 0000 		lds r25,weak_mods
 319 0006 8923      		and r24,r25
 320               	.LVL17:
 321 0008 8093 0000 		sts weak_mods,r24
 322 000c 0895      		ret
 323               		.cfi_endproc
 324               	.LFE126:
 326               		.section	.text.set_weak_mods,"ax",@progbits
 327               	.global	set_weak_mods
 329               	set_weak_mods:
 330               	.LFB127:
 254:tmk_core/common/action_util.c **** /** \brief set weak mods
 255:tmk_core/common/action_util.c ****  *
 256:tmk_core/common/action_util.c ****  * FIXME: needs doc
 257:tmk_core/common/action_util.c ****  */
 258:tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 331               		.loc 2 258 0
 332               		.cfi_startproc
 333               	.LVL18:
 334               	/* prologue: function */
 335               	/* frame size = 0 */
 336               	/* stack size = 0 */
 337               	.L__stack_usage = 0
 338               		.loc 2 258 0
 339 0000 8093 0000 		sts weak_mods,r24
 340 0004 0895      		ret
 341               		.cfi_endproc
 342               	.LFE127:
 344               		.section	.text.clear_weak_mods,"ax",@progbits
 345               	.global	clear_weak_mods
 347               	clear_weak_mods:
 348               	.LFB128:
 259:tmk_core/common/action_util.c **** /** \brief clear weak mods
 260:tmk_core/common/action_util.c ****  *
 261:tmk_core/common/action_util.c ****  * FIXME: needs doc
 262:tmk_core/common/action_util.c ****  */
 263:tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 349               		.loc 2 263 0
 350               		.cfi_startproc
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 0 */
 354               	.L__stack_usage = 0
 355               		.loc 2 263 0
 356 0000 1092 0000 		sts weak_mods,__zero_reg__
 357 0004 0895      		ret
 358               		.cfi_endproc
 359               	.LFE128:
 361               		.section	.text.get_macro_mods,"ax",@progbits
 362               	.global	get_macro_mods
 364               	get_macro_mods:
 365               	.LFB129:
 264:tmk_core/common/action_util.c **** 
 265:tmk_core/common/action_util.c **** /* macro modifier */
 266:tmk_core/common/action_util.c **** /** \brief get macro mods
 267:tmk_core/common/action_util.c ****  *
 268:tmk_core/common/action_util.c ****  * FIXME: needs doc
 269:tmk_core/common/action_util.c ****  */
 270:tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 366               		.loc 2 270 0
 367               		.cfi_startproc
 368               	/* prologue: function */
 369               	/* frame size = 0 */
 370               	/* stack size = 0 */
 371               	.L__stack_usage = 0
 372               		.loc 2 270 0
 373 0000 8091 0000 		lds r24,macro_mods
 374 0004 0895      		ret
 375               		.cfi_endproc
 376               	.LFE129:
 378               		.section	.text.add_macro_mods,"ax",@progbits
 379               	.global	add_macro_mods
 381               	add_macro_mods:
 382               	.LFB130:
 271:tmk_core/common/action_util.c **** /** \brief add macro mods
 272:tmk_core/common/action_util.c ****  *
 273:tmk_core/common/action_util.c ****  * FIXME: needs doc
 274:tmk_core/common/action_util.c ****  */
 275:tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 383               		.loc 2 275 0
 384               		.cfi_startproc
 385               	.LVL19:
 386               	/* prologue: function */
 387               	/* frame size = 0 */
 388               	/* stack size = 0 */
 389               	.L__stack_usage = 0
 390               		.loc 2 275 0
 391 0000 9091 0000 		lds r25,macro_mods
 392 0004 892B      		or r24,r25
 393               	.LVL20:
 394 0006 8093 0000 		sts macro_mods,r24
 395 000a 0895      		ret
 396               		.cfi_endproc
 397               	.LFE130:
 399               		.section	.text.del_macro_mods,"ax",@progbits
 400               	.global	del_macro_mods
 402               	del_macro_mods:
 403               	.LFB131:
 276:tmk_core/common/action_util.c **** /** \brief del macro mods
 277:tmk_core/common/action_util.c ****  *
 278:tmk_core/common/action_util.c ****  * FIXME: needs doc
 279:tmk_core/common/action_util.c ****  */
 280:tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 404               		.loc 2 280 0
 405               		.cfi_startproc
 406               	.LVL21:
 407               	/* prologue: function */
 408               	/* frame size = 0 */
 409               	/* stack size = 0 */
 410               	.L__stack_usage = 0
 411               		.loc 2 280 0
 412 0000 8095      		com r24
 413               	.LVL22:
 414 0002 9091 0000 		lds r25,macro_mods
 415 0006 8923      		and r24,r25
 416               	.LVL23:
 417 0008 8093 0000 		sts macro_mods,r24
 418 000c 0895      		ret
 419               		.cfi_endproc
 420               	.LFE131:
 422               		.section	.text.set_macro_mods,"ax",@progbits
 423               	.global	set_macro_mods
 425               	set_macro_mods:
 426               	.LFB132:
 281:tmk_core/common/action_util.c **** /** \brief set macro mods
 282:tmk_core/common/action_util.c ****  *
 283:tmk_core/common/action_util.c ****  * FIXME: needs doc
 284:tmk_core/common/action_util.c ****  */
 285:tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 427               		.loc 2 285 0
 428               		.cfi_startproc
 429               	.LVL24:
 430               	/* prologue: function */
 431               	/* frame size = 0 */
 432               	/* stack size = 0 */
 433               	.L__stack_usage = 0
 434               		.loc 2 285 0
 435 0000 8093 0000 		sts macro_mods,r24
 436 0004 0895      		ret
 437               		.cfi_endproc
 438               	.LFE132:
 440               		.section	.text.clear_macro_mods,"ax",@progbits
 441               	.global	clear_macro_mods
 443               	clear_macro_mods:
 444               	.LFB133:
 286:tmk_core/common/action_util.c **** /** \brief clear macro mods
 287:tmk_core/common/action_util.c ****  *
 288:tmk_core/common/action_util.c ****  * FIXME: needs doc
 289:tmk_core/common/action_util.c ****  */
 290:tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 445               		.loc 2 290 0
 446               		.cfi_startproc
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
 451               		.loc 2 290 0
 452 0000 1092 0000 		sts macro_mods,__zero_reg__
 453 0004 0895      		ret
 454               		.cfi_endproc
 455               	.LFE133:
 457               		.section	.text.get_oneshot_mods,"ax",@progbits
 458               	.global	get_oneshot_mods
 460               	get_oneshot_mods:
 461               	.LFB134:
 291:tmk_core/common/action_util.c **** 
 292:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 293:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 294:tmk_core/common/action_util.c ****  *
 295:tmk_core/common/action_util.c ****  * FIXME: needs doc
 296:tmk_core/common/action_util.c ****  */
 297:tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void) { return oneshot_mods; }
 462               		.loc 2 297 0
 463               		.cfi_startproc
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 468               		.loc 2 297 0
 469 0000 8091 0000 		lds r24,oneshot_mods
 470 0004 0895      		ret
 471               		.cfi_endproc
 472               	.LFE134:
 474               		.section	.text.oneshot_layer_changed_user,"ax",@progbits
 475               		.weak	oneshot_layer_changed_user
 477               	oneshot_layer_changed_user:
 478               	.LFB143:
 298:tmk_core/common/action_util.c **** 
 299:tmk_core/common/action_util.c **** void add_oneshot_mods(uint8_t mods) {
 300:tmk_core/common/action_util.c ****     if ((oneshot_mods & mods) != mods) {
 301:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 302:tmk_core/common/action_util.c ****         oneshot_time = timer_read();
 303:tmk_core/common/action_util.c **** #    endif
 304:tmk_core/common/action_util.c ****         oneshot_mods |= mods;
 305:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 306:tmk_core/common/action_util.c ****     }
 307:tmk_core/common/action_util.c **** }
 308:tmk_core/common/action_util.c **** 
 309:tmk_core/common/action_util.c **** void del_oneshot_mods(uint8_t mods) {
 310:tmk_core/common/action_util.c ****     if (oneshot_mods & mods) {
 311:tmk_core/common/action_util.c ****         oneshot_mods &= ~mods;
 312:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 313:tmk_core/common/action_util.c ****         oneshot_time = oneshot_mods ? timer_read() : 0;
 314:tmk_core/common/action_util.c **** #    endif
 315:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(oneshot_mods);
 316:tmk_core/common/action_util.c ****     }
 317:tmk_core/common/action_util.c **** }
 318:tmk_core/common/action_util.c **** 
 319:tmk_core/common/action_util.c **** /** \brief set oneshot mods
 320:tmk_core/common/action_util.c ****  *
 321:tmk_core/common/action_util.c ****  * FIXME: needs doc
 322:tmk_core/common/action_util.c ****  */
 323:tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods) {
 324:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 325:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 326:tmk_core/common/action_util.c ****         oneshot_time = timer_read();
 327:tmk_core/common/action_util.c **** #    endif
 328:tmk_core/common/action_util.c ****         oneshot_mods = mods;
 329:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 330:tmk_core/common/action_util.c ****     }
 331:tmk_core/common/action_util.c **** }
 332:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 333:tmk_core/common/action_util.c ****  *
 334:tmk_core/common/action_util.c ****  * FIXME: needs doc
 335:tmk_core/common/action_util.c ****  */
 336:tmk_core/common/action_util.c **** void clear_oneshot_mods(void) {
 337:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 338:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 339:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 340:tmk_core/common/action_util.c ****         oneshot_time = 0;
 341:tmk_core/common/action_util.c **** #    endif
 342:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(oneshot_mods);
 343:tmk_core/common/action_util.c ****     }
 344:tmk_core/common/action_util.c **** }
 345:tmk_core/common/action_util.c **** #endif
 346:tmk_core/common/action_util.c **** 
 347:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 348:tmk_core/common/action_util.c ****  *
 349:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 350:tmk_core/common/action_util.c ****  */
 351:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_user(uint8_t mods) {}
 352:tmk_core/common/action_util.c **** 
 353:tmk_core/common/action_util.c **** /** \brief Called when the locked one shot modifiers have been changed.
 354:tmk_core/common/action_util.c ****  *
 355:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 356:tmk_core/common/action_util.c ****  */
 357:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_kb(uint8_t mods) { oneshot_locked_mods_chang
 358:tmk_core/common/action_util.c **** 
 359:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 360:tmk_core/common/action_util.c ****  *
 361:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 362:tmk_core/common/action_util.c ****  */
 363:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_user(uint8_t mods) {}
 364:tmk_core/common/action_util.c **** 
 365:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 366:tmk_core/common/action_util.c ****  *
 367:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 368:tmk_core/common/action_util.c ****  */
 369:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_kb(uint8_t mods) { oneshot_mods_changed_user(mods);
 370:tmk_core/common/action_util.c **** 
 371:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 372:tmk_core/common/action_util.c ****  *
 373:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 374:tmk_core/common/action_util.c ****  */
 375:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_user(uint8_t layer) {}
 479               		.loc 2 375 0
 480               		.cfi_startproc
 481               	.LVL25:
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 484               	/* stack size = 0 */
 485               	.L__stack_usage = 0
 486 0000 0895      		ret
 487               		.cfi_endproc
 488               	.LFE143:
 490               		.set	oneshot_layer_changed_user.localalias.0,oneshot_layer_changed_user
 491               		.section	.text.oneshot_mods_changed_user,"ax",@progbits
 492               		.weak	oneshot_mods_changed_user
 494               	oneshot_mods_changed_user:
 495               	.LFB147:
 496               		.cfi_startproc
 497               	/* prologue: function */
 498               	/* frame size = 0 */
 499               	/* stack size = 0 */
 500               	.L__stack_usage = 0
 501 0000 0C94 0000 		jmp oneshot_layer_changed_user.localalias.0
 502               		.cfi_endproc
 503               	.LFE147:
 505               		.section	.text.oneshot_mods_changed_kb,"ax",@progbits
 506               		.weak	oneshot_mods_changed_kb
 508               	oneshot_mods_changed_kb:
 509               	.LFB142:
 369:tmk_core/common/action_util.c **** 
 510               		.loc 2 369 0
 511               		.cfi_startproc
 512               	.LVL26:
 513               	/* prologue: function */
 514               	/* frame size = 0 */
 515               	/* stack size = 0 */
 516               	.L__stack_usage = 0
 369:tmk_core/common/action_util.c **** 
 517               		.loc 2 369 0
 518 0000 0C94 0000 		jmp oneshot_mods_changed_user
 519               	.LVL27:
 520               		.cfi_endproc
 521               	.LFE142:
 523               		.section	.text.add_oneshot_mods,"ax",@progbits
 524               	.global	add_oneshot_mods
 526               	add_oneshot_mods:
 527               	.LFB135:
 299:tmk_core/common/action_util.c ****     if ((oneshot_mods & mods) != mods) {
 528               		.loc 2 299 0
 529               		.cfi_startproc
 530               	.LVL28:
 531               	/* prologue: function */
 532               	/* frame size = 0 */
 533               	/* stack size = 0 */
 534               	.L__stack_usage = 0
 300:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 535               		.loc 2 300 0
 536 0000 9091 0000 		lds r25,oneshot_mods
 537 0004 292F      		mov r18,r25
 538 0006 2823      		and r18,r24
 539 0008 8217      		cp r24,r18
 540 000a 01F0      		breq .L30
 304:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 541               		.loc 2 304 0
 542 000c 982B      		or r25,r24
 543 000e 9093 0000 		sts oneshot_mods,r25
 305:tmk_core/common/action_util.c ****     }
 544               		.loc 2 305 0
 545 0012 0C94 0000 		jmp oneshot_mods_changed_kb
 546               	.LVL29:
 547               	.L30:
 548 0016 0895      		ret
 549               		.cfi_endproc
 550               	.LFE135:
 552               		.section	.text.del_oneshot_mods,"ax",@progbits
 553               	.global	del_oneshot_mods
 555               	del_oneshot_mods:
 556               	.LFB136:
 309:tmk_core/common/action_util.c ****     if (oneshot_mods & mods) {
 557               		.loc 2 309 0
 558               		.cfi_startproc
 559               	.LVL30:
 560               	/* prologue: function */
 561               	/* frame size = 0 */
 562               	/* stack size = 0 */
 563               	.L__stack_usage = 0
 310:tmk_core/common/action_util.c ****         oneshot_mods &= ~mods;
 564               		.loc 2 310 0
 565 0000 9091 0000 		lds r25,oneshot_mods
 566 0004 292F      		mov r18,r25
 567 0006 2823      		and r18,r24
 568 0008 01F0      		breq .L32
 311:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 569               		.loc 2 311 0
 570 000a 8095      		com r24
 571               	.LVL31:
 572 000c 8923      		and r24,r25
 573               	.LVL32:
 574 000e 8093 0000 		sts oneshot_mods,r24
 315:tmk_core/common/action_util.c ****     }
 575               		.loc 2 315 0
 576 0012 0C94 0000 		jmp oneshot_mods_changed_kb
 577               	.LVL33:
 578               	.L32:
 579 0016 0895      		ret
 580               		.cfi_endproc
 581               	.LFE136:
 583               		.section	.text.set_oneshot_mods,"ax",@progbits
 584               	.global	set_oneshot_mods
 586               	set_oneshot_mods:
 587               	.LFB137:
 323:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 588               		.loc 2 323 0
 589               		.cfi_startproc
 590               	.LVL34:
 591               	/* prologue: function */
 592               	/* frame size = 0 */
 593               	/* stack size = 0 */
 594               	.L__stack_usage = 0
 324:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 595               		.loc 2 324 0
 596 0000 9091 0000 		lds r25,oneshot_mods
 597 0004 9817      		cp r25,r24
 598 0006 01F0      		breq .L34
 328:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 599               		.loc 2 328 0
 600 0008 8093 0000 		sts oneshot_mods,r24
 329:tmk_core/common/action_util.c ****     }
 601               		.loc 2 329 0
 602 000c 0C94 0000 		jmp oneshot_mods_changed_kb
 603               	.LVL35:
 604               	.L34:
 605 0010 0895      		ret
 606               		.cfi_endproc
 607               	.LFE137:
 609               		.section	.text.clear_oneshot_mods,"ax",@progbits
 610               	.global	clear_oneshot_mods
 612               	clear_oneshot_mods:
 613               	.LFB138:
 336:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 614               		.loc 2 336 0
 615               		.cfi_startproc
 616               	/* prologue: function */
 617               	/* frame size = 0 */
 618               	/* stack size = 0 */
 619               	.L__stack_usage = 0
 337:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 620               		.loc 2 337 0
 621 0000 8091 0000 		lds r24,oneshot_mods
 622 0004 8823      		tst r24
 623 0006 01F0      		breq .L36
 338:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 624               		.loc 2 338 0
 625 0008 1092 0000 		sts oneshot_mods,__zero_reg__
 342:tmk_core/common/action_util.c ****     }
 626               		.loc 2 342 0
 627 000c 80E0      		ldi r24,0
 628 000e 0C94 0000 		jmp oneshot_mods_changed_kb
 629               	.LVL36:
 630               	.L36:
 631 0012 0895      		ret
 632               		.cfi_endproc
 633               	.LFE138:
 635               		.section	.text.send_keyboard_report,"ax",@progbits
 636               	.global	send_keyboard_report
 638               	send_keyboard_report:
 639               	.LFB118:
 191:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 640               		.loc 2 191 0
 641               		.cfi_startproc
 642               	/* prologue: function */
 643               	/* frame size = 0 */
 644               	/* stack size = 0 */
 645               	.L__stack_usage = 0
 192:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 646               		.loc 2 192 0
 647 0000 E091 0000 		lds r30,keyboard_report
 648 0004 F091 0000 		lds r31,keyboard_report+1
 649 0008 8091 0000 		lds r24,real_mods
 650 000c 8083      		st Z,r24
 193:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 651               		.loc 2 193 0
 652 000e E091 0000 		lds r30,keyboard_report
 653 0012 F091 0000 		lds r31,keyboard_report+1
 654 0016 9081      		ld r25,Z
 655 0018 8091 0000 		lds r24,weak_mods
 656 001c 892B      		or r24,r25
 657 001e 8083      		st Z,r24
 194:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 658               		.loc 2 194 0
 659 0020 E091 0000 		lds r30,keyboard_report
 660 0024 F091 0000 		lds r31,keyboard_report+1
 661 0028 9081      		ld r25,Z
 662 002a 8091 0000 		lds r24,macro_mods
 663 002e 892B      		or r24,r25
 664 0030 8083      		st Z,r24
 196:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 665               		.loc 2 196 0
 666 0032 8091 0000 		lds r24,oneshot_mods
 667 0036 8823      		tst r24
 668 0038 01F0      		breq .L40
 203:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 669               		.loc 2 203 0
 670 003a E091 0000 		lds r30,keyboard_report
 671 003e F091 0000 		lds r31,keyboard_report+1
 672 0042 9081      		ld r25,Z
 673 0044 892B      		or r24,r25
 674 0046 8083      		st Z,r24
 204:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 675               		.loc 2 204 0
 676 0048 8091 0000 		lds r24,keyboard_report
 677 004c 9091 0000 		lds r25,keyboard_report+1
 678 0050 0E94 0000 		call has_anykey
 679               	.LVL37:
 680 0054 8111      		cpse r24,__zero_reg__
 205:tmk_core/common/action_util.c ****         }
 681               		.loc 2 205 0
 682 0056 0E94 0000 		call clear_oneshot_mods
 683               	.LVL38:
 684               	.L40:
 210:tmk_core/common/action_util.c **** }
 685               		.loc 2 210 0
 686 005a 8091 0000 		lds r24,keyboard_report
 687 005e 9091 0000 		lds r25,keyboard_report+1
 688 0062 0C94 0000 		jmp host_keyboard_send
 689               	.LVL39:
 690               		.cfi_endproc
 691               	.LFE118:
 693               		.section	.text.oneshot_locked_mods_changed_user,"ax",@progbits
 694               		.weak	oneshot_locked_mods_changed_user
 696               	oneshot_locked_mods_changed_user:
 697               	.LFB149:
 698               		.cfi_startproc
 699               	/* prologue: function */
 700               	/* frame size = 0 */
 701               	/* stack size = 0 */
 702               	.L__stack_usage = 0
 703 0000 0C94 0000 		jmp oneshot_layer_changed_user.localalias.0
 704               		.cfi_endproc
 705               	.LFE149:
 707               		.section	.text.oneshot_locked_mods_changed_kb,"ax",@progbits
 708               		.weak	oneshot_locked_mods_changed_kb
 710               	oneshot_locked_mods_changed_kb:
 711               	.LFB140:
 357:tmk_core/common/action_util.c **** 
 712               		.loc 2 357 0
 713               		.cfi_startproc
 714               	.LVL40:
 715               	/* prologue: function */
 716               	/* frame size = 0 */
 717               	/* stack size = 0 */
 718               	.L__stack_usage = 0
 357:tmk_core/common/action_util.c **** 
 719               		.loc 2 357 0
 720 0000 0C94 0000 		jmp oneshot_locked_mods_changed_user
 721               	.LVL41:
 722               		.cfi_endproc
 723               	.LFE140:
 725               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
 726               	.global	set_oneshot_locked_mods
 728               	set_oneshot_locked_mods:
 729               	.LFB109:
  53:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
 730               		.loc 2 53 0
 731               		.cfi_startproc
 732               	.LVL42:
 733               	/* prologue: function */
 734               	/* frame size = 0 */
 735               	/* stack size = 0 */
 736               	.L__stack_usage = 0
  54:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
 737               		.loc 2 54 0
 738 0000 9091 0000 		lds r25,oneshot_locked_mods
 739 0004 9817      		cp r25,r24
 740 0006 01F0      		breq .L47
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 741               		.loc 2 55 0
 742 0008 8093 0000 		sts oneshot_locked_mods,r24
  56:tmk_core/common/action_util.c ****     }
 743               		.loc 2 56 0
 744 000c 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 745               	.LVL43:
 746               	.L47:
 747 0010 0895      		ret
 748               		.cfi_endproc
 749               	.LFE109:
 751               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
 752               	.global	clear_oneshot_locked_mods
 754               	clear_oneshot_locked_mods:
 755               	.LFB110:
  59:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
 756               		.loc 2 59 0
 757               		.cfi_startproc
 758               	/* prologue: function */
 759               	/* frame size = 0 */
 760               	/* stack size = 0 */
 761               	.L__stack_usage = 0
  60:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
 762               		.loc 2 60 0
 763 0000 8091 0000 		lds r24,oneshot_locked_mods
 764 0004 8823      		tst r24
 765 0006 01F0      		breq .L49
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 766               		.loc 2 61 0
 767 0008 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  62:tmk_core/common/action_util.c ****     }
 768               		.loc 2 62 0
 769 000c 80E0      		ldi r24,0
 770 000e 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 771               	.LVL44:
 772               	.L49:
 773 0012 0895      		ret
 774               		.cfi_endproc
 775               	.LFE110:
 777               		.section	.text.oneshot_layer_changed_kb,"ax",@progbits
 778               		.weak	oneshot_layer_changed_kb
 780               	oneshot_layer_changed_kb:
 781               	.LFB144:
 376:tmk_core/common/action_util.c **** 
 377:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 378:tmk_core/common/action_util.c ****  *
 379:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 380:tmk_core/common/action_util.c ****  */
 381:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_kb(uint8_t layer) { oneshot_layer_changed_user(lay
 782               		.loc 2 381 0
 783               		.cfi_startproc
 784               	.LVL45:
 785               	/* prologue: function */
 786               	/* frame size = 0 */
 787               	/* stack size = 0 */
 788               	.L__stack_usage = 0
 789               		.loc 2 381 0
 790 0000 0C94 0000 		jmp oneshot_layer_changed_user
 791               	.LVL46:
 792               		.cfi_endproc
 793               	.LFE144:
 795               		.section	.text.set_oneshot_layer,"ax",@progbits
 796               	.global	set_oneshot_layer
 798               	set_oneshot_layer:
 799               	.LFB114:
 149:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 800               		.loc 2 149 0
 801               		.cfi_startproc
 802               	.LVL47:
 803               	/* prologue: function */
 804               	/* frame size = 0 */
 805               	/* stack size = 0 */
 806               	.L__stack_usage = 0
 150:tmk_core/common/action_util.c ****     layer_on(layer);
 807               		.loc 2 150 0
 808 0000 98E0      		ldi r25,lo8(8)
 809 0002 899F      		mul r24,r25
 810 0004 9001      		movw r18,r0
 811 0006 1124      		clr __zero_reg__
 812 0008 262B      		or r18,r22
 813 000a 2093 0000 		sts oneshot_layer_data,r18
 151:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 814               		.loc 2 151 0
 815 000e 0E94 0000 		call layer_on
 816               	.LVL48:
 155:tmk_core/common/action_util.c **** }
 817               		.loc 2 155 0
 818 0012 8091 0000 		lds r24,oneshot_layer_data
 819 0016 8595      		asr r24
 820 0018 8595      		asr r24
 821 001a 8595      		asr r24
 822 001c 0C94 0000 		jmp oneshot_layer_changed_kb
 823               	.LVL49:
 824               		.cfi_endproc
 825               	.LFE114:
 827               		.section	.text.reset_oneshot_layer,"ax",@progbits
 828               	.global	reset_oneshot_layer
 830               	reset_oneshot_layer:
 831               	.LFB115:
 161:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 832               		.loc 2 161 0
 833               		.cfi_startproc
 834               	/* prologue: function */
 835               	/* frame size = 0 */
 836               	/* stack size = 0 */
 837               	.L__stack_usage = 0
 162:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 838               		.loc 2 162 0
 839 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 166:tmk_core/common/action_util.c **** }
 840               		.loc 2 166 0
 841 0004 80E0      		ldi r24,0
 842 0006 0C94 0000 		jmp oneshot_layer_changed_kb
 843               	.LVL50:
 844               		.cfi_endproc
 845               	.LFE115:
 847               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 848               	.global	clear_oneshot_layer_state
 850               	clear_oneshot_layer_state:
 851               	.LFB116:
 172:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 852               		.loc 2 172 0
 853               		.cfi_startproc
 854               	.LVL51:
 855               	/* prologue: function */
 856               	/* frame size = 0 */
 857               	/* stack size = 0 */
 858               	.L__stack_usage = 0
 173:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 859               		.loc 2 173 0
 860 0000 2091 0000 		lds r18,oneshot_layer_data
 861               	.LVL52:
 174:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 862               		.loc 2 174 0
 863 0004 8095      		com r24
 864               	.LVL53:
 865 0006 8223      		and r24,r18
 866               	.LVL54:
 867 0008 8093 0000 		sts oneshot_layer_data,r24
 175:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 868               		.loc 2 175 0
 869 000c 982F      		mov r25,r24
 870 000e 9770      		andi r25,lo8(7)
 871 0010 01F4      		brne .L54
 175:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 872               		.loc 2 175 0 is_stmt 0 discriminator 1
 873 0012 30E0      		ldi r19,0
 874 0014 482F      		mov r20,r24
 875 0016 082E      		mov __tmp_reg__,r24
 876 0018 000C      		lsl r0
 877 001a 550B      		sbc r21,r21
 878 001c 2417      		cp r18,r20
 879 001e 3507      		cpc r19,r21
 880 0020 01F0      		breq .L54
 176:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 881               		.loc 2 176 0 is_stmt 1
 882 0022 8595      		asr r24
 883 0024 8595      		asr r24
 884 0026 8595      		asr r24
 885 0028 0E94 0000 		call layer_off
 886               	.LVL55:
 177:tmk_core/common/action_util.c ****     }
 887               		.loc 2 177 0
 888 002c 0C94 0000 		jmp reset_oneshot_layer
 889               	.LVL56:
 890               	.L54:
 891 0030 0895      		ret
 892               		.cfi_endproc
 893               	.LFE116:
 895               		.section	.text.has_anymod,"ax",@progbits
 896               	.global	has_anymod
 898               	has_anymod:
 899               	.LFB145:
 382:tmk_core/common/action_util.c **** 
 383:tmk_core/common/action_util.c **** /** \brief inspect keyboard state
 384:tmk_core/common/action_util.c ****  *
 385:tmk_core/common/action_util.c ****  * FIXME: needs doc
 386:tmk_core/common/action_util.c ****  */
 387:tmk_core/common/action_util.c **** uint8_t has_anymod(void) { return bitpop(real_mods); }
 900               		.loc 2 387 0
 901               		.cfi_startproc
 902               	/* prologue: function */
 903               	/* frame size = 0 */
 904               	/* stack size = 0 */
 905               	.L__stack_usage = 0
 906               		.loc 2 387 0
 907 0000 8091 0000 		lds r24,real_mods
 908 0004 0C94 0000 		jmp bitpop
 909               	.LVL57:
 910               		.cfi_endproc
 911               	.LFE145:
 913               		.section	.bss.oneshot_layer_data,"aw",@nobits
 916               	oneshot_layer_data:
 917 0000 00        		.zero	1
 918               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 921               	oneshot_locked_mods:
 922 0000 00        		.zero	1
 923               		.section	.bss.oneshot_mods,"aw",@nobits
 926               	oneshot_mods:
 927 0000 00        		.zero	1
 928               	.global	keyboard_report
 929               		.section	.data.keyboard_report,"aw",@progbits
 932               	keyboard_report:
 933 0000 0000      		.word	__compound_literal.0
 934               		.section	.bss.__compound_literal.0,"aw",@nobits
 937               	__compound_literal.0:
 938 0000 0000 0000 		.zero	32
 938      0000 0000 
 938      0000 0000 
 938      0000 0000 
 938      0000 0000 
 939               		.section	.bss.macro_mods,"aw",@nobits
 942               	macro_mods:
 943 0000 00        		.zero	1
 944               		.section	.bss.weak_mods,"aw",@nobits
 947               	weak_mods:
 948 0000 00        		.zero	1
 949               		.section	.bss.real_mods,"aw",@nobits
 952               	real_mods:
 953 0000 00        		.zero	1
 954               		.text
 955               	.Letext0:
 956               		.file 3 "/usr/lib/avr/include/stdint.h"
 957               		.file 4 "tmk_core/common/report.h"
 958               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 959               		.file 6 "tmk_core/common/host.h"
 960               		.file 7 "tmk_core/common/action_layer.h"
 961               		.file 8 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccJbBGW3.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccJbBGW3.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccJbBGW3.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccJbBGW3.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccJbBGW3.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccJbBGW3.s:13     .text.add_key:0000000000000000 add_key
     /tmp/ccJbBGW3.s:932    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/ccJbBGW3.s:36     .text.del_key:0000000000000000 del_key
     /tmp/ccJbBGW3.s:58     .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccJbBGW3.s:77     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
     /tmp/ccJbBGW3.s:921    .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
     /tmp/ccJbBGW3.s:95     .text.has_oneshot_mods_timed_out:0000000000000000 has_oneshot_mods_timed_out
     /tmp/ccJbBGW3.s:112    .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
     /tmp/ccJbBGW3.s:916    .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
     /tmp/ccJbBGW3.s:132    .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
     /tmp/ccJbBGW3.s:150    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
     /tmp/ccJbBGW3.s:172    .text.get_mods:0000000000000000 get_mods
     /tmp/ccJbBGW3.s:952    .bss.real_mods:0000000000000000 real_mods
     /tmp/ccJbBGW3.s:189    .text.add_mods:0000000000000000 add_mods
     /tmp/ccJbBGW3.s:210    .text.del_mods:0000000000000000 del_mods
     /tmp/ccJbBGW3.s:233    .text.set_mods:0000000000000000 set_mods
     /tmp/ccJbBGW3.s:251    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccJbBGW3.s:268    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccJbBGW3.s:947    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/ccJbBGW3.s:285    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccJbBGW3.s:306    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccJbBGW3.s:329    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccJbBGW3.s:347    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccJbBGW3.s:364    .text.get_macro_mods:0000000000000000 get_macro_mods
     /tmp/ccJbBGW3.s:942    .bss.macro_mods:0000000000000000 macro_mods
     /tmp/ccJbBGW3.s:381    .text.add_macro_mods:0000000000000000 add_macro_mods
     /tmp/ccJbBGW3.s:402    .text.del_macro_mods:0000000000000000 del_macro_mods
     /tmp/ccJbBGW3.s:425    .text.set_macro_mods:0000000000000000 set_macro_mods
     /tmp/ccJbBGW3.s:443    .text.clear_macro_mods:0000000000000000 clear_macro_mods
     /tmp/ccJbBGW3.s:460    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
     /tmp/ccJbBGW3.s:926    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/ccJbBGW3.s:477    .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user
     /tmp/ccJbBGW3.s:477    .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user.localalias.0
     /tmp/ccJbBGW3.s:494    .text.oneshot_mods_changed_user:0000000000000000 oneshot_mods_changed_user
     /tmp/ccJbBGW3.s:508    .text.oneshot_mods_changed_kb:0000000000000000 oneshot_mods_changed_kb
     /tmp/ccJbBGW3.s:526    .text.add_oneshot_mods:0000000000000000 add_oneshot_mods
     /tmp/ccJbBGW3.s:555    .text.del_oneshot_mods:0000000000000000 del_oneshot_mods
     /tmp/ccJbBGW3.s:586    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/ccJbBGW3.s:612    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccJbBGW3.s:638    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccJbBGW3.s:696    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user
     /tmp/ccJbBGW3.s:710    .text.oneshot_locked_mods_changed_kb:0000000000000000 oneshot_locked_mods_changed_kb
     /tmp/ccJbBGW3.s:728    .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
     /tmp/ccJbBGW3.s:754    .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
     /tmp/ccJbBGW3.s:780    .text.oneshot_layer_changed_kb:0000000000000000 oneshot_layer_changed_kb
     /tmp/ccJbBGW3.s:798    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
     /tmp/ccJbBGW3.s:830    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
     /tmp/ccJbBGW3.s:850    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
     /tmp/ccJbBGW3.s:898    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccJbBGW3.s:937    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
add_key_to_report
del_key_from_report
clear_keys_from_report
has_anykey
host_keyboard_send
layer_on
layer_off
bitpop
__do_copy_data
__do_clear_bss
