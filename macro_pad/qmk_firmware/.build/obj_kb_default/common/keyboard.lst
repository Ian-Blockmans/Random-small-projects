   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.disable_jtag,"ax",@progbits
  11               	.global	disable_jtag
  13               	disable_jtag:
  14               	.LFB105:
  15               		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "action_layer.h"
  33:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  34:tmk_core/common/keyboard.c **** #    include "backlight.h"
  35:tmk_core/common/keyboard.c **** #endif
  36:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  37:tmk_core/common/keyboard.c **** #    include "bootmagic.h"
  38:tmk_core/common/keyboard.c **** #else
  39:tmk_core/common/keyboard.c **** #    include "magic.h"
  40:tmk_core/common/keyboard.c **** #endif
  41:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  42:tmk_core/common/keyboard.c **** #    include "mousekey.h"
  43:tmk_core/common/keyboard.c **** #endif
  44:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  45:tmk_core/common/keyboard.c **** #    include "ps2_mouse.h"
  46:tmk_core/common/keyboard.c **** #endif
  47:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  48:tmk_core/common/keyboard.c **** #    include "serial_mouse.h"
  49:tmk_core/common/keyboard.c **** #endif
  50:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  51:tmk_core/common/keyboard.c **** #    include "adb.h"
  52:tmk_core/common/keyboard.c **** #endif
  53:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  54:tmk_core/common/keyboard.c **** #    include "rgblight.h"
  55:tmk_core/common/keyboard.c **** #endif
  56:tmk_core/common/keyboard.c **** #ifdef ENCODER_ENABLE
  57:tmk_core/common/keyboard.c **** #    include "encoder.h"
  58:tmk_core/common/keyboard.c **** #endif
  59:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  60:tmk_core/common/keyboard.c **** #    include "process_steno.h"
  61:tmk_core/common/keyboard.c **** #endif
  62:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  63:tmk_core/common/keyboard.c **** #    include "fauxclicky.h"
  64:tmk_core/common/keyboard.c **** #endif
  65:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  66:tmk_core/common/keyboard.c **** #    include "serial_link/system/serial_link.h"
  67:tmk_core/common/keyboard.c **** #endif
  68:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  69:tmk_core/common/keyboard.c **** #    include "visualizer/visualizer.h"
  70:tmk_core/common/keyboard.c **** #endif
  71:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  72:tmk_core/common/keyboard.c **** #    include "pointing_device.h"
  73:tmk_core/common/keyboard.c **** #endif
  74:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  75:tmk_core/common/keyboard.c **** #    include "process_midi.h"
  76:tmk_core/common/keyboard.c **** #endif
  77:tmk_core/common/keyboard.c **** #ifdef JOYSTICK_ENABLE
  78:tmk_core/common/keyboard.c **** #    include "process_joystick.h"
  79:tmk_core/common/keyboard.c **** #endif
  80:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  81:tmk_core/common/keyboard.c **** #    include "hd44780.h"
  82:tmk_core/common/keyboard.c **** #endif
  83:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
  84:tmk_core/common/keyboard.c **** #    include "qwiic.h"
  85:tmk_core/common/keyboard.c **** #endif
  86:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
  87:tmk_core/common/keyboard.c **** #    include "oled_driver.h"
  88:tmk_core/common/keyboard.c **** #endif
  89:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  90:tmk_core/common/keyboard.c **** #    include "velocikey.h"
  91:tmk_core/common/keyboard.c **** #endif
  92:tmk_core/common/keyboard.c **** #ifdef VIA_ENABLE
  93:tmk_core/common/keyboard.c **** #    include "via.h"
  94:tmk_core/common/keyboard.c **** #endif
  95:tmk_core/common/keyboard.c **** #ifdef DIP_SWITCH_ENABLE
  96:tmk_core/common/keyboard.c **** #    include "dip_switch.h"
  97:tmk_core/common/keyboard.c **** #endif
  98:tmk_core/common/keyboard.c **** 
  99:tmk_core/common/keyboard.c **** // Only enable this if console is enabled to print to
 100:tmk_core/common/keyboard.c **** #if defined(DEBUG_MATRIX_SCAN_RATE) && defined(CONSOLE_ENABLE)
 101:tmk_core/common/keyboard.c **** static uint32_t matrix_timer      = 0;
 102:tmk_core/common/keyboard.c **** static uint32_t matrix_scan_count = 0;
 103:tmk_core/common/keyboard.c **** 
 104:tmk_core/common/keyboard.c **** void matrix_scan_perf_task(void) {
 105:tmk_core/common/keyboard.c ****     matrix_scan_count++;
 106:tmk_core/common/keyboard.c **** 
 107:tmk_core/common/keyboard.c ****     uint32_t timer_now = timer_read32();
 108:tmk_core/common/keyboard.c ****     if (TIMER_DIFF_32(timer_now, matrix_timer) > 1000) {
 109:tmk_core/common/keyboard.c ****         dprintf("matrix scan frequency: %d\n", matrix_scan_count);
 110:tmk_core/common/keyboard.c **** 
 111:tmk_core/common/keyboard.c ****         matrix_timer      = timer_now;
 112:tmk_core/common/keyboard.c ****         matrix_scan_count = 0;
 113:tmk_core/common/keyboard.c ****     }
 114:tmk_core/common/keyboard.c **** }
 115:tmk_core/common/keyboard.c **** #else
 116:tmk_core/common/keyboard.c **** #    define matrix_scan_perf_task()
 117:tmk_core/common/keyboard.c **** #endif
 118:tmk_core/common/keyboard.c **** 
 119:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 120:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 121:tmk_core/common/keyboard.c **** static matrix_row_t   get_real_keys(uint8_t row, matrix_row_t rowdata) {
 122:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
 123:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 124:tmk_core/common/keyboard.c ****         // read each key in the row data and check if the keymap defines it as a real key
 125:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1 << col))) {
 126:tmk_core/common/keyboard.c ****             // this creates new row data, if a key is defined in the keymap, it will be set here
 127:tmk_core/common/keyboard.c ****             out |= 1 << col;
 128:tmk_core/common/keyboard.c ****         }
 129:tmk_core/common/keyboard.c ****     }
 130:tmk_core/common/keyboard.c ****     return out;
 131:tmk_core/common/keyboard.c **** }
 132:tmk_core/common/keyboard.c **** 
 133:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata) {
 134:tmk_core/common/keyboard.c ****     rowdata &= rowdata - 1;  // if there are less than two bits (keys) set, rowdata will become zer
 135:tmk_core/common/keyboard.c ****     return rowdata;
 136:tmk_core/common/keyboard.c **** }
 137:tmk_core/common/keyboard.c **** 
 138:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata) {
 139:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 140:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 141:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 142:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 143:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 144:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0) {
 145:tmk_core/common/keyboard.c ****         return false;
 146:tmk_core/common/keyboard.c ****     }
 147:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 148:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 149:tmk_core/common/keyboard.c ****     so they are filtered out.
 150:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 151:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 152:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 153:tmk_core/common/keyboard.c ****     */
 154:tmk_core/common/keyboard.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 155:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)) {
 156:tmk_core/common/keyboard.c ****             return true;
 157:tmk_core/common/keyboard.c ****         }
 158:tmk_core/common/keyboard.c ****     }
 159:tmk_core/common/keyboard.c ****     return false;
 160:tmk_core/common/keyboard.c **** }
 161:tmk_core/common/keyboard.c **** 
 162:tmk_core/common/keyboard.c **** #endif
 163:tmk_core/common/keyboard.c **** 
 164:tmk_core/common/keyboard.c **** void disable_jtag(void) {
  16               		.loc 1 164 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 165:tmk_core/common/keyboard.c **** // To use PF4-7 (PC2-5 on ATmega32A), disable JTAG by writing JTD bit twice within four cycles.
 166:tmk_core/common/keyboard.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
 167:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  22               		.loc 1 167 0
  23 0000 85B7      		in r24,0x35
  24 0002 8068      		ori r24,lo8(-128)
  25 0004 85BF      		out 0x35,r24
 168:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  26               		.loc 1 168 0
  27 0006 85B7      		in r24,0x35
  28 0008 8068      		ori r24,lo8(-128)
  29 000a 85BF      		out 0x35,r24
  30 000c 0895      		ret
  31               		.cfi_endproc
  32               	.LFE105:
  34               		.section	.text.is_keyboard_master,"ax",@progbits
  35               		.weak	is_keyboard_master
  37               	is_keyboard_master:
  38               	.LFB129:
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
  44 0000 81E0      		ldi r24,lo8(1)
  45 0002 0895      		ret
  46               		.cfi_endproc
  47               	.LFE129:
  49               		.section	.text.is_keyboard_left,"ax",@progbits
  50               		.weak	is_keyboard_left
  52               	is_keyboard_left:
  53               	.LFB113:
 169:tmk_core/common/keyboard.c **** #elif defined(__AVR_ATmega32A__)
 170:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 171:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 172:tmk_core/common/keyboard.c **** #endif
 173:tmk_core/common/keyboard.c **** }
 174:tmk_core/common/keyboard.c **** 
 175:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 176:tmk_core/common/keyboard.c ****  *
 177:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 178:tmk_core/common/keyboard.c ****  */
 179:tmk_core/common/keyboard.c **** __attribute__((weak)) void matrix_setup(void) {}
 180:tmk_core/common/keyboard.c **** 
 181:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_user
 182:tmk_core/common/keyboard.c ****  *
 183:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 184:tmk_core/common/keyboard.c ****  */
 185:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_user(void) {}
 186:tmk_core/common/keyboard.c **** 
 187:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_kb
 188:tmk_core/common/keyboard.c ****  *
 189:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 190:tmk_core/common/keyboard.c ****  */
 191:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_kb(void) { keyboard_pre_init_user(); }
 192:tmk_core/common/keyboard.c **** 
 193:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_user
 194:tmk_core/common/keyboard.c ****  *
 195:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 196:tmk_core/common/keyboard.c ****  */
 197:tmk_core/common/keyboard.c **** 
 198:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_user() {}
 199:tmk_core/common/keyboard.c **** 
 200:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_kb
 201:tmk_core/common/keyboard.c ****  *
 202:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 203:tmk_core/common/keyboard.c ****  */
 204:tmk_core/common/keyboard.c **** 
 205:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_kb(void) { keyboard_post_init_user(); }
 206:tmk_core/common/keyboard.c **** 
 207:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 208:tmk_core/common/keyboard.c ****  *
 209:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 210:tmk_core/common/keyboard.c ****  */
 211:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
 212:tmk_core/common/keyboard.c **** #ifndef NO_JTAG_DISABLE
 213:tmk_core/common/keyboard.c ****     disable_jtag();
 214:tmk_core/common/keyboard.c **** #endif
 215:tmk_core/common/keyboard.c ****     matrix_setup();
 216:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 217:tmk_core/common/keyboard.c **** }
 218:tmk_core/common/keyboard.c **** 
 219:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 220:tmk_core/common/keyboard.c ****  *
 221:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 222:tmk_core/common/keyboard.c ****  */
 223:tmk_core/common/keyboard.c **** __attribute__((weak)) bool is_keyboard_master(void) { return true; }
 224:tmk_core/common/keyboard.c **** 
 225:tmk_core/common/keyboard.c **** /** \brief is_keyboard_left
 226:tmk_core/common/keyboard.c ****  *
 227:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 228:tmk_core/common/keyboard.c ****  */
 229:tmk_core/common/keyboard.c **** __attribute__((weak)) bool is_keyboard_left(void) { return true; }
  54               		.loc 1 229 0
  55               		.cfi_startproc
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  60               		.loc 1 229 0
  61 0000 81E0      		ldi r24,lo8(1)
  62 0002 0895      		ret
  63               		.cfi_endproc
  64               	.LFE113:
  66               		.section	.text.should_process_keypress,"ax",@progbits
  67               		.weak	should_process_keypress
  69               	should_process_keypress:
  70               	.LFB114:
 230:tmk_core/common/keyboard.c **** 
 231:tmk_core/common/keyboard.c **** /** \brief should_process_keypress
 232:tmk_core/common/keyboard.c ****  *
 233:tmk_core/common/keyboard.c ****  * Override this function if you have a condition where keypresses processing should change:
 234:tmk_core/common/keyboard.c ****  *   - splits where the slave side needs to process for rgb/oled functionality
 235:tmk_core/common/keyboard.c ****  */
 236:tmk_core/common/keyboard.c **** __attribute__((weak)) bool should_process_keypress(void) { return is_keyboard_master(); }
  71               		.loc 1 236 0
  72               		.cfi_startproc
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 0 */
  76               	.L__stack_usage = 0
  77               		.loc 1 236 0
  78 0000 0C94 0000 		jmp is_keyboard_master
  79               	.LVL0:
  80               		.cfi_endproc
  81               	.LFE114:
  83               		.section	.text.housekeeping_task_user,"ax",@progbits
  84               		.weak	housekeeping_task_user
  86               	housekeeping_task_user:
  87               	.LFB116:
 237:tmk_core/common/keyboard.c **** 
 238:tmk_core/common/keyboard.c **** /** \brief housekeeping_task_kb
 239:tmk_core/common/keyboard.c ****  *
 240:tmk_core/common/keyboard.c ****  * Override this function if you have a need to execute code for every keyboard main loop iteration
 241:tmk_core/common/keyboard.c ****  * This is specific to keyboard-level functionality.
 242:tmk_core/common/keyboard.c ****  */
 243:tmk_core/common/keyboard.c **** __attribute__((weak)) void housekeeping_task_kb(void) {}
 244:tmk_core/common/keyboard.c **** 
 245:tmk_core/common/keyboard.c **** /** \brief housekeeping_task_user
 246:tmk_core/common/keyboard.c ****  *
 247:tmk_core/common/keyboard.c ****  * Override this function if you have a need to execute code for every keyboard main loop iteration
 248:tmk_core/common/keyboard.c ****  * This is specific to user/keymap-level functionality.
 249:tmk_core/common/keyboard.c ****  */
 250:tmk_core/common/keyboard.c **** __attribute__((weak)) void housekeeping_task_user(void) {}
  88               		.loc 1 250 0
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  94 0000 0895      		ret
  95               		.cfi_endproc
  96               	.LFE116:
  98               		.set	housekeeping_task_user.localalias.0,housekeeping_task_user
  99               		.section	.text.housekeeping_task_kb,"ax",@progbits
 100               		.weak	housekeeping_task_kb
 102               	housekeeping_task_kb:
 103               	.LFB121:
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
 109 0000 0C94 0000 		jmp housekeeping_task_user.localalias.0
 110               		.cfi_endproc
 111               	.LFE121:
 113               		.section	.text.keyboard_post_init_user,"ax",@progbits
 114               		.weak	keyboard_post_init_user
 116               	keyboard_post_init_user:
 117               	.LFB123:
 118               		.cfi_startproc
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 123 0000 0C94 0000 		jmp housekeeping_task_user.localalias.0
 124               		.cfi_endproc
 125               	.LFE123:
 127               		.section	.text.keyboard_post_init_kb,"ax",@progbits
 128               		.weak	keyboard_post_init_kb
 130               	keyboard_post_init_kb:
 131               	.LFB110:
 205:tmk_core/common/keyboard.c **** 
 132               		.loc 1 205 0
 133               		.cfi_startproc
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
 205:tmk_core/common/keyboard.c **** 
 138               		.loc 1 205 0
 139 0000 0C94 0000 		jmp keyboard_post_init_user
 140               	.LVL1:
 141               		.cfi_endproc
 142               	.LFE110:
 144               		.section	.text.keyboard_pre_init_user,"ax",@progbits
 145               		.weak	keyboard_pre_init_user
 147               	keyboard_pre_init_user:
 148               	.LFB125:
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
 154 0000 0C94 0000 		jmp housekeeping_task_user.localalias.0
 155               		.cfi_endproc
 156               	.LFE125:
 158               		.section	.text.keyboard_pre_init_kb,"ax",@progbits
 159               		.weak	keyboard_pre_init_kb
 161               	keyboard_pre_init_kb:
 162               	.LFB108:
 191:tmk_core/common/keyboard.c **** 
 163               		.loc 1 191 0
 164               		.cfi_startproc
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 0 */
 168               	.L__stack_usage = 0
 191:tmk_core/common/keyboard.c **** 
 169               		.loc 1 191 0
 170 0000 0C94 0000 		jmp keyboard_pre_init_user
 171               	.LVL2:
 172               		.cfi_endproc
 173               	.LFE108:
 175               		.section	.text.matrix_setup,"ax",@progbits
 176               		.weak	matrix_setup
 178               	matrix_setup:
 179               	.LFB127:
 180               		.cfi_startproc
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
 185 0000 0C94 0000 		jmp housekeeping_task_user.localalias.0
 186               		.cfi_endproc
 187               	.LFE127:
 189               		.section	.text.keyboard_setup,"ax",@progbits
 190               	.global	keyboard_setup
 192               	keyboard_setup:
 193               	.LFB111:
 211:tmk_core/common/keyboard.c **** #ifndef NO_JTAG_DISABLE
 194               		.loc 1 211 0
 195               		.cfi_startproc
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
 213:tmk_core/common/keyboard.c **** #endif
 200               		.loc 1 213 0
 201 0000 0E94 0000 		call disable_jtag
 202               	.LVL3:
 215:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 203               		.loc 1 215 0
 204 0004 0E94 0000 		call matrix_setup
 205               	.LVL4:
 216:tmk_core/common/keyboard.c **** }
 206               		.loc 1 216 0
 207 0008 0C94 0000 		jmp keyboard_pre_init_kb
 208               	.LVL5:
 209               		.cfi_endproc
 210               	.LFE111:
 212               		.section	.text.keyboard_init,"ax",@progbits
 213               	.global	keyboard_init
 215               	keyboard_init:
 216               	.LFB117:
 251:tmk_core/common/keyboard.c **** 
 252:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 253:tmk_core/common/keyboard.c ****  *
 254:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 255:tmk_core/common/keyboard.c ****  */
 256:tmk_core/common/keyboard.c **** void keyboard_init(void) {
 217               		.loc 1 256 0
 218               		.cfi_startproc
 219               	/* prologue: function */
 220               	/* frame size = 0 */
 221               	/* stack size = 0 */
 222               	.L__stack_usage = 0
 257:tmk_core/common/keyboard.c ****     timer_init();
 223               		.loc 1 257 0
 224 0000 0E94 0000 		call timer_init
 225               	.LVL6:
 258:tmk_core/common/keyboard.c ****     matrix_init();
 226               		.loc 1 258 0
 227 0004 0E94 0000 		call matrix_init
 228               	.LVL7:
 259:tmk_core/common/keyboard.c **** #ifdef VIA_ENABLE
 260:tmk_core/common/keyboard.c ****     via_init();
 261:tmk_core/common/keyboard.c **** #endif
 262:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 263:tmk_core/common/keyboard.c ****     qwiic_init();
 264:tmk_core/common/keyboard.c **** #endif
 265:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 266:tmk_core/common/keyboard.c ****     oled_init(OLED_ROTATION_0);
 267:tmk_core/common/keyboard.c **** #endif
 268:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 269:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 270:tmk_core/common/keyboard.c **** #endif
 271:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 272:tmk_core/common/keyboard.c ****     serial_mouse_init();
 273:tmk_core/common/keyboard.c **** #endif
 274:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 275:tmk_core/common/keyboard.c ****     adb_mouse_init();
 276:tmk_core/common/keyboard.c **** #endif
 277:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 278:tmk_core/common/keyboard.c ****     bootmagic();
 229               		.loc 1 278 0
 230 0008 0E94 0000 		call bootmagic
 231               	.LVL8:
 279:tmk_core/common/keyboard.c **** #else
 280:tmk_core/common/keyboard.c ****     magic();
 281:tmk_core/common/keyboard.c **** #endif
 282:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 283:tmk_core/common/keyboard.c ****     backlight_init();
 232               		.loc 1 283 0
 233 000c 0E94 0000 		call backlight_init
 234               	.LVL9:
 284:tmk_core/common/keyboard.c **** #endif
 285:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 286:tmk_core/common/keyboard.c ****     rgblight_init();
 287:tmk_core/common/keyboard.c **** #endif
 288:tmk_core/common/keyboard.c **** #ifdef ENCODER_ENABLE
 289:tmk_core/common/keyboard.c ****     encoder_init();
 290:tmk_core/common/keyboard.c **** #endif
 291:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 292:tmk_core/common/keyboard.c ****     steno_init();
 293:tmk_core/common/keyboard.c **** #endif
 294:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 295:tmk_core/common/keyboard.c ****     fauxclicky_init();
 296:tmk_core/common/keyboard.c **** #endif
 297:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 298:tmk_core/common/keyboard.c ****     pointing_device_init();
 299:tmk_core/common/keyboard.c **** #endif
 300:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 301:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 302:tmk_core/common/keyboard.c ****     eeconfig_update_keymap(keymap_config.raw);
 303:tmk_core/common/keyboard.c **** #endif
 304:tmk_core/common/keyboard.c **** #ifdef DIP_SWITCH_ENABLE
 305:tmk_core/common/keyboard.c ****     dip_switch_init();
 306:tmk_core/common/keyboard.c **** #endif
 307:tmk_core/common/keyboard.c **** 
 308:tmk_core/common/keyboard.c **** #if defined(DEBUG_MATRIX_SCAN_RATE) && defined(CONSOLE_ENABLE)
 309:tmk_core/common/keyboard.c ****     debug_enable = true;
 310:tmk_core/common/keyboard.c **** #endif
 311:tmk_core/common/keyboard.c **** 
 312:tmk_core/common/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 235               		.loc 1 312 0
 236 0010 0C94 0000 		jmp keyboard_post_init_kb
 237               	.LVL10:
 238               		.cfi_endproc
 239               	.LFE117:
 241               		.section	.text.keyboard_task,"ax",@progbits
 242               	.global	keyboard_task
 244               	keyboard_task:
 245               	.LFB118:
 313:tmk_core/common/keyboard.c **** }
 314:tmk_core/common/keyboard.c **** 
 315:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 316:tmk_core/common/keyboard.c ****  *
 317:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 318:tmk_core/common/keyboard.c ****  *
 319:tmk_core/common/keyboard.c ****  * * scan matrix
 320:tmk_core/common/keyboard.c ****  * * handle mouse movements
 321:tmk_core/common/keyboard.c ****  * * run visualizer code
 322:tmk_core/common/keyboard.c ****  * * handle midi commands
 323:tmk_core/common/keyboard.c ****  * * light LEDs
 324:tmk_core/common/keyboard.c ****  *
 325:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 326:tmk_core/common/keyboard.c ****  */
 327:tmk_core/common/keyboard.c **** void keyboard_task(void) {
 246               		.loc 1 327 0
 247               		.cfi_startproc
 248 0000 AF92      		push r10
 249               	.LCFI0:
 250               		.cfi_def_cfa_offset 3
 251               		.cfi_offset 10, -2
 252 0002 BF92      		push r11
 253               	.LCFI1:
 254               		.cfi_def_cfa_offset 4
 255               		.cfi_offset 11, -3
 256 0004 CF92      		push r12
 257               	.LCFI2:
 258               		.cfi_def_cfa_offset 5
 259               		.cfi_offset 12, -4
 260 0006 DF92      		push r13
 261               	.LCFI3:
 262               		.cfi_def_cfa_offset 6
 263               		.cfi_offset 13, -5
 264 0008 EF92      		push r14
 265               	.LCFI4:
 266               		.cfi_def_cfa_offset 7
 267               		.cfi_offset 14, -6
 268 000a FF92      		push r15
 269               	.LCFI5:
 270               		.cfi_def_cfa_offset 8
 271               		.cfi_offset 15, -7
 272 000c 0F93      		push r16
 273               	.LCFI6:
 274               		.cfi_def_cfa_offset 9
 275               		.cfi_offset 16, -8
 276 000e 1F93      		push r17
 277               	.LCFI7:
 278               		.cfi_def_cfa_offset 10
 279               		.cfi_offset 17, -9
 280 0010 CF93      		push r28
 281               	.LCFI8:
 282               		.cfi_def_cfa_offset 11
 283               		.cfi_offset 28, -10
 284 0012 DF93      		push r29
 285               	.LCFI9:
 286               		.cfi_def_cfa_offset 12
 287               		.cfi_offset 29, -11
 288 0014 CDB7      		in r28,__SP_L__
 289 0016 DEB7      		in r29,__SP_H__
 290               	.LCFI10:
 291               		.cfi_def_cfa_register 28
 292 0018 2A97      		sbiw r28,10
 293               	.LCFI11:
 294               		.cfi_def_cfa_offset 22
 295 001a 0FB6      		in __tmp_reg__,__SREG__
 296 001c F894      		cli
 297 001e DEBF      		out __SP_H__,r29
 298 0020 0FBE      		out __SREG__,__tmp_reg__
 299 0022 CDBF      		out __SP_L__,r28
 300               	/* prologue: function */
 301               	/* frame size = 10 */
 302               	/* stack size = 20 */
 303               	.L__stack_usage = 20
 304               	.LVL11:
 328:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 329:tmk_core/common/keyboard.c ****     static uint8_t      led_status    = 0;
 330:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_row    = 0;
 331:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_change = 0;
 332:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 333:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 334:tmk_core/common/keyboard.c **** #endif
 335:tmk_core/common/keyboard.c **** 
 336:tmk_core/common/keyboard.c ****     housekeeping_task_kb();
 305               		.loc 1 336 0
 306 0024 0E94 0000 		call housekeeping_task_kb
 307               	.LVL12:
 337:tmk_core/common/keyboard.c ****     housekeeping_task_user();
 308               		.loc 1 337 0
 309 0028 0E94 0000 		call housekeeping_task_user
 310               	.LVL13:
 338:tmk_core/common/keyboard.c **** 
 339:tmk_core/common/keyboard.c **** #if defined(OLED_DRIVER_ENABLE) && !defined(OLED_DISABLE_TIMEOUT)
 340:tmk_core/common/keyboard.c ****     uint8_t ret = matrix_scan();
 341:tmk_core/common/keyboard.c **** #else
 342:tmk_core/common/keyboard.c ****     matrix_scan();
 311               		.loc 1 342 0
 312 002c 0E94 0000 		call matrix_scan
 313               	.LVL14:
 343:tmk_core/common/keyboard.c **** #endif
 344:tmk_core/common/keyboard.c **** 
 345:tmk_core/common/keyboard.c ****     if (should_process_keypress()) {
 314               		.loc 1 345 0
 315 0030 0E94 0000 		call should_process_keypress
 316               	.LVL15:
 317 0034 8111      		cpse r24,__zero_reg__
 318 0036 00C0      		rjmp .L15
 319               	.LVL16:
 320               	.L19:
 346:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 347:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 348:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 349:tmk_core/common/keyboard.c ****             if (matrix_change) {
 350:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 351:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 352:tmk_core/common/keyboard.c ****                     continue;
 353:tmk_core/common/keyboard.c ****                 }
 354:tmk_core/common/keyboard.c **** #endif
 355:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 356:tmk_core/common/keyboard.c ****                 matrix_row_t col_mask = 1;
 357:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
 358:tmk_core/common/keyboard.c ****                     if (matrix_change & col_mask) {
 359:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 360:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 361:tmk_core/common/keyboard.c ****                         });
 362:tmk_core/common/keyboard.c ****                         // record a processed key
 363:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= col_mask;
 364:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 365:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 366:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 367:tmk_core/common/keyboard.c **** #endif
 368:tmk_core/common/keyboard.c ****                             // process a key per task call
 369:tmk_core/common/keyboard.c ****                             goto MATRIX_LOOP_END;
 370:tmk_core/common/keyboard.c ****                     }
 371:tmk_core/common/keyboard.c ****                 }
 372:tmk_core/common/keyboard.c ****             }
 373:tmk_core/common/keyboard.c ****         }
 374:tmk_core/common/keyboard.c ****     }
 375:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 376:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 377:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 378:tmk_core/common/keyboard.c ****     if (!keys_processed)
 379:tmk_core/common/keyboard.c **** #endif
 380:tmk_core/common/keyboard.c ****         action_exec(TICK);
 321               		.loc 1 380 0
 322 0038 8FEF      		ldi r24,lo8(-1)
 323 003a 8983      		std Y+1,r24
 324 003c 8A83      		std Y+2,r24
 325 003e 1B82      		std Y+3,__zero_reg__
 326 0040 0E94 0000 		call timer_read
 327               	.LVL17:
 328 0044 8160      		ori r24,1
 329 0046 782F      		mov r23,r24
 330 0048 9D83      		std Y+5,r25
 331 004a 8C83      		std Y+4,r24
 332 004c 4981      		ldd r20,Y+1
 333 004e 5A81      		ldd r21,Y+2
 334 0050 6B81      		ldd r22,Y+3
 335 0052 8D81      		ldd r24,Y+5
 336 0054 0E94 0000 		call action_exec
 337               	.LVL18:
 338 0058 00C0      		rjmp .L16
 339               	.LVL19:
 340               	.L15:
 341 005a 80E0      		ldi r24,lo8(matrix_prev.5779)
 342 005c A82E      		mov r10,r24
 343 005e 80E0      		ldi r24,hi8(matrix_prev.5779)
 344 0060 B82E      		mov r11,r24
 345:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 345               		.loc 1 345 0
 346 0062 00E0      		ldi r16,0
 347 0064 10E0      		ldi r17,0
 348               	.LVL20:
 349               	.L18:
 350 0066 C02E      		mov r12,r16
 351               	.LVL21:
 352               	.LBB7:
 347:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 353               		.loc 1 347 0
 354 0068 802F      		mov r24,r16
 355 006a 0E94 0000 		call matrix_get_row
 356               	.LVL22:
 357 006e E82E      		mov r14,r24
 358               	.LVL23:
 348:tmk_core/common/keyboard.c ****             if (matrix_change) {
 359               		.loc 1 348 0
 360 0070 F501      		movw r30,r10
 361 0072 D190      		ld r13,Z+
 362 0074 5F01      		movw r10,r30
 363 0076 D826      		eor r13,r24
 364               	.LVL24:
 349:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 365               		.loc 1 349 0
 366 0078 01F4      		brne .L17
 367               	.L24:
 368               	.LVL25:
 369 007a 0F5F      		subi r16,-1
 370 007c 1F4F      		sbci r17,-1
 371               	.LVL26:
 346:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 372               		.loc 1 346 0
 373 007e 0430      		cpi r16,4
 374 0080 1105      		cpc r17,__zero_reg__
 375 0082 01F4      		brne .L18
 376 0084 00C0      		rjmp .L19
 377               	.L17:
 378               	.LBB8:
 355:tmk_core/common/keyboard.c ****                 matrix_row_t col_mask = 1;
 379               		.loc 1 355 0
 380 0086 8091 0000 		lds r24,debug_config
 381 008a 81FD      		sbrc r24,1
 355:tmk_core/common/keyboard.c ****                 matrix_row_t col_mask = 1;
 382               		.loc 1 355 0 is_stmt 0 discriminator 1
 383 008c 0E94 0000 		call matrix_print
 384               	.LVL27:
 385               	.L20:
 386               	.LBB9:
 357:tmk_core/common/keyboard.c ****                     if (matrix_change & col_mask) {
 387               		.loc 1 357 0 is_stmt 1
 388 0090 80E0      		ldi r24,0
 389               	.LBE9:
 356:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
 390               		.loc 1 356 0
 391 0092 FF24      		clr r15
 392 0094 F394      		inc r15
 393               	.LVL28:
 394               	.L23:
 395               	.LBB10:
 358:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 396               		.loc 1 358 0
 397 0096 9D2D      		mov r25,r13
 398 0098 9F21      		and r25,r15
 399 009a 01F0      		breq .L21
 359:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 400               		.loc 1 359 0
 401 009c 8E83      		std Y+6,r24
 402 009e CF82      		std Y+7,r12
 403 00a0 EF20      		and r14,r15
 404               	.LVL29:
 405 00a2 81E0      		ldi r24,lo8(1)
 406               	.LVL30:
 407 00a4 01F4      		brne .L22
 408 00a6 80E0      		ldi r24,0
 409               	.L22:
 410 00a8 8887      		std Y+8,r24
 360:tmk_core/common/keyboard.c ****                         });
 411               		.loc 1 360 0
 412 00aa 0E94 0000 		call timer_read
 413               	.LVL31:
 359:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & col_mas
 414               		.loc 1 359 0
 415 00ae 8160      		ori r24,1
 416 00b0 782F      		mov r23,r24
 417 00b2 9A87      		std Y+10,r25
 418 00b4 8987      		std Y+9,r24
 419 00b6 4E81      		ldd r20,Y+6
 420 00b8 5F81      		ldd r21,Y+7
 421 00ba 6885      		ldd r22,Y+8
 422 00bc 8A85      		ldd r24,Y+10
 423 00be 0E94 0000 		call action_exec
 424               	.LVL32:
 363:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 425               		.loc 1 363 0
 426 00c2 F801      		movw r30,r16
 427 00c4 E050      		subi r30,lo8(-(matrix_prev.5779))
 428 00c6 F040      		sbci r31,hi8(-(matrix_prev.5779))
 429 00c8 8081      		ld r24,Z
 430 00ca F826      		eor r15,r24
 431               	.LVL33:
 432 00cc F082      		st Z,r15
 369:tmk_core/common/keyboard.c ****                     }
 433               		.loc 1 369 0
 434 00ce 00C0      		rjmp .L16
 435               	.LVL34:
 436               	.L21:
 357:tmk_core/common/keyboard.c ****                     if (matrix_change & col_mask) {
 437               		.loc 1 357 0 discriminator 2
 438 00d0 8F5F      		subi r24,lo8(-(1))
 439               	.LVL35:
 440 00d2 FF0C      		lsl r15
 441               	.LVL36:
 442 00d4 8430      		cpi r24,lo8(4)
 443 00d6 01F4      		brne .L23
 444 00d8 00C0      		rjmp .L24
 445               	.LVL37:
 446               	.L16:
 447               	.LBE10:
 448               	.LBE8:
 449               	.LBE7:
 381:tmk_core/common/keyboard.c **** 
 382:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 383:tmk_core/common/keyboard.c **** 
 384:tmk_core/common/keyboard.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
 385:tmk_core/common/keyboard.c ****     matrix_scan_perf_task();
 386:tmk_core/common/keyboard.c **** #endif
 387:tmk_core/common/keyboard.c **** 
 388:tmk_core/common/keyboard.c **** #if defined(RGBLIGHT_ENABLE)
 389:tmk_core/common/keyboard.c ****     rgblight_task();
 390:tmk_core/common/keyboard.c **** #endif
 391:tmk_core/common/keyboard.c **** 
 392:tmk_core/common/keyboard.c **** #if defined(BACKLIGHT_ENABLE)
 393:tmk_core/common/keyboard.c **** #    if defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS)
 394:tmk_core/common/keyboard.c ****     backlight_task();
 450               		.loc 1 394 0
 451 00da 0E94 0000 		call backlight_task
 452               	.LVL38:
 395:tmk_core/common/keyboard.c **** #    endif
 396:tmk_core/common/keyboard.c **** #endif
 397:tmk_core/common/keyboard.c **** 
 398:tmk_core/common/keyboard.c **** #ifdef ENCODER_ENABLE
 399:tmk_core/common/keyboard.c ****     encoder_read();
 400:tmk_core/common/keyboard.c **** #endif
 401:tmk_core/common/keyboard.c **** 
 402:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 403:tmk_core/common/keyboard.c ****     qwiic_task();
 404:tmk_core/common/keyboard.c **** #endif
 405:tmk_core/common/keyboard.c **** 
 406:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 407:tmk_core/common/keyboard.c ****     oled_task();
 408:tmk_core/common/keyboard.c **** #    ifndef OLED_DISABLE_TIMEOUT
 409:tmk_core/common/keyboard.c ****     // Wake up oled if user is using those fabulous keys!
 410:tmk_core/common/keyboard.c ****     if (ret) oled_on();
 411:tmk_core/common/keyboard.c **** #    endif
 412:tmk_core/common/keyboard.c **** #endif
 413:tmk_core/common/keyboard.c **** 
 414:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 415:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 416:tmk_core/common/keyboard.c ****     mousekey_task();
 453               		.loc 1 416 0
 454 00de 0E94 0000 		call mousekey_task
 455               	.LVL39:
 417:tmk_core/common/keyboard.c **** #endif
 418:tmk_core/common/keyboard.c **** 
 419:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 420:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 421:tmk_core/common/keyboard.c **** #endif
 422:tmk_core/common/keyboard.c **** 
 423:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 424:tmk_core/common/keyboard.c ****     serial_mouse_task();
 425:tmk_core/common/keyboard.c **** #endif
 426:tmk_core/common/keyboard.c **** 
 427:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 428:tmk_core/common/keyboard.c ****     adb_mouse_task();
 429:tmk_core/common/keyboard.c **** #endif
 430:tmk_core/common/keyboard.c **** 
 431:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 432:tmk_core/common/keyboard.c ****     serial_link_update();
 433:tmk_core/common/keyboard.c **** #endif
 434:tmk_core/common/keyboard.c **** 
 435:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 436:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 437:tmk_core/common/keyboard.c **** #endif
 438:tmk_core/common/keyboard.c **** 
 439:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 440:tmk_core/common/keyboard.c ****     pointing_device_task();
 441:tmk_core/common/keyboard.c **** #endif
 442:tmk_core/common/keyboard.c **** 
 443:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 444:tmk_core/common/keyboard.c ****     midi_task();
 445:tmk_core/common/keyboard.c **** #endif
 446:tmk_core/common/keyboard.c **** 
 447:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 448:tmk_core/common/keyboard.c ****     if (velocikey_enabled()) {
 449:tmk_core/common/keyboard.c ****         velocikey_decelerate();
 450:tmk_core/common/keyboard.c ****     }
 451:tmk_core/common/keyboard.c **** #endif
 452:tmk_core/common/keyboard.c **** 
 453:tmk_core/common/keyboard.c **** #ifdef JOYSTICK_ENABLE
 454:tmk_core/common/keyboard.c ****     joystick_task();
 455:tmk_core/common/keyboard.c **** #endif
 456:tmk_core/common/keyboard.c **** 
 457:tmk_core/common/keyboard.c ****     // update LED
 458:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 456               		.loc 1 458 0
 457 00e2 0E94 0000 		call host_keyboard_leds
 458               	.LVL40:
 459 00e6 9091 0000 		lds r25,led_status.5780
 460 00ea 8917      		cp r24,r25
 461 00ec 01F0      		breq .L14
 459:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 462               		.loc 1 459 0
 463 00ee 0E94 0000 		call host_keyboard_leds
 464               	.LVL41:
 465 00f2 8093 0000 		sts led_status.5780,r24
 466               	.LVL42:
 467               	/* epilogue start */
 460:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 461:tmk_core/common/keyboard.c ****     }
 462:tmk_core/common/keyboard.c **** }
 468               		.loc 1 462 0
 469 00f6 2A96      		adiw r28,10
 470 00f8 0FB6      		in __tmp_reg__,__SREG__
 471 00fa F894      		cli
 472 00fc DEBF      		out __SP_H__,r29
 473 00fe 0FBE      		out __SREG__,__tmp_reg__
 474 0100 CDBF      		out __SP_L__,r28
 475 0102 DF91      		pop r29
 476 0104 CF91      		pop r28
 477 0106 1F91      		pop r17
 478 0108 0F91      		pop r16
 479 010a FF90      		pop r15
 480 010c EF90      		pop r14
 481 010e DF90      		pop r13
 482 0110 CF90      		pop r12
 483 0112 BF90      		pop r11
 484 0114 AF90      		pop r10
 485               	.LBB11:
 486               	.LBB12:
 463:tmk_core/common/keyboard.c **** 
 464:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 465:tmk_core/common/keyboard.c ****  *
 466:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 467:tmk_core/common/keyboard.c ****  */
 468:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds) {
 469:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 470:tmk_core/common/keyboard.c ****         debug("keyboard_set_led: ");
 471:tmk_core/common/keyboard.c ****         debug_hex8(leds);
 472:tmk_core/common/keyboard.c ****         debug("\n");
 473:tmk_core/common/keyboard.c ****     }
 474:tmk_core/common/keyboard.c ****     led_set(leds);
 487               		.loc 1 474 0
 488 0116 0C94 0000 		jmp led_set
 489               	.LVL43:
 490               	.L14:
 491               	/* epilogue start */
 492               	.LBE12:
 493               	.LBE11:
 462:tmk_core/common/keyboard.c **** 
 494               		.loc 1 462 0
 495 011a 2A96      		adiw r28,10
 496 011c 0FB6      		in __tmp_reg__,__SREG__
 497 011e F894      		cli
 498 0120 DEBF      		out __SP_H__,r29
 499 0122 0FBE      		out __SREG__,__tmp_reg__
 500 0124 CDBF      		out __SP_L__,r28
 501 0126 DF91      		pop r29
 502 0128 CF91      		pop r28
 503 012a 1F91      		pop r17
 504 012c 0F91      		pop r16
 505 012e FF90      		pop r15
 506 0130 EF90      		pop r14
 507 0132 DF90      		pop r13
 508 0134 CF90      		pop r12
 509 0136 BF90      		pop r11
 510 0138 AF90      		pop r10
 511 013a 0895      		ret
 512               		.cfi_endproc
 513               	.LFE118:
 515               		.section	.text.keyboard_set_leds,"ax",@progbits
 516               	.global	keyboard_set_leds
 518               	keyboard_set_leds:
 519               	.LFB119:
 468:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 520               		.loc 1 468 0
 521               		.cfi_startproc
 522               	.LVL44:
 523               	/* prologue: function */
 524               	/* frame size = 0 */
 525               	/* stack size = 0 */
 526               	.L__stack_usage = 0
 527               		.loc 1 474 0
 528 0000 0C94 0000 		jmp led_set
 529               	.LVL45:
 530               		.cfi_endproc
 531               	.LFE119:
 533               		.section	.bss.led_status.5780,"aw",@nobits
 536               	led_status.5780:
 537 0000 00        		.zero	1
 538               		.section	.bss.matrix_prev.5779,"aw",@nobits
 541               	matrix_prev.5779:
 542 0000 0000 0000 		.zero	4
 543               		.text
 544               	.Letext0:
 545               		.file 2 "/usr/lib/avr/include/stdint.h"
 546               		.file 3 "tmk_core/common/keyboard.h"
 547               		.file 4 "tmk_core/common/matrix.h"
 548               		.file 5 "tmk_core/common/debug.h"
 549               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 550               		.file 7 "tmk_core/common/timer.h"
 551               		.file 8 "tmk_core/common/bootmagic.h"
 552               		.file 9 "quantum/backlight/backlight.h"
 553               		.file 10 "tmk_core/common/action.h"
 554               		.file 11 "tmk_core/common/led.h"
 555               		.file 12 "tmk_core/common/mousekey.h"
 556               		.file 13 "tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccYaBcCy.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccYaBcCy.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccYaBcCy.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccYaBcCy.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccYaBcCy.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccYaBcCy.s:13     .text.disable_jtag:0000000000000000 disable_jtag
     /tmp/ccYaBcCy.s:37     .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/ccYaBcCy.s:52     .text.is_keyboard_left:0000000000000000 is_keyboard_left
     /tmp/ccYaBcCy.s:69     .text.should_process_keypress:0000000000000000 should_process_keypress
     /tmp/ccYaBcCy.s:86     .text.housekeeping_task_user:0000000000000000 housekeeping_task_user
     /tmp/ccYaBcCy.s:86     .text.housekeeping_task_user:0000000000000000 housekeeping_task_user.localalias.0
     /tmp/ccYaBcCy.s:102    .text.housekeeping_task_kb:0000000000000000 housekeeping_task_kb
     /tmp/ccYaBcCy.s:116    .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
     /tmp/ccYaBcCy.s:130    .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
     /tmp/ccYaBcCy.s:147    .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
     /tmp/ccYaBcCy.s:161    .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
     /tmp/ccYaBcCy.s:178    .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/ccYaBcCy.s:192    .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/ccYaBcCy.s:215    .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccYaBcCy.s:244    .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccYaBcCy.s:541    .bss.matrix_prev.5779:0000000000000000 matrix_prev.5779
     /tmp/ccYaBcCy.s:536    .bss.led_status.5780:0000000000000000 led_status.5780
     /tmp/ccYaBcCy.s:518    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
bootmagic
backlight_init
matrix_scan
timer_read
action_exec
matrix_get_row
debug_config
matrix_print
backlight_task
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
