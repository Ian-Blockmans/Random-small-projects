   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.timer_init,"ax",@progbits
  11               	.global	timer_init
  13               	timer_init:
  14               	.LFB5:
  15               		.file 1 "tmk_core/common/avr/timer.c"
   1:tmk_core/common/avr/timer.c **** /*
   2:tmk_core/common/avr/timer.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/avr/timer.c **** 
   4:tmk_core/common/avr/timer.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/avr/timer.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/avr/timer.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/avr/timer.c **** (at your option) any later version.
   8:tmk_core/common/avr/timer.c **** 
   9:tmk_core/common/avr/timer.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/avr/timer.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/avr/timer.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/avr/timer.c **** GNU General Public License for more details.
  13:tmk_core/common/avr/timer.c **** 
  14:tmk_core/common/avr/timer.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/avr/timer.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/avr/timer.c **** */
  17:tmk_core/common/avr/timer.c **** 
  18:tmk_core/common/avr/timer.c **** #include <avr/io.h>
  19:tmk_core/common/avr/timer.c **** #include <avr/interrupt.h>
  20:tmk_core/common/avr/timer.c **** #include <util/atomic.h>
  21:tmk_core/common/avr/timer.c **** #include <stdint.h>
  22:tmk_core/common/avr/timer.c **** #include "timer_avr.h"
  23:tmk_core/common/avr/timer.c **** #include "timer.h"
  24:tmk_core/common/avr/timer.c **** 
  25:tmk_core/common/avr/timer.c **** // counter resolution 1ms
  26:tmk_core/common/avr/timer.c **** // NOTE: union { uint32_t timer32; struct { uint16_t dummy; uint16_t timer16; }}
  27:tmk_core/common/avr/timer.c **** volatile uint32_t timer_count;
  28:tmk_core/common/avr/timer.c **** 
  29:tmk_core/common/avr/timer.c **** /** \brief timer initialization
  30:tmk_core/common/avr/timer.c ****  *
  31:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
  32:tmk_core/common/avr/timer.c ****  */
  33:tmk_core/common/avr/timer.c **** void timer_init(void) {
  16               		.loc 1 33 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LVL0:
  34:tmk_core/common/avr/timer.c **** #if TIMER_PRESCALER == 1
  35:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS00);
  36:tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 8
  37:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS01);
  38:tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 64
  39:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS00) | _BV(CS01);
  40:tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 256
  41:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS02);
  42:tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 1024
  43:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS00) | _BV(CS02);
  44:tmk_core/common/avr/timer.c **** #else
  45:tmk_core/common/avr/timer.c **** #    error "Timer prescaler value is not valid"
  46:tmk_core/common/avr/timer.c **** #endif
  47:tmk_core/common/avr/timer.c **** 
  48:tmk_core/common/avr/timer.c **** #if defined(__AVR_ATmega32A__)
  49:tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  50:tmk_core/common/avr/timer.c ****     TCCR0 = _BV(WGM01) | prescaler;
  51:tmk_core/common/avr/timer.c **** 
  52:tmk_core/common/avr/timer.c ****     OCR0  = TIMER_RAW_TOP;
  53:tmk_core/common/avr/timer.c ****     TIMSK = _BV(OCIE0);
  54:tmk_core/common/avr/timer.c **** #elif defined(__AVR_ATtiny85__)
  55:tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  56:tmk_core/common/avr/timer.c ****     TCCR0A = _BV(WGM01);
  57:tmk_core/common/avr/timer.c ****     TCCR0B = prescaler;
  58:tmk_core/common/avr/timer.c **** 
  59:tmk_core/common/avr/timer.c ****     OCR0A = TIMER_RAW_TOP;
  60:tmk_core/common/avr/timer.c ****     TIMSK = _BV(OCIE0A);
  61:tmk_core/common/avr/timer.c **** #else
  62:tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  63:tmk_core/common/avr/timer.c ****     TCCR0A = _BV(WGM01);
  23               		.loc 1 63 0
  24 0000 82E0      		ldi r24,lo8(2)
  25 0002 84BD      		out 0x24,r24
  64:tmk_core/common/avr/timer.c ****     TCCR0B = prescaler;
  26               		.loc 1 64 0
  27 0004 93E0      		ldi r25,lo8(3)
  28 0006 95BD      		out 0x25,r25
  65:tmk_core/common/avr/timer.c **** 
  66:tmk_core/common/avr/timer.c ****     OCR0A  = TIMER_RAW_TOP;
  29               		.loc 1 66 0
  30 0008 9AEF      		ldi r25,lo8(-6)
  31 000a 97BD      		out 0x27,r25
  67:tmk_core/common/avr/timer.c ****     TIMSK0 = _BV(OCIE0A);
  32               		.loc 1 67 0
  33 000c 8093 6E00 		sts 110,r24
  34 0010 0895      		ret
  35               		.cfi_endproc
  36               	.LFE5:
  38               		.section	.text.timer_clear,"ax",@progbits
  39               	.global	timer_clear
  41               	timer_clear:
  42               	.LFB6:
  68:tmk_core/common/avr/timer.c **** #endif
  69:tmk_core/common/avr/timer.c **** }
  70:tmk_core/common/avr/timer.c **** 
  71:tmk_core/common/avr/timer.c **** /** \brief timer clear
  72:tmk_core/common/avr/timer.c ****  *
  73:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
  74:tmk_core/common/avr/timer.c ****  */
  75:tmk_core/common/avr/timer.c **** inline void timer_clear(void) {
  43               		.loc 1 75 0
  44               		.cfi_startproc
  45               	/* prologue: function */
  46               	/* frame size = 0 */
  47               	/* stack size = 0 */
  48               	.L__stack_usage = 0
  49               	.LBB27:
  76:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { timer_count = 0; }
  50               		.loc 1 76 0
  51 0000 8FB7      		in r24,__SREG__
  52               	.LVL1:
  53               	.LBB28:
  54               	.LBB29:
  55               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id$ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
  56               		.loc 2 50 0
  57               	/* #APP */
  58               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
  59 0002 F894      		cli
  60               	 ;  0 "" 2
  61               	.LVL2:
  62               	/* #NOAPP */
  63               	.LBE29:
  64               	.LBE28:
  65               		.loc 1 76 0
  66 0004 1092 0000 		sts timer_count,__zero_reg__
  67 0008 1092 0000 		sts timer_count+1,__zero_reg__
  68 000c 1092 0000 		sts timer_count+2,__zero_reg__
  69 0010 1092 0000 		sts timer_count+3,__zero_reg__
  70               	.LVL3:
  71               	.LBB30:
  72               	.LBB31:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/avr/include/util/atomic.h **** }
  60:/usr/lib/avr/include/util/atomic.h **** 
  61:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/avr/include/util/atomic.h **** {
  63:/usr/lib/avr/include/util/atomic.h ****     cli();
  64:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/avr/include/util/atomic.h **** }
  67:/usr/lib/avr/include/util/atomic.h **** 
  68:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/avr/include/util/atomic.h **** {
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
  73               		.loc 2 70 0
  74 0014 8FBF      		out __SREG__,r24
  71:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  75               		.loc 2 71 0
  76               	.LVL4:
  77 0016 0895      		ret
  78               	.LBE31:
  79               	.LBE30:
  80               	.LBE27:
  81               		.cfi_endproc
  82               	.LFE6:
  84               		.section	.text.timer_read,"ax",@progbits
  85               	.global	timer_read
  87               	timer_read:
  88               	.LFB7:
  77:tmk_core/common/avr/timer.c **** }
  78:tmk_core/common/avr/timer.c **** 
  79:tmk_core/common/avr/timer.c **** /** \brief timer read
  80:tmk_core/common/avr/timer.c ****  *
  81:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
  82:tmk_core/common/avr/timer.c ****  */
  83:tmk_core/common/avr/timer.c **** inline uint16_t timer_read(void) {
  89               		.loc 1 83 0
  90               		.cfi_startproc
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 0 */
  94               	.L__stack_usage = 0
  95               	.LBB32:
  84:tmk_core/common/avr/timer.c ****     uint32_t t;
  85:tmk_core/common/avr/timer.c **** 
  86:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { t = timer_count; }
  96               		.loc 1 86 0
  97 0000 2FB7      		in r18,__SREG__
  98               	.LVL5:
  99               	.LBB33:
 100               	.LBB34:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 101               		.loc 2 50 0
 102               	/* #APP */
 103               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 104 0002 F894      		cli
 105               	 ;  0 "" 2
 106               	.LVL6:
 107               	/* #NOAPP */
 108               	.LBE34:
 109               	.LBE33:
 110               		.loc 1 86 0
 111 0004 8091 0000 		lds r24,timer_count
 112 0008 9091 0000 		lds r25,timer_count+1
 113 000c A091 0000 		lds r26,timer_count+2
 114 0010 B091 0000 		lds r27,timer_count+3
 115               	.LVL7:
 116               	.LBB35:
 117               	.LBB36:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 118               		.loc 2 70 0
 119 0014 2FBF      		out __SREG__,r18
 120               		.loc 2 71 0
 121               	.LVL8:
 122               	.LBE36:
 123               	.LBE35:
 124               	.LBE32:
  87:tmk_core/common/avr/timer.c **** 
  88:tmk_core/common/avr/timer.c ****     return (t & 0xFFFF);
  89:tmk_core/common/avr/timer.c **** }
 125               		.loc 1 89 0
 126 0016 0895      		ret
 127               		.cfi_endproc
 128               	.LFE7:
 130               		.section	.text.timer_read32,"ax",@progbits
 131               	.global	timer_read32
 133               	timer_read32:
 134               	.LFB8:
  90:tmk_core/common/avr/timer.c **** 
  91:tmk_core/common/avr/timer.c **** /** \brief timer read32
  92:tmk_core/common/avr/timer.c ****  *
  93:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
  94:tmk_core/common/avr/timer.c ****  */
  95:tmk_core/common/avr/timer.c **** inline uint32_t timer_read32(void) {
 135               		.loc 1 95 0
 136               		.cfi_startproc
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
 141               	.LBB37:
  96:tmk_core/common/avr/timer.c ****     uint32_t t;
  97:tmk_core/common/avr/timer.c **** 
  98:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { t = timer_count; }
 142               		.loc 1 98 0
 143 0000 2FB7      		in r18,__SREG__
 144               	.LVL9:
 145               	.LBB38:
 146               	.LBB39:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 147               		.loc 2 50 0
 148               	/* #APP */
 149               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 150 0002 F894      		cli
 151               	 ;  0 "" 2
 152               	.LVL10:
 153               	/* #NOAPP */
 154               	.LBE39:
 155               	.LBE38:
 156               		.loc 1 98 0
 157 0004 6091 0000 		lds r22,timer_count
 158 0008 7091 0000 		lds r23,timer_count+1
 159 000c 8091 0000 		lds r24,timer_count+2
 160 0010 9091 0000 		lds r25,timer_count+3
 161               	.LVL11:
 162               	.LBB40:
 163               	.LBB41:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 164               		.loc 2 70 0
 165 0014 2FBF      		out __SREG__,r18
 166               		.loc 2 71 0
 167               	.LVL12:
 168               	.LBE41:
 169               	.LBE40:
 170               	.LBE37:
  99:tmk_core/common/avr/timer.c **** 
 100:tmk_core/common/avr/timer.c ****     return t;
 101:tmk_core/common/avr/timer.c **** }
 171               		.loc 1 101 0
 172 0016 0895      		ret
 173               		.cfi_endproc
 174               	.LFE8:
 176               		.section	.text.timer_elapsed,"ax",@progbits
 177               	.global	timer_elapsed
 179               	timer_elapsed:
 180               	.LFB9:
 102:tmk_core/common/avr/timer.c **** 
 103:tmk_core/common/avr/timer.c **** /** \brief timer elapsed
 104:tmk_core/common/avr/timer.c ****  *
 105:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
 106:tmk_core/common/avr/timer.c ****  */
 107:tmk_core/common/avr/timer.c **** inline uint16_t timer_elapsed(uint16_t last) {
 181               		.loc 1 107 0
 182               		.cfi_startproc
 183               	.LVL13:
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 0 */
 187               	.L__stack_usage = 0
 188 0000 9C01      		movw r18,r24
 189               	.LBB42:
 108:tmk_core/common/avr/timer.c ****     uint32_t t;
 109:tmk_core/common/avr/timer.c **** 
 110:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { t = timer_count; }
 190               		.loc 1 110 0
 191 0002 4FB7      		in r20,__SREG__
 192               	.LVL14:
 193               	.LBB43:
 194               	.LBB44:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 195               		.loc 2 50 0
 196               	/* #APP */
 197               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 198 0004 F894      		cli
 199               	 ;  0 "" 2
 200               	.LVL15:
 201               	/* #NOAPP */
 202               	.LBE44:
 203               	.LBE43:
 204               		.loc 1 110 0
 205 0006 8091 0000 		lds r24,timer_count
 206 000a 9091 0000 		lds r25,timer_count+1
 207 000e A091 0000 		lds r26,timer_count+2
 208 0012 B091 0000 		lds r27,timer_count+3
 209               	.LVL16:
 210               	.LBB45:
 211               	.LBB46:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 212               		.loc 2 70 0
 213 0016 4FBF      		out __SREG__,r20
 214               		.loc 2 71 0
 215               	.LVL17:
 216               	.LBE46:
 217               	.LBE45:
 218               	.LBE42:
 111:tmk_core/common/avr/timer.c **** 
 112:tmk_core/common/avr/timer.c ****     return TIMER_DIFF_16((t & 0xFFFF), last);
 113:tmk_core/common/avr/timer.c **** }
 219               		.loc 1 113 0
 220 0018 821B      		sub r24,r18
 221 001a 930B      		sbc r25,r19
 222 001c 0895      		ret
 223               		.cfi_endproc
 224               	.LFE9:
 226               		.section	.text.timer_elapsed32,"ax",@progbits
 227               	.global	timer_elapsed32
 229               	timer_elapsed32:
 230               	.LFB10:
 114:tmk_core/common/avr/timer.c **** 
 115:tmk_core/common/avr/timer.c **** /** \brief timer elapsed32
 116:tmk_core/common/avr/timer.c ****  *
 117:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
 118:tmk_core/common/avr/timer.c ****  */
 119:tmk_core/common/avr/timer.c **** inline uint32_t timer_elapsed32(uint32_t last) {
 231               		.loc 1 119 0
 232               		.cfi_startproc
 233               	.LVL18:
 234 0000 CF92      		push r12
 235               	.LCFI0:
 236               		.cfi_def_cfa_offset 3
 237               		.cfi_offset 12, -2
 238 0002 DF92      		push r13
 239               	.LCFI1:
 240               		.cfi_def_cfa_offset 4
 241               		.cfi_offset 13, -3
 242 0004 EF92      		push r14
 243               	.LCFI2:
 244               		.cfi_def_cfa_offset 5
 245               		.cfi_offset 14, -4
 246 0006 FF92      		push r15
 247               	.LCFI3:
 248               		.cfi_def_cfa_offset 6
 249               		.cfi_offset 15, -5
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 4 */
 253               	.L__stack_usage = 4
 254               	.LBB47:
 120:tmk_core/common/avr/timer.c ****     uint32_t t;
 121:tmk_core/common/avr/timer.c **** 
 122:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { t = timer_count; }
 255               		.loc 1 122 0
 256 0008 2FB7      		in r18,__SREG__
 257               	.LVL19:
 258               	.LBB48:
 259               	.LBB49:
  50:/usr/lib/avr/include/util/atomic.h ****     return 1;
 260               		.loc 2 50 0
 261               	/* #APP */
 262               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 263 000a F894      		cli
 264               	 ;  0 "" 2
 265               	.LVL20:
 266               	/* #NOAPP */
 267               	.LBE49:
 268               	.LBE48:
 269               		.loc 1 122 0
 270 000c C090 0000 		lds r12,timer_count
 271 0010 D090 0000 		lds r13,timer_count+1
 272 0014 E090 0000 		lds r14,timer_count+2
 273 0018 F090 0000 		lds r15,timer_count+3
 274               	.LVL21:
 275               	.LBB50:
 276               	.LBB51:
  70:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 277               		.loc 2 70 0
 278 001c 2FBF      		out __SREG__,r18
 279               		.loc 2 71 0
 280               	.LVL22:
 281               	.LBE51:
 282               	.LBE50:
 283               	.LBE47:
 123:tmk_core/common/avr/timer.c **** 
 124:tmk_core/common/avr/timer.c ****     return TIMER_DIFF_32(t, last);
 284               		.loc 1 124 0
 285 001e A701      		movw r20,r14
 286 0020 9601      		movw r18,r12
 287 0022 261B      		sub r18,r22
 288 0024 370B      		sbc r19,r23
 289 0026 480B      		sbc r20,r24
 290 0028 590B      		sbc r21,r25
 291 002a CA01      		movw r24,r20
 292 002c B901      		movw r22,r18
 293               	.LVL23:
 294               	/* epilogue start */
 125:tmk_core/common/avr/timer.c **** }
 295               		.loc 1 125 0
 296 002e FF90      		pop r15
 297 0030 EF90      		pop r14
 298 0032 DF90      		pop r13
 299 0034 CF90      		pop r12
 300               	.LVL24:
 301 0036 0895      		ret
 302               		.cfi_endproc
 303               	.LFE10:
 305               		.section	.text.__vector_21,"ax",@progbits
 306               	.global	__vector_21
 308               	__vector_21:
 309               	.LFB11:
 126:tmk_core/common/avr/timer.c **** 
 127:tmk_core/common/avr/timer.c **** // excecuted once per 1ms.(excess for just timer count?)
 128:tmk_core/common/avr/timer.c **** #ifndef __AVR_ATmega32A__
 129:tmk_core/common/avr/timer.c **** #    define TIMER_INTERRUPT_VECTOR TIMER0_COMPA_vect
 130:tmk_core/common/avr/timer.c **** #else
 131:tmk_core/common/avr/timer.c **** #    define TIMER_INTERRUPT_VECTOR TIMER0_COMP_vect
 132:tmk_core/common/avr/timer.c **** #endif
 133:tmk_core/common/avr/timer.c **** ISR(TIMER_INTERRUPT_VECTOR, ISR_NOBLOCK) { timer_count++; }
 310               		.loc 1 133 0
 311               		.cfi_startproc
 312 0000 7894      		sei
 313 0002 1F92      		push r1
 314               	.LCFI4:
 315               		.cfi_def_cfa_offset 3
 316               		.cfi_offset 1, -2
 317 0004 0F92      		push r0
 318               	.LCFI5:
 319               		.cfi_def_cfa_offset 4
 320               		.cfi_offset 0, -3
 321 0006 0FB6      		in r0,__SREG__
 322 0008 0F92      		push r0
 323 000a 1124      		clr __zero_reg__
 324 000c 8F93      		push r24
 325               	.LCFI6:
 326               		.cfi_def_cfa_offset 5
 327               		.cfi_offset 24, -4
 328 000e 9F93      		push r25
 329               	.LCFI7:
 330               		.cfi_def_cfa_offset 6
 331               		.cfi_offset 25, -5
 332 0010 AF93      		push r26
 333               	.LCFI8:
 334               		.cfi_def_cfa_offset 7
 335               		.cfi_offset 26, -6
 336 0012 BF93      		push r27
 337               	.LCFI9:
 338               		.cfi_def_cfa_offset 8
 339               		.cfi_offset 27, -7
 340               	/* prologue: Interrupt */
 341               	/* frame size = 0 */
 342               	/* stack size = 7 */
 343               	.L__stack_usage = 7
 344               		.loc 1 133 0
 345 0014 8091 0000 		lds r24,timer_count
 346 0018 9091 0000 		lds r25,timer_count+1
 347 001c A091 0000 		lds r26,timer_count+2
 348 0020 B091 0000 		lds r27,timer_count+3
 349 0024 0196      		adiw r24,1
 350 0026 A11D      		adc r26,__zero_reg__
 351 0028 B11D      		adc r27,__zero_reg__
 352 002a 8093 0000 		sts timer_count,r24
 353 002e 9093 0000 		sts timer_count+1,r25
 354 0032 A093 0000 		sts timer_count+2,r26
 355 0036 B093 0000 		sts timer_count+3,r27
 356               	/* epilogue start */
 357 003a BF91      		pop r27
 358 003c AF91      		pop r26
 359 003e 9F91      		pop r25
 360 0040 8F91      		pop r24
 361 0042 0F90      		pop r0
 362 0044 0FBE      		out __SREG__,r0
 363 0046 0F90      		pop r0
 364 0048 1F90      		pop r1
 365 004a 1895      		reti
 366               		.cfi_endproc
 367               	.LFE11:
 369               		.comm	timer_count,4,1
 370               		.text
 371               	.Letext0:
 372               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccBmZ3mj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBmZ3mj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBmZ3mj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBmZ3mj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBmZ3mj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBmZ3mj.s:13     .text.timer_init:0000000000000000 timer_init
     /tmp/ccBmZ3mj.s:41     .text.timer_clear:0000000000000000 timer_clear
                            *COM*:0000000000000004 timer_count
     /tmp/ccBmZ3mj.s:87     .text.timer_read:0000000000000000 timer_read
     /tmp/ccBmZ3mj.s:133    .text.timer_read32:0000000000000000 timer_read32
     /tmp/ccBmZ3mj.s:179    .text.timer_elapsed:0000000000000000 timer_elapsed
     /tmp/ccBmZ3mj.s:229    .text.timer_elapsed32:0000000000000000 timer_elapsed32
     /tmp/ccBmZ3mj.s:308    .text.__vector_21:0000000000000000 __vector_21

UNDEFINED SYMBOLS
__do_clear_bss
