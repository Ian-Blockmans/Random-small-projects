   1               		.file	"action_tapping.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.debug_waiting_buffer,"ax",@progbits
  12               	debug_waiting_buffer:
  13               	.LFB13:
  14               		.file 1 "tmk_core/common/action_tapping.c"
   1:tmk_core/common/action_tapping.c **** #include <stdint.h>
   2:tmk_core/common/action_tapping.c **** #include <stdbool.h>
   3:tmk_core/common/action_tapping.c **** #include "action.h"
   4:tmk_core/common/action_tapping.c **** #include "action_layer.h"
   5:tmk_core/common/action_tapping.c **** #include "action_tapping.h"
   6:tmk_core/common/action_tapping.c **** #include "keycode.h"
   7:tmk_core/common/action_tapping.c **** #include "timer.h"
   8:tmk_core/common/action_tapping.c **** 
   9:tmk_core/common/action_tapping.c **** #ifdef DEBUG_ACTION
  10:tmk_core/common/action_tapping.c **** #    include "debug.h"
  11:tmk_core/common/action_tapping.c **** #else
  12:tmk_core/common/action_tapping.c **** #    include "nodebug.h"
  13:tmk_core/common/action_tapping.c **** #endif
  14:tmk_core/common/action_tapping.c **** 
  15:tmk_core/common/action_tapping.c **** #ifndef NO_ACTION_TAPPING
  16:tmk_core/common/action_tapping.c **** 
  17:tmk_core/common/action_tapping.c **** #    define IS_TAPPING() !IS_NOEVENT(tapping_key.event)
  18:tmk_core/common/action_tapping.c **** #    define IS_TAPPING_PRESSED() (IS_TAPPING() && tapping_key.event.pressed)
  19:tmk_core/common/action_tapping.c **** #    define IS_TAPPING_RELEASED() (IS_TAPPING() && !tapping_key.event.pressed)
  20:tmk_core/common/action_tapping.c **** #    define IS_TAPPING_KEY(k) (IS_TAPPING() && KEYEQ(tapping_key.event.key, (k)))
  21:tmk_core/common/action_tapping.c **** 
  22:tmk_core/common/action_tapping.c **** __attribute__((weak)) uint16_t get_tapping_term(uint16_t keycode, keyrecord_t *record) { return TAP
  23:tmk_core/common/action_tapping.c **** 
  24:tmk_core/common/action_tapping.c **** #    ifdef TAPPING_TERM_PER_KEY
  25:tmk_core/common/action_tapping.c **** #        define WITHIN_TAPPING_TERM(e) (TIMER_DIFF_16(e.time, tapping_key.event.time) < get_tapping
  26:tmk_core/common/action_tapping.c **** #    else
  27:tmk_core/common/action_tapping.c **** #        define WITHIN_TAPPING_TERM(e) (TIMER_DIFF_16(e.time, tapping_key.event.time) < TAPPING_TER
  28:tmk_core/common/action_tapping.c **** #    endif
  29:tmk_core/common/action_tapping.c **** 
  30:tmk_core/common/action_tapping.c **** #    ifdef TAPPING_FORCE_HOLD_PER_KEY
  31:tmk_core/common/action_tapping.c **** __attribute__((weak)) bool get_tapping_force_hold(uint16_t keycode, keyrecord_t *record) { return f
  32:tmk_core/common/action_tapping.c **** #    endif
  33:tmk_core/common/action_tapping.c **** 
  34:tmk_core/common/action_tapping.c **** #    ifdef PERMISSIVE_HOLD_PER_KEY
  35:tmk_core/common/action_tapping.c **** __attribute__((weak)) bool get_permissive_hold(uint16_t keycode, keyrecord_t *record) { return fals
  36:tmk_core/common/action_tapping.c **** #    endif
  37:tmk_core/common/action_tapping.c **** 
  38:tmk_core/common/action_tapping.c **** static keyrecord_t tapping_key                         = {};
  39:tmk_core/common/action_tapping.c **** static keyrecord_t waiting_buffer[WAITING_BUFFER_SIZE] = {};
  40:tmk_core/common/action_tapping.c **** static uint8_t     waiting_buffer_head                 = 0;
  41:tmk_core/common/action_tapping.c **** static uint8_t     waiting_buffer_tail                 = 0;
  42:tmk_core/common/action_tapping.c **** 
  43:tmk_core/common/action_tapping.c **** static bool process_tapping(keyrecord_t *record);
  44:tmk_core/common/action_tapping.c **** static bool waiting_buffer_enq(keyrecord_t record);
  45:tmk_core/common/action_tapping.c **** static void waiting_buffer_clear(void);
  46:tmk_core/common/action_tapping.c **** static bool waiting_buffer_typed(keyevent_t event);
  47:tmk_core/common/action_tapping.c **** static bool waiting_buffer_has_anykey_pressed(void);
  48:tmk_core/common/action_tapping.c **** static void waiting_buffer_scan_tap(void);
  49:tmk_core/common/action_tapping.c **** static void debug_tapping_key(void);
  50:tmk_core/common/action_tapping.c **** static void debug_waiting_buffer(void);
  51:tmk_core/common/action_tapping.c **** 
  52:tmk_core/common/action_tapping.c **** /** \brief Action Tapping Process
  53:tmk_core/common/action_tapping.c ****  *
  54:tmk_core/common/action_tapping.c ****  * FIXME: Needs doc
  55:tmk_core/common/action_tapping.c ****  */
  56:tmk_core/common/action_tapping.c **** void action_tapping_process(keyrecord_t record) {
  57:tmk_core/common/action_tapping.c ****     if (process_tapping(&record)) {
  58:tmk_core/common/action_tapping.c ****         if (!IS_NOEVENT(record.event)) {
  59:tmk_core/common/action_tapping.c ****             debug("processed: ");
  60:tmk_core/common/action_tapping.c ****             debug_record(record);
  61:tmk_core/common/action_tapping.c ****             debug("\n");
  62:tmk_core/common/action_tapping.c ****         }
  63:tmk_core/common/action_tapping.c ****     } else {
  64:tmk_core/common/action_tapping.c ****         if (!waiting_buffer_enq(record)) {
  65:tmk_core/common/action_tapping.c ****             // clear all in case of overflow.
  66:tmk_core/common/action_tapping.c ****             debug("OVERFLOW: CLEAR ALL STATES\n");
  67:tmk_core/common/action_tapping.c ****             clear_keyboard();
  68:tmk_core/common/action_tapping.c ****             waiting_buffer_clear();
  69:tmk_core/common/action_tapping.c ****             tapping_key = (keyrecord_t){};
  70:tmk_core/common/action_tapping.c ****         }
  71:tmk_core/common/action_tapping.c ****     }
  72:tmk_core/common/action_tapping.c **** 
  73:tmk_core/common/action_tapping.c ****     // process waiting_buffer
  74:tmk_core/common/action_tapping.c ****     if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
  75:tmk_core/common/action_tapping.c ****         debug("---- action_exec: process waiting_buffer -----\n");
  76:tmk_core/common/action_tapping.c ****     }
  77:tmk_core/common/action_tapping.c ****     for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail +
  78:tmk_core/common/action_tapping.c ****         if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
  79:tmk_core/common/action_tapping.c ****             debug("processed: waiting_buffer[");
  80:tmk_core/common/action_tapping.c ****             debug_dec(waiting_buffer_tail);
  81:tmk_core/common/action_tapping.c ****             debug("] = ");
  82:tmk_core/common/action_tapping.c ****             debug_record(waiting_buffer[waiting_buffer_tail]);
  83:tmk_core/common/action_tapping.c ****             debug("\n\n");
  84:tmk_core/common/action_tapping.c ****         } else {
  85:tmk_core/common/action_tapping.c ****             break;
  86:tmk_core/common/action_tapping.c ****         }
  87:tmk_core/common/action_tapping.c ****     }
  88:tmk_core/common/action_tapping.c ****     if (!IS_NOEVENT(record.event)) {
  89:tmk_core/common/action_tapping.c ****         debug("\n");
  90:tmk_core/common/action_tapping.c ****     }
  91:tmk_core/common/action_tapping.c **** }
  92:tmk_core/common/action_tapping.c **** 
  93:tmk_core/common/action_tapping.c **** /** \brief Tapping
  94:tmk_core/common/action_tapping.c ****  *
  95:tmk_core/common/action_tapping.c ****  * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
  96:tmk_core/common/action_tapping.c ****  *       (without interfering by typing other key)
  97:tmk_core/common/action_tapping.c ****  */
  98:tmk_core/common/action_tapping.c **** /* return true when key event is processed or consumed. */
  99:tmk_core/common/action_tapping.c **** bool process_tapping(keyrecord_t *keyp) {
 100:tmk_core/common/action_tapping.c ****     keyevent_t event = keyp->event;
 101:tmk_core/common/action_tapping.c **** 
 102:tmk_core/common/action_tapping.c ****     // if tapping
 103:tmk_core/common/action_tapping.c ****     if (IS_TAPPING_PRESSED()) {
 104:tmk_core/common/action_tapping.c ****         if (WITHIN_TAPPING_TERM(event)) {
 105:tmk_core/common/action_tapping.c ****             if (tapping_key.tap.count == 0) {
 106:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 107:tmk_core/common/action_tapping.c ****                     // first tap!
 108:tmk_core/common/action_tapping.c ****                     debug("Tapping: First tap(0->1).\n");
 109:tmk_core/common/action_tapping.c ****                     tapping_key.tap.count = 1;
 110:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 111:tmk_core/common/action_tapping.c ****                     process_record(&tapping_key);
 112:tmk_core/common/action_tapping.c **** 
 113:tmk_core/common/action_tapping.c ****                     // copy tapping state
 114:tmk_core/common/action_tapping.c ****                     keyp->tap = tapping_key.tap;
 115:tmk_core/common/action_tapping.c ****                     // enqueue
 116:tmk_core/common/action_tapping.c ****                     return false;
 117:tmk_core/common/action_tapping.c ****                 }
 118:tmk_core/common/action_tapping.c ****                 /* Process a key typed within TAPPING_TERM
 119:tmk_core/common/action_tapping.c ****                  * This can register the key before settlement of tapping,
 120:tmk_core/common/action_tapping.c ****                  * useful for long TAPPING_TERM but may prevent fast typing.
 121:tmk_core/common/action_tapping.c ****                  */
 122:tmk_core/common/action_tapping.c **** #    if defined(TAPPING_TERM_PER_KEY) || (TAPPING_TERM >= 500) || defined(PERMISSIVE_HOLD) || defin
 123:tmk_core/common/action_tapping.c ****                 else if (
 124:tmk_core/common/action_tapping.c **** #        ifdef TAPPING_TERM_PER_KEY
 125:tmk_core/common/action_tapping.c ****                     (get_tapping_term(get_event_keycode(tapping_key.event, false), keyp) >= 500) &&
 126:tmk_core/common/action_tapping.c **** #        endif
 127:tmk_core/common/action_tapping.c **** #        ifdef PERMISSIVE_HOLD_PER_KEY
 128:tmk_core/common/action_tapping.c ****                     !get_permissive_hold(get_event_keycode(tapping_key.event, false), keyp) &&
 129:tmk_core/common/action_tapping.c **** #        endif
 130:tmk_core/common/action_tapping.c ****                     IS_RELEASED(event) && waiting_buffer_typed(event)) {
 131:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. No tap. Interfered by typing key\n");
 132:tmk_core/common/action_tapping.c ****                     process_record(&tapping_key);
 133:tmk_core/common/action_tapping.c ****                     tapping_key = (keyrecord_t){};
 134:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 135:tmk_core/common/action_tapping.c ****                     // enqueue
 136:tmk_core/common/action_tapping.c ****                     return false;
 137:tmk_core/common/action_tapping.c ****                 }
 138:tmk_core/common/action_tapping.c **** #    endif
 139:tmk_core/common/action_tapping.c ****                 /* Process release event of a key pressed before tapping starts
 140:tmk_core/common/action_tapping.c ****                  * Without this unexpected repeating will occur with having fast repeating setting
 141:tmk_core/common/action_tapping.c ****                  * https://github.com/tmk/tmk_keyboard/issues/60
 142:tmk_core/common/action_tapping.c ****                  */
 143:tmk_core/common/action_tapping.c ****                 else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
 144:tmk_core/common/action_tapping.c ****                     // Modifier should be retained till end of this tapping.
 145:tmk_core/common/action_tapping.c ****                     action_t action = layer_switch_get_action(event.key);
 146:tmk_core/common/action_tapping.c ****                     switch (action.kind.id) {
 147:tmk_core/common/action_tapping.c ****                         case ACT_LMODS:
 148:tmk_core/common/action_tapping.c ****                         case ACT_RMODS:
 149:tmk_core/common/action_tapping.c ****                             if (action.key.mods && !action.key.code) return false;
 150:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 151:tmk_core/common/action_tapping.c ****                             break;
 152:tmk_core/common/action_tapping.c ****                         case ACT_LMODS_TAP:
 153:tmk_core/common/action_tapping.c ****                         case ACT_RMODS_TAP:
 154:tmk_core/common/action_tapping.c ****                             if (action.key.mods && keyp->tap.count == 0) return false;
 155:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 156:tmk_core/common/action_tapping.c ****                             break;
 157:tmk_core/common/action_tapping.c ****                     }
 158:tmk_core/common/action_tapping.c ****                     // Release of key should be process immediately.
 159:tmk_core/common/action_tapping.c ****                     debug("Tapping: release event of a key pressed before tapping\n");
 160:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 161:tmk_core/common/action_tapping.c ****                     return true;
 162:tmk_core/common/action_tapping.c ****                 } else {
 163:tmk_core/common/action_tapping.c ****                     // set interrupted flag when other key preesed during tapping
 164:tmk_core/common/action_tapping.c ****                     if (event.pressed) {
 165:tmk_core/common/action_tapping.c ****                         tapping_key.tap.interrupted = true;
 166:tmk_core/common/action_tapping.c ****                     }
 167:tmk_core/common/action_tapping.c ****                     // enqueue
 168:tmk_core/common/action_tapping.c ****                     return false;
 169:tmk_core/common/action_tapping.c ****                 }
 170:tmk_core/common/action_tapping.c ****             }
 171:tmk_core/common/action_tapping.c ****             // tap_count > 0
 172:tmk_core/common/action_tapping.c ****             else {
 173:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 174:tmk_core/common/action_tapping.c ****                     debug("Tapping: Tap release(");
 175:tmk_core/common/action_tapping.c ****                     debug_dec(tapping_key.tap.count);
 176:tmk_core/common/action_tapping.c ****                     debug(")\n");
 177:tmk_core/common/action_tapping.c ****                     keyp->tap = tapping_key.tap;
 178:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 179:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 180:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 181:tmk_core/common/action_tapping.c ****                     return true;
 182:tmk_core/common/action_tapping.c ****                 } else if (is_tap_key(event.key) && event.pressed) {
 183:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 184:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start new tap with releasing last tap(>1).\n");
 185:tmk_core/common/action_tapping.c ****                         // unregister key
 186:tmk_core/common/action_tapping.c ****                         process_record(&(keyrecord_t){.tap = tapping_key.tap, .event.key = tapping_
 187:tmk_core/common/action_tapping.c ****                     } else {
 188:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start while last tap(1).\n");
 189:tmk_core/common/action_tapping.c ****                     }
 190:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 191:tmk_core/common/action_tapping.c ****                     waiting_buffer_scan_tap();
 192:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 193:tmk_core/common/action_tapping.c ****                     return true;
 194:tmk_core/common/action_tapping.c ****                 } else {
 195:tmk_core/common/action_tapping.c ****                     if (!IS_NOEVENT(event)) {
 196:tmk_core/common/action_tapping.c ****                         debug("Tapping: key event while last tap(>0).\n");
 197:tmk_core/common/action_tapping.c ****                     }
 198:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 199:tmk_core/common/action_tapping.c ****                     return true;
 200:tmk_core/common/action_tapping.c ****                 }
 201:tmk_core/common/action_tapping.c ****             }
 202:tmk_core/common/action_tapping.c ****         }
 203:tmk_core/common/action_tapping.c ****         // after TAPPING_TERM
 204:tmk_core/common/action_tapping.c ****         else {
 205:tmk_core/common/action_tapping.c ****             if (tapping_key.tap.count == 0) {
 206:tmk_core/common/action_tapping.c ****                 debug("Tapping: End. Timeout. Not tap(0): ");
 207:tmk_core/common/action_tapping.c ****                 debug_event(event);
 208:tmk_core/common/action_tapping.c ****                 debug("\n");
 209:tmk_core/common/action_tapping.c ****                 process_record(&tapping_key);
 210:tmk_core/common/action_tapping.c ****                 tapping_key = (keyrecord_t){};
 211:tmk_core/common/action_tapping.c ****                 debug_tapping_key();
 212:tmk_core/common/action_tapping.c ****                 return false;
 213:tmk_core/common/action_tapping.c ****             } else {
 214:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 215:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. last timeout tap release(>0).");
 216:tmk_core/common/action_tapping.c ****                     keyp->tap = tapping_key.tap;
 217:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 218:tmk_core/common/action_tapping.c ****                     tapping_key = (keyrecord_t){};
 219:tmk_core/common/action_tapping.c ****                     return true;
 220:tmk_core/common/action_tapping.c ****                 } else if (is_tap_key(event.key) && event.pressed) {
 221:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 222:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
 223:tmk_core/common/action_tapping.c ****                         // unregister key
 224:tmk_core/common/action_tapping.c ****                         process_record(&(keyrecord_t){.tap = tapping_key.tap, .event.key = tapping_
 225:tmk_core/common/action_tapping.c ****                     } else {
 226:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start while last timeout tap(1).\n");
 227:tmk_core/common/action_tapping.c ****                     }
 228:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 229:tmk_core/common/action_tapping.c ****                     waiting_buffer_scan_tap();
 230:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 231:tmk_core/common/action_tapping.c ****                     return true;
 232:tmk_core/common/action_tapping.c ****                 } else {
 233:tmk_core/common/action_tapping.c ****                     if (!IS_NOEVENT(event)) {
 234:tmk_core/common/action_tapping.c ****                         debug("Tapping: key event while last timeout tap(>0).\n");
 235:tmk_core/common/action_tapping.c ****                     }
 236:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 237:tmk_core/common/action_tapping.c ****                     return true;
 238:tmk_core/common/action_tapping.c ****                 }
 239:tmk_core/common/action_tapping.c ****             }
 240:tmk_core/common/action_tapping.c ****         }
 241:tmk_core/common/action_tapping.c ****     } else if (IS_TAPPING_RELEASED()) {
 242:tmk_core/common/action_tapping.c ****         if (WITHIN_TAPPING_TERM(event)) {
 243:tmk_core/common/action_tapping.c ****             if (event.pressed) {
 244:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key)) {
 245:tmk_core/common/action_tapping.c **** //#    ifndef TAPPING_FORCE_HOLD
 246:tmk_core/common/action_tapping.c **** #    if !defined(TAPPING_FORCE_HOLD) || defined(TAPPING_FORCE_HOLD_PER_KEY)
 247:tmk_core/common/action_tapping.c ****                     if (
 248:tmk_core/common/action_tapping.c **** #        ifdef TAPPING_FORCE_HOLD_PER_KEY
 249:tmk_core/common/action_tapping.c ****                         !get_tapping_force_hold(get_event_keycode(tapping_key.event, false), keyp) 
 250:tmk_core/common/action_tapping.c **** #        endif
 251:tmk_core/common/action_tapping.c ****                         !tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
 252:tmk_core/common/action_tapping.c ****                         // sequential tap.
 253:tmk_core/common/action_tapping.c ****                         keyp->tap = tapping_key.tap;
 254:tmk_core/common/action_tapping.c ****                         if (keyp->tap.count < 15) keyp->tap.count += 1;
 255:tmk_core/common/action_tapping.c ****                         debug("Tapping: Tap press(");
 256:tmk_core/common/action_tapping.c ****                         debug_dec(keyp->tap.count);
 257:tmk_core/common/action_tapping.c ****                         debug(")\n");
 258:tmk_core/common/action_tapping.c ****                         process_record(keyp);
 259:tmk_core/common/action_tapping.c ****                         tapping_key = *keyp;
 260:tmk_core/common/action_tapping.c ****                         debug_tapping_key();
 261:tmk_core/common/action_tapping.c ****                         return true;
 262:tmk_core/common/action_tapping.c ****                     }
 263:tmk_core/common/action_tapping.c **** #    endif
 264:tmk_core/common/action_tapping.c ****                     // FIX: start new tap again
 265:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 266:tmk_core/common/action_tapping.c ****                     return true;
 267:tmk_core/common/action_tapping.c ****                 } else if (is_tap_key(event.key)) {
 268:tmk_core/common/action_tapping.c ****                     // Sequential tap can be interfered with other tap key.
 269:tmk_core/common/action_tapping.c ****                     debug("Tapping: Start with interfering other tap.\n");
 270:tmk_core/common/action_tapping.c ****                     tapping_key = *keyp;
 271:tmk_core/common/action_tapping.c ****                     waiting_buffer_scan_tap();
 272:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 273:tmk_core/common/action_tapping.c ****                     return true;
 274:tmk_core/common/action_tapping.c ****                 } else {
 275:tmk_core/common/action_tapping.c ****                     // should none in buffer
 276:tmk_core/common/action_tapping.c ****                     // FIX: interrupted when other key is pressed
 277:tmk_core/common/action_tapping.c ****                     tapping_key.tap.interrupted = true;
 278:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 279:tmk_core/common/action_tapping.c ****                     return true;
 280:tmk_core/common/action_tapping.c ****                 }
 281:tmk_core/common/action_tapping.c ****             } else {
 282:tmk_core/common/action_tapping.c ****                 if (!IS_NOEVENT(event)) debug("Tapping: other key just after tap.\n");
 283:tmk_core/common/action_tapping.c ****                 process_record(keyp);
 284:tmk_core/common/action_tapping.c ****                 return true;
 285:tmk_core/common/action_tapping.c ****             }
 286:tmk_core/common/action_tapping.c ****         } else {
 287:tmk_core/common/action_tapping.c ****             // FIX: process_action here?
 288:tmk_core/common/action_tapping.c ****             // timeout. no sequential tap.
 289:tmk_core/common/action_tapping.c ****             debug("Tapping: End(Timeout after releasing last tap): ");
 290:tmk_core/common/action_tapping.c ****             debug_event(event);
 291:tmk_core/common/action_tapping.c ****             debug("\n");
 292:tmk_core/common/action_tapping.c ****             tapping_key = (keyrecord_t){};
 293:tmk_core/common/action_tapping.c ****             debug_tapping_key();
 294:tmk_core/common/action_tapping.c ****             return false;
 295:tmk_core/common/action_tapping.c ****         }
 296:tmk_core/common/action_tapping.c ****     }
 297:tmk_core/common/action_tapping.c ****     // not tapping state
 298:tmk_core/common/action_tapping.c ****     else {
 299:tmk_core/common/action_tapping.c ****         if (event.pressed && is_tap_key(event.key)) {
 300:tmk_core/common/action_tapping.c ****             debug("Tapping: Start(Press tap key).\n");
 301:tmk_core/common/action_tapping.c ****             tapping_key = *keyp;
 302:tmk_core/common/action_tapping.c ****             process_record_tap_hint(&tapping_key);
 303:tmk_core/common/action_tapping.c ****             waiting_buffer_scan_tap();
 304:tmk_core/common/action_tapping.c ****             debug_tapping_key();
 305:tmk_core/common/action_tapping.c ****             return true;
 306:tmk_core/common/action_tapping.c ****         } else {
 307:tmk_core/common/action_tapping.c ****             process_record(keyp);
 308:tmk_core/common/action_tapping.c ****             return true;
 309:tmk_core/common/action_tapping.c ****         }
 310:tmk_core/common/action_tapping.c ****     }
 311:tmk_core/common/action_tapping.c **** }
 312:tmk_core/common/action_tapping.c **** 
 313:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer enq
 314:tmk_core/common/action_tapping.c ****  *
 315:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 316:tmk_core/common/action_tapping.c ****  */
 317:tmk_core/common/action_tapping.c **** bool waiting_buffer_enq(keyrecord_t record) {
 318:tmk_core/common/action_tapping.c ****     if (IS_NOEVENT(record.event)) {
 319:tmk_core/common/action_tapping.c ****         return true;
 320:tmk_core/common/action_tapping.c ****     }
 321:tmk_core/common/action_tapping.c **** 
 322:tmk_core/common/action_tapping.c ****     if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
 323:tmk_core/common/action_tapping.c ****         debug("waiting_buffer_enq: Over flow.\n");
 324:tmk_core/common/action_tapping.c ****         return false;
 325:tmk_core/common/action_tapping.c ****     }
 326:tmk_core/common/action_tapping.c **** 
 327:tmk_core/common/action_tapping.c ****     waiting_buffer[waiting_buffer_head] = record;
 328:tmk_core/common/action_tapping.c ****     waiting_buffer_head                 = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
 329:tmk_core/common/action_tapping.c **** 
 330:tmk_core/common/action_tapping.c ****     debug("waiting_buffer_enq: ");
 331:tmk_core/common/action_tapping.c ****     debug_waiting_buffer();
 332:tmk_core/common/action_tapping.c ****     return true;
 333:tmk_core/common/action_tapping.c **** }
 334:tmk_core/common/action_tapping.c **** 
 335:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer clear
 336:tmk_core/common/action_tapping.c ****  *
 337:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 338:tmk_core/common/action_tapping.c ****  */
 339:tmk_core/common/action_tapping.c **** void waiting_buffer_clear(void) {
 340:tmk_core/common/action_tapping.c ****     waiting_buffer_head = 0;
 341:tmk_core/common/action_tapping.c ****     waiting_buffer_tail = 0;
 342:tmk_core/common/action_tapping.c **** }
 343:tmk_core/common/action_tapping.c **** 
 344:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer typed
 345:tmk_core/common/action_tapping.c ****  *
 346:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 347:tmk_core/common/action_tapping.c ****  */
 348:tmk_core/common/action_tapping.c **** bool waiting_buffer_typed(keyevent_t event) {
 349:tmk_core/common/action_tapping.c ****     for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SI
 350:tmk_core/common/action_tapping.c ****         if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed != waiting_buffer[i].eve
 351:tmk_core/common/action_tapping.c ****             return true;
 352:tmk_core/common/action_tapping.c ****         }
 353:tmk_core/common/action_tapping.c ****     }
 354:tmk_core/common/action_tapping.c ****     return false;
 355:tmk_core/common/action_tapping.c **** }
 356:tmk_core/common/action_tapping.c **** 
 357:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer has anykey pressed
 358:tmk_core/common/action_tapping.c ****  *
 359:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 360:tmk_core/common/action_tapping.c ****  */
 361:tmk_core/common/action_tapping.c **** __attribute__((unused)) bool waiting_buffer_has_anykey_pressed(void) {
 362:tmk_core/common/action_tapping.c ****     for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SI
 363:tmk_core/common/action_tapping.c ****         if (waiting_buffer[i].event.pressed) return true;
 364:tmk_core/common/action_tapping.c ****     }
 365:tmk_core/common/action_tapping.c ****     return false;
 366:tmk_core/common/action_tapping.c **** }
 367:tmk_core/common/action_tapping.c **** 
 368:tmk_core/common/action_tapping.c **** /** \brief Scan buffer for tapping
 369:tmk_core/common/action_tapping.c ****  *
 370:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 371:tmk_core/common/action_tapping.c ****  */
 372:tmk_core/common/action_tapping.c **** void waiting_buffer_scan_tap(void) {
 373:tmk_core/common/action_tapping.c ****     // tapping already is settled
 374:tmk_core/common/action_tapping.c ****     if (tapping_key.tap.count > 0) return;
 375:tmk_core/common/action_tapping.c ****     // invalid state: tapping_key released && tap.count == 0
 376:tmk_core/common/action_tapping.c ****     if (!tapping_key.event.pressed) return;
 377:tmk_core/common/action_tapping.c **** 
 378:tmk_core/common/action_tapping.c ****     for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SI
 379:tmk_core/common/action_tapping.c ****         if (IS_TAPPING_KEY(waiting_buffer[i].event.key) && !waiting_buffer[i].event.pressed && WITH
 380:tmk_core/common/action_tapping.c ****             tapping_key.tap.count       = 1;
 381:tmk_core/common/action_tapping.c ****             waiting_buffer[i].tap.count = 1;
 382:tmk_core/common/action_tapping.c ****             process_record(&tapping_key);
 383:tmk_core/common/action_tapping.c **** 
 384:tmk_core/common/action_tapping.c ****             debug("waiting_buffer_scan_tap: found at [");
 385:tmk_core/common/action_tapping.c ****             debug_dec(i);
 386:tmk_core/common/action_tapping.c ****             debug("]\n");
 387:tmk_core/common/action_tapping.c ****             debug_waiting_buffer();
 388:tmk_core/common/action_tapping.c ****             return;
 389:tmk_core/common/action_tapping.c ****         }
 390:tmk_core/common/action_tapping.c ****     }
 391:tmk_core/common/action_tapping.c **** }
 392:tmk_core/common/action_tapping.c **** 
 393:tmk_core/common/action_tapping.c **** /** \brief Tapping key debug print
 394:tmk_core/common/action_tapping.c ****  *
 395:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 396:tmk_core/common/action_tapping.c ****  */
 397:tmk_core/common/action_tapping.c **** static void debug_tapping_key(void) {
 398:tmk_core/common/action_tapping.c ****     debug("TAPPING_KEY=");
 399:tmk_core/common/action_tapping.c ****     debug_record(tapping_key);
 400:tmk_core/common/action_tapping.c ****     debug("\n");
 401:tmk_core/common/action_tapping.c **** }
 402:tmk_core/common/action_tapping.c **** 
 403:tmk_core/common/action_tapping.c **** /** \brief Waiting buffer debug print
 404:tmk_core/common/action_tapping.c ****  *
 405:tmk_core/common/action_tapping.c ****  * FIXME: Needs docs
 406:tmk_core/common/action_tapping.c ****  */
 407:tmk_core/common/action_tapping.c **** static void debug_waiting_buffer(void) {
  15               		.loc 1 407 0
  16               		.cfi_startproc
  17 0000 1F93      		push r17
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 17, -2
  21 0002 CF93      		push r28
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 28, -3
  25 0004 DF93      		push r29
  26               	.LCFI2:
  27               		.cfi_def_cfa_offset 5
  28               		.cfi_offset 29, -4
  29               	/* prologue: function */
  30               	/* frame size = 0 */
  31               	/* stack size = 3 */
  32               	.L__stack_usage = 3
  33               	.LBB3:
 408:tmk_core/common/action_tapping.c ****     debug("{ ");
 409:tmk_core/common/action_tapping.c ****     for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SI
  34               		.loc 1 409 0
  35 0006 C091 0000 		lds r28,waiting_buffer_tail
  36               	.LVL0:
 410:tmk_core/common/action_tapping.c ****         debug("[");
 411:tmk_core/common/action_tapping.c ****         debug_dec(i);
 412:tmk_core/common/action_tapping.c ****         debug("]=");
 413:tmk_core/common/action_tapping.c ****         debug_record(waiting_buffer[i]);
  37               		.loc 1 413 0
  38 000a 16E0      		ldi r17,lo8(6)
  39               	.LVL1:
  40               	.L2:
 409:tmk_core/common/action_tapping.c ****         debug("[");
  41               		.loc 1 409 0 discriminator 1
  42 000c 8091 0000 		lds r24,waiting_buffer_head
  43 0010 C817      		cp r28,r24
  44 0012 01F0      		breq .L5
  45               		.loc 1 413 0 discriminator 3
  46 0014 D0E0      		ldi r29,0
  47 0016 1C9F      		mul r17,r28
  48 0018 F001      		movw r30,r0
  49 001a 1D9F      		mul r17,r29
  50 001c F00D      		add r31,r0
  51 001e 1124      		clr __zero_reg__
  52 0020 E050      		subi r30,lo8(-(waiting_buffer))
  53 0022 F040      		sbci r31,hi8(-(waiting_buffer))
  54 0024 4081      		ld r20,Z
  55 0026 5181      		ldd r21,Z+1
  56 0028 6281      		ldd r22,Z+2
  57 002a 7381      		ldd r23,Z+3
  58 002c 8481      		ldd r24,Z+4
  59 002e 9581      		ldd r25,Z+5
  60 0030 0E94 0000 		call debug_record
  61               	.LVL2:
 409:tmk_core/common/action_tapping.c ****         debug("[");
  62               		.loc 1 409 0 discriminator 3
  63 0034 2196      		adiw r28,1
  64               	.LVL3:
  65 0036 C770      		andi r28,lo8(7)
  66 0038 00C0      		rjmp .L2
  67               	.LVL4:
  68               	.L5:
  69               	/* epilogue start */
  70               	.LBE3:
 414:tmk_core/common/action_tapping.c ****         debug(" ");
 415:tmk_core/common/action_tapping.c ****     }
 416:tmk_core/common/action_tapping.c ****     debug("}\n");
 417:tmk_core/common/action_tapping.c **** }
  71               		.loc 1 417 0
  72 003a DF91      		pop r29
  73 003c CF91      		pop r28
  74               	.LVL5:
  75 003e 1F91      		pop r17
  76 0040 0895      		ret
  77               		.cfi_endproc
  78               	.LFE13:
  80               		.section	.text.debug_tapping_key,"ax",@progbits
  82               	debug_tapping_key:
  83               	.LFB12:
 397:tmk_core/common/action_tapping.c ****     debug("TAPPING_KEY=");
  84               		.loc 1 397 0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
 399:tmk_core/common/action_tapping.c ****     debug("\n");
  90               		.loc 1 399 0
  91 0000 4091 0000 		lds r20,tapping_key
  92 0004 5091 0000 		lds r21,tapping_key+1
  93 0008 6091 0000 		lds r22,tapping_key+2
  94 000c 7091 0000 		lds r23,tapping_key+3
  95 0010 8091 0000 		lds r24,tapping_key+4
  96 0014 9091 0000 		lds r25,tapping_key+5
  97 0018 0C94 0000 		jmp debug_record
  98               	.LVL6:
  99               		.cfi_endproc
 100               	.LFE12:
 102               		.section	.text.waiting_buffer_scan_tap,"ax",@progbits
 104               	waiting_buffer_scan_tap:
 105               	.LFB11:
 372:tmk_core/common/action_tapping.c ****     // tapping already is settled
 106               		.loc 1 372 0
 107               		.cfi_startproc
 108 0000 0F93      		push r16
 109               	.LCFI3:
 110               		.cfi_def_cfa_offset 3
 111               		.cfi_offset 16, -2
 112 0002 1F93      		push r17
 113               	.LCFI4:
 114               		.cfi_def_cfa_offset 4
 115               		.cfi_offset 17, -3
 116 0004 CF93      		push r28
 117               	.LCFI5:
 118               		.cfi_def_cfa_offset 5
 119               		.cfi_offset 28, -4
 120 0006 DF93      		push r29
 121               	.LCFI6:
 122               		.cfi_def_cfa_offset 6
 123               		.cfi_offset 29, -5
 124               	/* prologue: function */
 125               	/* frame size = 0 */
 126               	/* stack size = 4 */
 127               	.L__stack_usage = 4
 374:tmk_core/common/action_tapping.c ****     // invalid state: tapping_key released && tap.count == 0
 128               		.loc 1 374 0
 129 0008 8091 0000 		lds r24,tapping_key+5
 130 000c 8295      		swap r24
 131 000e 8F70      		andi r24,lo8(15)
 132 0010 01F0      		breq .+2
 133 0012 00C0      		rjmp .L7
 376:tmk_core/common/action_tapping.c **** 
 134               		.loc 1 376 0
 135 0014 8091 0000 		lds r24,tapping_key+2
 136 0018 8823      		tst r24
 137 001a 01F4      		brne .+2
 138 001c 00C0      		rjmp .L7
 139               	.LBB7:
 378:tmk_core/common/action_tapping.c ****         if (IS_TAPPING_KEY(waiting_buffer[i].event.key) && !waiting_buffer[i].event.pressed && WITH
 140               		.loc 1 378 0
 141 001e 8091 0000 		lds r24,waiting_buffer_tail
 142               	.LVL7:
 143 0022 1091 0000 		lds r17,waiting_buffer_head
 144 0026 6091 0000 		lds r22,tapping_key
 145 002a 7091 0000 		lds r23,tapping_key+1
 146 002e C091 0000 		lds r28,tapping_key+3
 147 0032 D091 0000 		lds r29,tapping_key+3+1
 148               	.LBB8:
 149               	.LBB9:
 150               		.file 2 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  25:tmk_core/common/keyboard.h **** extern "C" {
  26:tmk_core/common/keyboard.h **** #endif
  27:tmk_core/common/keyboard.h **** 
  28:tmk_core/common/keyboard.h **** /* key matrix position */
  29:tmk_core/common/keyboard.h **** typedef struct {
  30:tmk_core/common/keyboard.h ****     uint8_t col;
  31:tmk_core/common/keyboard.h ****     uint8_t row;
  32:tmk_core/common/keyboard.h **** } keypos_t;
  33:tmk_core/common/keyboard.h **** 
  34:tmk_core/common/keyboard.h **** /* key event */
  35:tmk_core/common/keyboard.h **** typedef struct {
  36:tmk_core/common/keyboard.h ****     keypos_t key;
  37:tmk_core/common/keyboard.h ****     bool     pressed;
  38:tmk_core/common/keyboard.h ****     uint16_t time;
  39:tmk_core/common/keyboard.h **** } keyevent_t;
  40:tmk_core/common/keyboard.h **** 
  41:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  42:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb) ((keya).row == (keyb).row && (keya).col == (keyb).col)
  43:tmk_core/common/keyboard.h **** 
  44:tmk_core/common/keyboard.h **** /* Rules for No Event:
  45:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  46:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  47:tmk_core/common/keyboard.h ****  */
  48:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 151               		.loc 2 48 0
 152 0036 91E0      		ldi r25,lo8(1)
 153 0038 6F3F      		cpi r22,lo8(-1)
 154 003a 01F0      		breq .L9
 155 003c 90E0      		ldi r25,0
 156               	.L9:
 157 003e 292F      		mov r18,r25
 158               	.LBE9:
 159               	.LBE8:
 379:tmk_core/common/action_tapping.c ****             tapping_key.tap.count       = 1;
 160               		.loc 1 379 0
 161 0040 06E0      		ldi r16,lo8(6)
 162               	.LVL8:
 163               	.L10:
 378:tmk_core/common/action_tapping.c ****         if (IS_TAPPING_KEY(waiting_buffer[i].event.key) && !waiting_buffer[i].event.pressed && WITH
 164               		.loc 1 378 0 discriminator 1
 165 0042 8117      		cp r24,r17
 166 0044 01F4      		brne .+2
 167 0046 00C0      		rjmp .L7
 168               	.LBB11:
 169               	.LBB10:
 170               		.loc 2 48 0
 171 0048 2097      		sbiw r28,0
 172 004a 01F0      		breq .L14
 173 004c 7F3F      		cpi r23,lo8(-1)
 174 004e 01F0      		breq .L15
 175 0050 30E0      		ldi r19,0
 176 0052 00C0      		rjmp .L11
 177               	.L14:
 178 0054 31E0      		ldi r19,lo8(1)
 179 0056 00C0      		rjmp .L11
 180               	.L15:
 181 0058 322F      		mov r19,r18
 182               	.L11:
 183 005a 90E0      		ldi r25,0
 184               	.LBE10:
 185               	.LBE11:
 379:tmk_core/common/action_tapping.c ****             tapping_key.tap.count       = 1;
 186               		.loc 1 379 0
 187 005c 30FD      		sbrc r19,0
 188 005e 00C0      		rjmp .L12
 379:tmk_core/common/action_tapping.c ****             tapping_key.tap.count       = 1;
 189               		.loc 1 379 0 is_stmt 0 discriminator 1
 190 0060 089F      		mul r16,r24
 191 0062 F001      		movw r30,r0
 192 0064 099F      		mul r16,r25
 193 0066 F00D      		add r31,r0
 194 0068 1124      		clr __zero_reg__
 195 006a DF01      		movw r26,r30
 196 006c A050      		subi r26,lo8(-(waiting_buffer))
 197 006e B040      		sbci r27,hi8(-(waiting_buffer))
 198 0070 1196      		adiw r26,1
 199 0072 3C91      		ld r19,X
 200 0074 1197      		sbiw r26,1
 201 0076 3713      		cpse r19,r23
 202 0078 00C0      		rjmp .L12
 379:tmk_core/common/action_tapping.c ****             tapping_key.tap.count       = 1;
 203               		.loc 1 379 0 discriminator 2
 204 007a 3C91      		ld r19,X
 205 007c 3613      		cpse r19,r22
 206 007e 00C0      		rjmp .L12
 379:tmk_core/common/action_tapping.c ****             tapping_key.tap.count       = 1;
 207               		.loc 1 379 0 discriminator 3
 208 0080 1296      		adiw r26,2
 209 0082 3C91      		ld r19,X
 210 0084 1297      		sbiw r26,2
 211 0086 3111      		cpse r19,__zero_reg__
 212 0088 00C0      		rjmp .L12
 379:tmk_core/common/action_tapping.c ****             tapping_key.tap.count       = 1;
 213               		.loc 1 379 0 discriminator 4
 214 008a 1396      		adiw r26,3
 215 008c 4D91      		ld r20,X+
 216 008e 5C91      		ld r21,X
 217 0090 1497      		sbiw r26,3+1
 218 0092 4C1B      		sub r20,r28
 219 0094 5D0B      		sbc r21,r29
 220 0096 483C      		cpi r20,-56
 221 0098 5105      		cpc r21,__zero_reg__
 222 009a 00F4      		brsh .L12
 380:tmk_core/common/action_tapping.c ****             waiting_buffer[i].tap.count = 1;
 223               		.loc 1 380 0 is_stmt 1
 224 009c 8091 0000 		lds r24,tapping_key+5
 225               	.LVL9:
 226 00a0 8F70      		andi r24,lo8(15)
 227 00a2 8061      		ori r24,lo8(16)
 228 00a4 8093 0000 		sts tapping_key+5,r24
 381:tmk_core/common/action_tapping.c ****             process_record(&tapping_key);
 229               		.loc 1 381 0
 230 00a8 E050      		subi r30,lo8(-(waiting_buffer+5))
 231 00aa F040      		sbci r31,hi8(-(waiting_buffer+5))
 232 00ac 8081      		ld r24,Z
 233 00ae 8F70      		andi r24,lo8(15)
 234 00b0 8061      		ori r24,lo8(16)
 235 00b2 8083      		st Z,r24
 382:tmk_core/common/action_tapping.c **** 
 236               		.loc 1 382 0
 237 00b4 80E0      		ldi r24,lo8(tapping_key)
 238 00b6 90E0      		ldi r25,hi8(tapping_key)
 239 00b8 0E94 0000 		call process_record
 240               	.LVL10:
 241               	/* epilogue start */
 242               	.LBE7:
 391:tmk_core/common/action_tapping.c **** 
 243               		.loc 1 391 0
 244 00bc DF91      		pop r29
 245 00be CF91      		pop r28
 246 00c0 1F91      		pop r17
 247 00c2 0F91      		pop r16
 248               	.LBB12:
 387:tmk_core/common/action_tapping.c ****             return;
 249               		.loc 1 387 0
 250 00c4 0C94 0000 		jmp debug_waiting_buffer
 251               	.LVL11:
 252               	.L12:
 378:tmk_core/common/action_tapping.c ****         if (IS_TAPPING_KEY(waiting_buffer[i].event.key) && !waiting_buffer[i].event.pressed && WITH
 253               		.loc 1 378 0 discriminator 2
 254 00c8 0196      		adiw r24,1
 255               	.LVL12:
 256 00ca 8770      		andi r24,lo8(7)
 257 00cc 00C0      		rjmp .L10
 258               	.L7:
 259               	/* epilogue start */
 260               	.LBE12:
 391:tmk_core/common/action_tapping.c **** 
 261               		.loc 1 391 0
 262 00ce DF91      		pop r29
 263 00d0 CF91      		pop r28
 264 00d2 1F91      		pop r17
 265 00d4 0F91      		pop r16
 266 00d6 0895      		ret
 267               		.cfi_endproc
 268               	.LFE11:
 270               		.section	.text.process_tapping,"ax",@progbits
 272               	process_tapping:
 273               	.LFB6:
  99:tmk_core/common/action_tapping.c ****     keyevent_t event = keyp->event;
 274               		.loc 1 99 0
 275               		.cfi_startproc
 276               	.LVL13:
 277 0000 9F92      		push r9
 278               	.LCFI7:
 279               		.cfi_def_cfa_offset 3
 280               		.cfi_offset 9, -2
 281 0002 AF92      		push r10
 282               	.LCFI8:
 283               		.cfi_def_cfa_offset 4
 284               		.cfi_offset 10, -3
 285 0004 BF92      		push r11
 286               	.LCFI9:
 287               		.cfi_def_cfa_offset 5
 288               		.cfi_offset 11, -4
 289 0006 CF92      		push r12
 290               	.LCFI10:
 291               		.cfi_def_cfa_offset 6
 292               		.cfi_offset 12, -5
 293 0008 DF92      		push r13
 294               	.LCFI11:
 295               		.cfi_def_cfa_offset 7
 296               		.cfi_offset 13, -6
 297 000a EF92      		push r14
 298               	.LCFI12:
 299               		.cfi_def_cfa_offset 8
 300               		.cfi_offset 14, -7
 301 000c FF92      		push r15
 302               	.LCFI13:
 303               		.cfi_def_cfa_offset 9
 304               		.cfi_offset 15, -8
 305 000e 0F93      		push r16
 306               	.LCFI14:
 307               		.cfi_def_cfa_offset 10
 308               		.cfi_offset 16, -9
 309 0010 1F93      		push r17
 310               	.LCFI15:
 311               		.cfi_def_cfa_offset 11
 312               		.cfi_offset 17, -10
 313 0012 CF93      		push r28
 314               	.LCFI16:
 315               		.cfi_def_cfa_offset 12
 316               		.cfi_offset 28, -11
 317 0014 DF93      		push r29
 318               	.LCFI17:
 319               		.cfi_def_cfa_offset 13
 320               		.cfi_offset 29, -12
 321 0016 CDB7      		in r28,__SP_L__
 322 0018 DEB7      		in r29,__SP_H__
 323               	.LCFI18:
 324               		.cfi_def_cfa_register 28
 325 001a 6197      		sbiw r28,17
 326               	.LCFI19:
 327               		.cfi_def_cfa_offset 30
 328 001c 0FB6      		in __tmp_reg__,__SREG__
 329 001e F894      		cli
 330 0020 DEBF      		out __SP_H__,r29
 331 0022 0FBE      		out __SREG__,__tmp_reg__
 332 0024 CDBF      		out __SP_L__,r28
 333               	/* prologue: function */
 334               	/* frame size = 17 */
 335               	/* stack size = 28 */
 336               	.L__stack_usage = 28
 337 0026 8C01      		movw r16,r24
 100:tmk_core/common/action_tapping.c **** 
 338               		.loc 1 100 0
 339 0028 85E0      		ldi r24,lo8(5)
 340               	.LVL14:
 341 002a F801      		movw r30,r16
 342 002c DE01      		movw r26,r28
 343 002e 1D96      		adiw r26,13
 344               		0:
 345 0030 0190      		ld r0,Z+
 346 0032 0D92      		st X+,r0
 347 0034 8A95      		dec r24
 348 0036 01F4      		brne 0b
 349 0038 F801      		movw r30,r16
 350 003a 4081      		ld r20,Z
 351               	.LVL15:
 352 003c 5181      		ldd r21,Z+1
 353               	.LVL16:
 354 003e E280      		ldd r14,Z+2
 355               	.LVL17:
 356 0040 9091 0000 		lds r25,tapping_key
 357 0044 6091 0000 		lds r22,tapping_key+1
 358 0048 2091 0000 		lds r18,tapping_key+3
 359 004c 3091 0000 		lds r19,tapping_key+3+1
 360               	.LBB23:
 361               	.LBB24:
 362               		.loc 2 48 0
 363 0050 2115      		cp r18,__zero_reg__
 364 0052 3105      		cpc r19,__zero_reg__
 365 0054 01F0      		breq .L57
 366 0056 6F3F      		cpi r22,lo8(-1)
 367 0058 01F4      		brne .L58
 368 005a 81E0      		ldi r24,lo8(1)
 369 005c 9F3F      		cpi r25,lo8(-1)
 370 005e 01F4      		brne .L58
 371 0060 00C0      		rjmp .L23
 372               	.L57:
 373 0062 81E0      		ldi r24,lo8(1)
 374 0064 00C0      		rjmp .L23
 375               	.L58:
 376 0066 80E0      		ldi r24,0
 377               	.L23:
 378               	.LBE24:
 379               	.LBE23:
 103:tmk_core/common/action_tapping.c ****         if (WITHIN_TAPPING_TERM(event)) {
 380               		.loc 1 103 0
 381 0068 F82F      		mov r31,r24
 382 006a F170      		andi r31,lo8(1)
 383 006c 9F2E      		mov r9,r31
 384 006e 80FD      		sbrc r24,0
 385 0070 00C0      		rjmp .L25
 100:tmk_core/common/action_tapping.c **** 
 386               		.loc 1 100 0 discriminator 1
 387 0072 F801      		movw r30,r16
 388 0074 A380      		ldd r10,Z+3
 389 0076 B480      		ldd r11,Z+4
 103:tmk_core/common/action_tapping.c ****         if (WITHIN_TAPPING_TERM(event)) {
 390               		.loc 1 103 0 discriminator 1
 391 0078 80E0      		ldi r24,lo8(tapping_key)
 392 007a C82E      		mov r12,r24
 393 007c 80E0      		ldi r24,hi8(tapping_key)
 394 007e D82E      		mov r13,r24
 395 0080 F090 0000 		lds r15,tapping_key+2
 396 0084 F501      		movw r30,r10
 397 0086 E21B      		sub r30,r18
 398 0088 F30B      		sbc r31,r19
 399 008a FF20      		tst r15
 400 008c 01F4      		brne .+2
 401 008e 00C0      		rjmp .L26
 402 0090 8091 0000 		lds r24,tapping_key+5
 104:tmk_core/common/action_tapping.c ****             if (tapping_key.tap.count == 0) {
 403               		.loc 1 104 0
 404 0094 E83C      		cpi r30,-56
 405 0096 F105      		cpc r31,__zero_reg__
 406 0098 00F0      		brlo .+2
 407 009a 00C0      		rjmp .L27
 105:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 408               		.loc 1 105 0
 409 009c 282F      		mov r18,r24
 410 009e 207F      		andi r18,lo8(-16)
 411 00a0 01F0      		breq .+2
 412 00a2 00C0      		rjmp .L28
 106:tmk_core/common/action_tapping.c ****                     // first tap!
 413               		.loc 1 106 0 discriminator 1
 414 00a4 5613      		cpse r21,r22
 415 00a6 00C0      		rjmp .L29
 106:tmk_core/common/action_tapping.c ****                     // first tap!
 416               		.loc 1 106 0 is_stmt 0 discriminator 2
 417 00a8 4913      		cpse r20,r25
 418 00aa 00C0      		rjmp .L29
 106:tmk_core/common/action_tapping.c ****                     // first tap!
 419               		.loc 1 106 0 discriminator 3
 420 00ac FE2C      		mov r15,r14
 421 00ae E110      		cpse r14,__zero_reg__
 422 00b0 00C0      		rjmp .L29
 109:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 423               		.loc 1 109 0 is_stmt 1
 424 00b2 8F70      		andi r24,lo8(15)
 425 00b4 8061      		ori r24,lo8(16)
 426 00b6 8093 0000 		sts tapping_key+5,r24
 427               	.LVL18:
 110:tmk_core/common/action_tapping.c ****                     process_record(&tapping_key);
 428               		.loc 1 110 0
 429 00ba 0E94 0000 		call debug_tapping_key
 430               	.LVL19:
 111:tmk_core/common/action_tapping.c **** 
 431               		.loc 1 111 0
 432 00be C601      		movw r24,r12
 433 00c0 0E94 0000 		call process_record
 434               	.LVL20:
 114:tmk_core/common/action_tapping.c ****                     // enqueue
 435               		.loc 1 114 0
 436 00c4 8091 0000 		lds r24,tapping_key+5
 437 00c8 F801      		movw r30,r16
 438 00ca 8583      		std Z+5,r24
 116:tmk_core/common/action_tapping.c ****                 }
 439               		.loc 1 116 0
 440 00cc 00C0      		rjmp .L79
 441               	.LVL21:
 442               	.L29:
 443               	.LBB25:
 444               	.LBB26:
 445               	.LBB27:
 446               	.LBB28:
 447               		.loc 2 48 0
 448 00ce AB28      		or r10,r11
 449 00d0 01F0      		breq .L59
 450 00d2 5F3F      		cpi r21,lo8(-1)
 451 00d4 01F4      		brne .L60
 452 00d6 81E0      		ldi r24,lo8(1)
 453 00d8 4F3F      		cpi r20,lo8(-1)
 454 00da 01F4      		brne .L60
 455 00dc 00C0      		rjmp .L31
 456               	.L59:
 457 00de 81E0      		ldi r24,lo8(1)
 458 00e0 00C0      		rjmp .L31
 459               	.L60:
 460 00e2 80E0      		ldi r24,0
 461               	.L31:
 462               	.LBE28:
 463               	.LBE27:
  49:tmk_core/common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  50:tmk_core/common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
 464               		.loc 2 50 0
 465 00e4 80FD      		sbrc r24,0
 466 00e6 00C0      		rjmp .L61
 467 00e8 81E0      		ldi r24,lo8(1)
 468 00ea 8E25      		eor r24,r14
 469 00ec 00C0      		rjmp .L33
 470               	.L61:
 471 00ee 80E0      		ldi r24,0
 472 00f0 90E0      		ldi r25,0
 473               	.L33:
 474               	.LBE26:
 475               	.LBE25:
 143:tmk_core/common/action_tapping.c ****                     // Modifier should be retained till end of this tapping.
 476               		.loc 1 143 0
 477 00f2 F82F      		mov r31,r24
 478 00f4 F170      		andi r31,lo8(1)
 479 00f6 FF2E      		mov r15,r31
 480 00f8 80FF      		sbrs r24,0
 481 00fa 00C0      		rjmp .L34
 482               	.LBB29:
 483               	.LBB30:
 349:tmk_core/common/action_tapping.c ****         if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed != waiting_buffer[i].eve
 484               		.loc 1 349 0 discriminator 1
 485 00fc 8091 0000 		lds r24,waiting_buffer_tail
 486               	.LVL22:
 487 0100 2091 0000 		lds r18,waiting_buffer_head
 350:tmk_core/common/action_tapping.c ****             return true;
 488               		.loc 1 350 0 discriminator 1
 489 0104 36E0      		ldi r19,lo8(6)
 490               	.LVL23:
 491               	.L35:
 349:tmk_core/common/action_tapping.c ****         if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed != waiting_buffer[i].eve
 492               		.loc 1 349 0
 493 0106 8217      		cp r24,r18
 494 0108 01F4      		brne .+2
 495 010a 00C0      		rjmp .L121
 350:tmk_core/common/action_tapping.c ****             return true;
 496               		.loc 1 350 0
 497 010c 90E0      		ldi r25,0
 498 010e 389F      		mul r19,r24
 499 0110 F001      		movw r30,r0
 500 0112 399F      		mul r19,r25
 501 0114 F00D      		add r31,r0
 502 0116 1124      		clr __zero_reg__
 503 0118 E050      		subi r30,lo8(-(waiting_buffer))
 504 011a F040      		sbci r31,hi8(-(waiting_buffer))
 505 011c 6181      		ldd r22,Z+1
 506 011e 5613      		cpse r21,r22
 507 0120 00C0      		rjmp .L36
 508 0122 6081      		ld r22,Z
 509 0124 4613      		cpse r20,r22
 510 0126 00C0      		rjmp .L36
 511 0128 6281      		ldd r22,Z+2
 512 012a E612      		cpse r14,r22
 513 012c 00C0      		rjmp .L34
 514               	.L36:
 349:tmk_core/common/action_tapping.c ****         if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed != waiting_buffer[i].eve
 515               		.loc 1 349 0
 516 012e 0196      		adiw r24,1
 517               	.LVL24:
 518 0130 8770      		andi r24,lo8(7)
 519 0132 00C0      		rjmp .L35
 520               	.L34:
 521               	.LBE30:
 522               	.LBE29:
 164:tmk_core/common/action_tapping.c ****                         tapping_key.tap.interrupted = true;
 523               		.loc 1 164 0
 524 0134 FE2C      		mov r15,r14
 525 0136 EE20      		tst r14
 526 0138 01F4      		brne .+2
 527 013a 00C0      		rjmp .L79
 165:tmk_core/common/action_tapping.c ****                     }
 528               		.loc 1 165 0
 529 013c 8091 0000 		lds r24,tapping_key+5
 530 0140 8160      		ori r24,lo8(1<<0)
 531 0142 8093 0000 		sts tapping_key+5,r24
 532               	.LVL25:
 533 0146 00C0      		rjmp .L118
 534               	.LVL26:
 535               	.L28:
 173:tmk_core/common/action_tapping.c ****                     debug("Tapping: Tap release(");
 536               		.loc 1 173 0 discriminator 1
 537 0148 5613      		cpse r21,r22
 538 014a 00C0      		rjmp .L45
 173:tmk_core/common/action_tapping.c ****                     debug("Tapping: Tap release(");
 539               		.loc 1 173 0 is_stmt 0 discriminator 2
 540 014c 4913      		cpse r20,r25
 541 014e 00C0      		rjmp .L45
 173:tmk_core/common/action_tapping.c ****                     debug("Tapping: Tap release(");
 542               		.loc 1 173 0 discriminator 3
 543 0150 E110      		cpse r14,__zero_reg__
 544 0152 00C0      		rjmp .L45
 177:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 545               		.loc 1 177 0 is_stmt 1
 546 0154 F801      		movw r30,r16
 547 0156 00C0      		rjmp .L120
 548               	.L45:
 182:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 549               		.loc 1 182 0
 550 0158 4D87      		std Y+13,r20
 551 015a 5E87      		std Y+14,r21
 552 015c 8D85      		ldd r24,Y+13
 553 015e 9E85      		ldd r25,Y+14
 554 0160 0E94 0000 		call is_tap_key
 555               	.LVL27:
 556 0164 8823      		tst r24
 557 0166 01F0      		breq .L53
 182:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 558               		.loc 1 182 0 is_stmt 0 discriminator 1
 559 0168 EE20      		tst r14
 560 016a 01F0      		breq .L53
 183:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start new tap with releasing last tap(>1).\n");
 561               		.loc 1 183 0 is_stmt 1
 562 016c 2091 0000 		lds r18,tapping_key+5
 563 0170 822F      		mov r24,r18
 564 0172 8295      		swap r24
 565 0174 8F70      		andi r24,lo8(15)
 566 0176 90E0      		ldi r25,0
 567 0178 0297      		sbiw r24,2
 568 017a 04F0      		brlt .L48
 186:tmk_core/common/action_tapping.c ****                     } else {
 569               		.loc 1 186 0
 570 017c 8091 0000 		lds r24,tapping_key
 571 0180 9091 0000 		lds r25,tapping_key+1
 572 0184 9887      		std Y+8,r25
 573 0186 8F83      		std Y+7,r24
 574 0188 1986      		std Y+9,__zero_reg__
 575 018a BB86      		std Y+11,r11
 576 018c AA86      		std Y+10,r10
 577 018e 2C87      		std Y+12,r18
 578 0190 CE01      		movw r24,r28
 579 0192 0796      		adiw r24,7
 580               	.L116:
 581 0194 0E94 0000 		call process_record
 582               	.LVL28:
 583               	.L48:
 190:tmk_core/common/action_tapping.c ****                     waiting_buffer_scan_tap();
 584               		.loc 1 190 0
 585 0198 86E0      		ldi r24,lo8(6)
 586 019a F801      		movw r30,r16
 587 019c A0E0      		ldi r26,lo8(tapping_key)
 588 019e B0E0      		ldi r27,hi8(tapping_key)
 589               		0:
 590 01a0 0190      		ld r0,Z+
 591 01a2 0D92      		st X+,r0
 592 01a4 8A95      		dec r24
 593 01a6 01F4      		brne 0b
 191:tmk_core/common/action_tapping.c ****                     debug_tapping_key();
 594               		.loc 1 191 0
 595 01a8 0E94 0000 		call waiting_buffer_scan_tap
 596               	.LVL29:
 192:tmk_core/common/action_tapping.c ****                     return true;
 597               		.loc 1 192 0
 598 01ac 0E94 0000 		call debug_tapping_key
 599               	.LVL30:
 600 01b0 00C0      		rjmp .L119
 601               	.LVL31:
 602               	.L49:
 214:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. last timeout tap release(>0).");
 603               		.loc 1 214 0 discriminator 1
 604 01b2 5617      		cp r21,r22
 605 01b4 01F0      		breq .L122
 606               	.L50:
 220:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 607               		.loc 1 220 0
 608 01b6 4D87      		std Y+13,r20
 609 01b8 5E87      		std Y+14,r21
 610 01ba 8D85      		ldd r24,Y+13
 611 01bc 9E85      		ldd r25,Y+14
 612 01be 0E94 0000 		call is_tap_key
 613               	.LVL32:
 614 01c2 8111      		cpse r24,__zero_reg__
 615 01c4 00C0      		rjmp .L123
 616               	.LVL33:
 617               	.L53:
 198:tmk_core/common/action_tapping.c ****                     return true;
 618               		.loc 1 198 0
 619 01c6 C801      		movw r24,r16
 620 01c8 0E94 0000 		call process_record
 621               	.LVL34:
 622               	.L119:
 199:tmk_core/common/action_tapping.c ****                 }
 623               		.loc 1 199 0
 624 01cc FF24      		clr r15
 625 01ce F394      		inc r15
 626 01d0 00C0      		rjmp .L79
 627               	.LVL35:
 628               	.L27:
 205:tmk_core/common/action_tapping.c ****                 debug("Tapping: End. Timeout. Not tap(0): ");
 629               		.loc 1 205 0
 630 01d2 282F      		mov r18,r24
 631 01d4 207F      		andi r18,lo8(-16)
 632 01d6 01F4      		brne .L49
 207:tmk_core/common/action_tapping.c ****                 debug("\n");
 633               		.loc 1 207 0
 634 01d8 7A2D      		mov r23,r10
 635 01da B98A      		std Y+17,r11
 636 01dc A88A      		std Y+16,r10
 637 01de 6E2D      		mov r22,r14
 638 01e0 8989      		ldd r24,Y+17
 639 01e2 0E94 0000 		call debug_event
 640               	.LVL36:
 209:tmk_core/common/action_tapping.c ****                 tapping_key = (keyrecord_t){};
 641               		.loc 1 209 0
 642 01e6 80E0      		ldi r24,lo8(tapping_key)
 643 01e8 90E0      		ldi r25,hi8(tapping_key)
 644 01ea 0E94 0000 		call process_record
 645               	.LVL37:
 210:tmk_core/common/action_tapping.c ****                 debug_tapping_key();
 646               		.loc 1 210 0
 647 01ee 86E0      		ldi r24,lo8(6)
 648 01f0 F601      		movw r30,r12
 649               		0:
 650 01f2 1192      		st Z+,__zero_reg__
 651 01f4 8A95      		dec r24
 652 01f6 01F4      		brne 0b
 211:tmk_core/common/action_tapping.c ****                 return false;
 653               		.loc 1 211 0
 654 01f8 0E94 0000 		call debug_tapping_key
 655               	.LVL38:
 656               	.L118:
 212:tmk_core/common/action_tapping.c ****             } else {
 657               		.loc 1 212 0
 658 01fc F12C      		mov r15,__zero_reg__
 659 01fe 00C0      		rjmp .L79
 660               	.LVL39:
 661               	.L122:
 214:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. last timeout tap release(>0).");
 662               		.loc 1 214 0 discriminator 2
 663 0200 4913      		cpse r20,r25
 664 0202 00C0      		rjmp .L50
 214:tmk_core/common/action_tapping.c ****                     debug("Tapping: End. last timeout tap release(>0).");
 665               		.loc 1 214 0 is_stmt 0 discriminator 3
 666 0204 E110      		cpse r14,__zero_reg__
 667 0206 00C0      		rjmp .L50
 216:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 668               		.loc 1 216 0 is_stmt 1
 669 0208 F801      		movw r30,r16
 670 020a 8583      		std Z+5,r24
 217:tmk_core/common/action_tapping.c ****                     tapping_key = (keyrecord_t){};
 671               		.loc 1 217 0
 672 020c C801      		movw r24,r16
 673 020e 0E94 0000 		call process_record
 674               	.LVL40:
 218:tmk_core/common/action_tapping.c ****                     return true;
 675               		.loc 1 218 0
 676 0212 86E0      		ldi r24,lo8(6)
 677 0214 F601      		movw r30,r12
 678               		0:
 679 0216 1192      		st Z+,__zero_reg__
 680 0218 8A95      		dec r24
 681 021a 01F4      		brne 0b
 219:tmk_core/common/action_tapping.c ****                 } else if (is_tap_key(event.key) && event.pressed) {
 682               		.loc 1 219 0
 683 021c 00C0      		rjmp .L79
 684               	.LVL41:
 685               	.L123:
 220:tmk_core/common/action_tapping.c ****                     if (tapping_key.tap.count > 1) {
 686               		.loc 1 220 0 discriminator 1
 687 021e EE20      		tst r14
 688 0220 01F0      		breq .L53
 221:tmk_core/common/action_tapping.c ****                         debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
 689               		.loc 1 221 0
 690 0222 2091 0000 		lds r18,tapping_key+5
 691 0226 822F      		mov r24,r18
 692 0228 8295      		swap r24
 693 022a 8F70      		andi r24,lo8(15)
 694 022c 90E0      		ldi r25,0
 695 022e 0297      		sbiw r24,2
 696 0230 04F4      		brge .+2
 697 0232 00C0      		rjmp .L48
 224:tmk_core/common/action_tapping.c ****                     } else {
 698               		.loc 1 224 0
 699 0234 8091 0000 		lds r24,tapping_key
 700 0238 9091 0000 		lds r25,tapping_key+1
 701 023c 9A83      		std Y+2,r25
 702 023e 8983      		std Y+1,r24
 703 0240 1B82      		std Y+3,__zero_reg__
 704 0242 BD82      		std Y+5,r11
 705 0244 AC82      		std Y+4,r10
 706 0246 2E83      		std Y+6,r18
 707 0248 CE01      		movw r24,r28
 708 024a 0196      		adiw r24,1
 709 024c 00C0      		rjmp .L116
 710               	.LVL42:
 711               	.L26:
 242:tmk_core/common/action_tapping.c ****             if (event.pressed) {
 712               		.loc 1 242 0 discriminator 1
 713 024e E83C      		cpi r30,-56
 714 0250 F105      		cpc r31,__zero_reg__
 715 0252 00F0      		brlo .+2
 716 0254 00C0      		rjmp .L52
 243:tmk_core/common/action_tapping.c ****                 if (IS_TAPPING_KEY(event.key)) {
 717               		.loc 1 243 0
 718 0256 FE2C      		mov r15,r14
 719 0258 EE20      		tst r14
 720 025a 01F4      		brne .+2
 721 025c 00C0      		rjmp .L53
 244:tmk_core/common/action_tapping.c **** //#    ifndef TAPPING_FORCE_HOLD
 722               		.loc 1 244 0 discriminator 1
 723 025e 5613      		cpse r21,r22
 724 0260 00C0      		rjmp .L54
 244:tmk_core/common/action_tapping.c **** //#    ifndef TAPPING_FORCE_HOLD
 725               		.loc 1 244 0 is_stmt 0 discriminator 2
 726 0262 4913      		cpse r20,r25
 727 0264 00C0      		rjmp .L54
 251:tmk_core/common/action_tapping.c ****                         // sequential tap.
 728               		.loc 1 251 0 is_stmt 1
 729 0266 2091 0000 		lds r18,tapping_key+5
 247:tmk_core/common/action_tapping.c **** #        ifdef TAPPING_FORCE_HOLD_PER_KEY
 730               		.loc 1 247 0
 731 026a 20FD      		sbrc r18,0
 732 026c 00C0      		rjmp .L55
 251:tmk_core/common/action_tapping.c ****                         // sequential tap.
 733               		.loc 1 251 0
 734 026e 822F      		mov r24,r18
 735 0270 8295      		swap r24
 736 0272 8F70      		andi r24,lo8(15)
 737 0274 482F      		mov r20,r24
 738               	.LVL43:
 739 0276 50E0      		ldi r21,0
 740               	.LVL44:
 741 0278 4115      		cp r20,__zero_reg__
 742 027a 5105      		cpc r21,__zero_reg__
 743 027c 01F0      		breq .L55
 253:tmk_core/common/action_tapping.c ****                         if (keyp->tap.count < 15) keyp->tap.count += 1;
 744               		.loc 1 253 0
 745 027e F801      		movw r30,r16
 746 0280 2583      		std Z+5,r18
 254:tmk_core/common/action_tapping.c ****                         debug("Tapping: Tap press(");
 747               		.loc 1 254 0
 748 0282 4F30      		cpi r20,15
 749 0284 5105      		cpc r21,__zero_reg__
 750 0286 01F0      		breq .L56
 254:tmk_core/common/action_tapping.c ****                         debug("Tapping: Tap press(");
 751               		.loc 1 254 0 is_stmt 0 discriminator 1
 752 0288 8F5F      		subi r24,lo8(-(1))
 753 028a 982F      		mov r25,r24
 754 028c 9295      		swap r25
 755 028e 907F      		andi r25,lo8(-16)
 756 0290 822F      		mov r24,r18
 757 0292 8F70      		andi r24,lo8(15)
 758 0294 892B      		or r24,r25
 759               	.L120:
 760 0296 8583      		std Z+5,r24
 761               	.L56:
 258:tmk_core/common/action_tapping.c ****                         tapping_key = *keyp;
 762               		.loc 1 258 0 is_stmt 1
 763 0298 C801      		movw r24,r16
 764 029a 0E94 0000 		call process_record
 765               	.LVL45:
 259:tmk_core/common/action_tapping.c ****                         debug_tapping_key();
 766               		.loc 1 259 0
 767 029e 86E0      		ldi r24,lo8(6)
 768 02a0 F801      		movw r30,r16
 769 02a2 A0E0      		ldi r26,lo8(tapping_key)
 770 02a4 B0E0      		ldi r27,hi8(tapping_key)
 771               		0:
 772 02a6 0190      		ld r0,Z+
 773 02a8 0D92      		st X+,r0
 774 02aa 8A95      		dec r24
 775 02ac 01F4      		brne 0b
 776 02ae 00C0      		rjmp .L117
 777               	.LVL46:
 778               	.L55:
 265:tmk_core/common/action_tapping.c ****                     return true;
 779               		.loc 1 265 0
 780 02b0 86E0      		ldi r24,lo8(6)
 781 02b2 F801      		movw r30,r16
 782 02b4 A0E0      		ldi r26,lo8(tapping_key)
 783 02b6 B0E0      		ldi r27,hi8(tapping_key)
 784               		0:
 785 02b8 0190      		ld r0,Z+
 786 02ba 0D92      		st X+,r0
 787 02bc 8A95      		dec r24
 788 02be 01F4      		brne 0b
 266:tmk_core/common/action_tapping.c ****                 } else if (is_tap_key(event.key)) {
 789               		.loc 1 266 0
 790 02c0 00C0      		rjmp .L79
 791               	.LVL47:
 792               	.L54:
 267:tmk_core/common/action_tapping.c ****                     // Sequential tap can be interfered with other tap key.
 793               		.loc 1 267 0
 794 02c2 4D87      		std Y+13,r20
 795 02c4 5E87      		std Y+14,r21
 796 02c6 8D85      		ldd r24,Y+13
 797 02c8 9E85      		ldd r25,Y+14
 798 02ca 0E94 0000 		call is_tap_key
 799               	.LVL48:
 800 02ce 8111      		cpse r24,__zero_reg__
 801 02d0 00C0      		rjmp .L48
 277:tmk_core/common/action_tapping.c ****                     process_record(keyp);
 802               		.loc 1 277 0
 803 02d2 8091 0000 		lds r24,tapping_key+5
 804 02d6 8160      		ori r24,lo8(1<<0)
 805 02d8 8093 0000 		sts tapping_key+5,r24
 278:tmk_core/common/action_tapping.c ****                     return true;
 806               		.loc 1 278 0
 807 02dc C801      		movw r24,r16
 808 02de 0E94 0000 		call process_record
 809               	.LVL49:
 279:tmk_core/common/action_tapping.c ****                 }
 810               		.loc 1 279 0
 811 02e2 00C0      		rjmp .L79
 812               	.LVL50:
 813               	.L52:
 290:tmk_core/common/action_tapping.c ****             debug("\n");
 814               		.loc 1 290 0
 815 02e4 7A2D      		mov r23,r10
 816 02e6 B98A      		std Y+17,r11
 817 02e8 A88A      		std Y+16,r10
 818 02ea 6E2D      		mov r22,r14
 819 02ec 8989      		ldd r24,Y+17
 820 02ee 0E94 0000 		call debug_event
 821               	.LVL51:
 292:tmk_core/common/action_tapping.c ****             debug_tapping_key();
 822               		.loc 1 292 0
 823 02f2 86E0      		ldi r24,lo8(6)
 824 02f4 F601      		movw r30,r12
 825               		0:
 826 02f6 1192      		st Z+,__zero_reg__
 827 02f8 8A95      		dec r24
 828 02fa 01F4      		brne 0b
 829 02fc 00C0      		rjmp .L117
 830               	.LVL52:
 831               	.L25:
 299:tmk_core/common/action_tapping.c ****             debug("Tapping: Start(Press tap key).\n");
 832               		.loc 1 299 0
 833 02fe EE20      		tst r14
 834 0300 01F4      		brne .+2
 835 0302 00C0      		rjmp .L53
 299:tmk_core/common/action_tapping.c ****             debug("Tapping: Start(Press tap key).\n");
 836               		.loc 1 299 0 is_stmt 0 discriminator 1
 837 0304 4D87      		std Y+13,r20
 838 0306 5E87      		std Y+14,r21
 839 0308 8D85      		ldd r24,Y+13
 840 030a 9E85      		ldd r25,Y+14
 841 030c 0E94 0000 		call is_tap_key
 842               	.LVL53:
 843 0310 F82E      		mov r15,r24
 844 0312 8823      		tst r24
 845 0314 01F4      		brne .+2
 846 0316 00C0      		rjmp .L53
 301:tmk_core/common/action_tapping.c ****             process_record_tap_hint(&tapping_key);
 847               		.loc 1 301 0 is_stmt 1
 848 0318 86E0      		ldi r24,lo8(6)
 849 031a F801      		movw r30,r16
 850 031c A0E0      		ldi r26,lo8(tapping_key)
 851 031e B0E0      		ldi r27,hi8(tapping_key)
 852               		0:
 853 0320 0190      		ld r0,Z+
 854 0322 0D92      		st X+,r0
 855 0324 8A95      		dec r24
 856 0326 01F4      		brne 0b
 302:tmk_core/common/action_tapping.c ****             waiting_buffer_scan_tap();
 857               		.loc 1 302 0
 858 0328 80E0      		ldi r24,lo8(tapping_key)
 859 032a 90E0      		ldi r25,hi8(tapping_key)
 860 032c 0E94 0000 		call process_record_tap_hint
 861               	.LVL54:
 303:tmk_core/common/action_tapping.c ****             debug_tapping_key();
 862               		.loc 1 303 0
 863 0330 0E94 0000 		call waiting_buffer_scan_tap
 864               	.LVL55:
 865               	.L117:
 304:tmk_core/common/action_tapping.c ****             return true;
 866               		.loc 1 304 0
 867 0334 0E94 0000 		call debug_tapping_key
 868               	.LVL56:
 305:tmk_core/common/action_tapping.c ****         } else {
 869               		.loc 1 305 0
 870 0338 00C0      		rjmp .L79
 871               	.LVL57:
 872               	.L121:
 873               	.LBB31:
 145:tmk_core/common/action_tapping.c ****                     switch (action.kind.id) {
 874               		.loc 1 145 0
 875 033a 4D87      		std Y+13,r20
 876 033c 5E87      		std Y+14,r21
 877 033e 8D85      		ldd r24,Y+13
 878 0340 9E85      		ldd r25,Y+14
 879 0342 0E94 0000 		call layer_switch_get_action
 880               	.LVL58:
 146:tmk_core/common/action_tapping.c ****                         case ACT_LMODS:
 881               		.loc 1 146 0
 882 0346 292F      		mov r18,r25
 883 0348 2295      		swap r18
 884 034a 2F70      		andi r18,lo8(15)
 885 034c 2230      		cpi r18,lo8(2)
 886 034e 00F4      		brsh .L124
 149:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 887               		.loc 1 149 0
 888 0350 9F70      		andi r25,lo8(15)
 889               	.LVL59:
 890 0352 01F0      		breq .L44
 149:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 891               		.loc 1 149 0 is_stmt 0 discriminator 1
 892 0354 8111      		cpse r24,__zero_reg__
 893 0356 00C0      		rjmp .L44
 894 0358 00C0      		rjmp .L41
 895               	.LVL60:
 896               	.L124:
 146:tmk_core/common/action_tapping.c ****                         case ACT_LMODS:
 897               		.loc 1 146 0 is_stmt 1
 898 035a 2430      		cpi r18,lo8(4)
 899 035c 00F4      		brsh .L42
 154:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 900               		.loc 1 154 0
 901 035e 9F70      		andi r25,lo8(15)
 902               	.LVL61:
 903 0360 01F4      		brne .L125
 904               	.L44:
 155:tmk_core/common/action_tapping.c ****                             break;
 905               		.loc 1 155 0
 906 0362 805E      		subi r24,lo8(-(32))
 907               	.LVL62:
 908 0364 8830      		cpi r24,lo8(8)
 909 0366 00F0      		brlo .L41
 910               	.LVL63:
 911               	.L42:
 160:tmk_core/common/action_tapping.c ****                     return true;
 912               		.loc 1 160 0
 913 0368 C801      		movw r24,r16
 914               	.LVL64:
 915 036a 0E94 0000 		call process_record
 916               	.LVL65:
 161:tmk_core/common/action_tapping.c ****                 } else {
 917               		.loc 1 161 0
 918 036e 9F2C      		mov r9,r15
 919               	.L41:
 920               	.LVL66:
 921 0370 F92C      		mov r15,r9
 922 0372 00C0      		rjmp .L79
 923               	.LVL67:
 924               	.L125:
 154:tmk_core/common/action_tapping.c ****                             if (IS_MOD(action.key.code)) return false;
 925               		.loc 1 154 0 discriminator 1
 926 0374 F801      		movw r30,r16
 927 0376 9581      		ldd r25,Z+5
 928 0378 907F      		andi r25,lo8(-16)
 929 037a 01F4      		brne .L44
 930 037c 00C0      		rjmp .L41
 931               	.LVL68:
 932               	.L79:
 933               	.LBE31:
 311:tmk_core/common/action_tapping.c **** 
 934               		.loc 1 311 0
 935 037e 8F2D      		mov r24,r15
 936               	.LVL69:
 937               	/* epilogue start */
 938 0380 6196      		adiw r28,17
 939 0382 0FB6      		in __tmp_reg__,__SREG__
 940 0384 F894      		cli
 941 0386 DEBF      		out __SP_H__,r29
 942 0388 0FBE      		out __SREG__,__tmp_reg__
 943 038a CDBF      		out __SP_L__,r28
 944 038c DF91      		pop r29
 945 038e CF91      		pop r28
 946 0390 1F91      		pop r17
 947 0392 0F91      		pop r16
 948               	.LVL70:
 949 0394 FF90      		pop r15
 950 0396 EF90      		pop r14
 951               	.LVL71:
 952 0398 DF90      		pop r13
 953 039a CF90      		pop r12
 954 039c BF90      		pop r11
 955 039e AF90      		pop r10
 956 03a0 9F90      		pop r9
 957 03a2 0895      		ret
 958               		.cfi_endproc
 959               	.LFE6:
 961               		.section	.text.get_tapping_term,"ax",@progbits
 962               		.weak	get_tapping_term
 964               	get_tapping_term:
 965               	.LFB4:
  22:tmk_core/common/action_tapping.c **** 
 966               		.loc 1 22 0
 967               		.cfi_startproc
 968               	.LVL72:
 969               	/* prologue: function */
 970               	/* frame size = 0 */
 971               	/* stack size = 0 */
 972               	.L__stack_usage = 0
  22:tmk_core/common/action_tapping.c **** 
 973               		.loc 1 22 0
 974 0000 88EC      		ldi r24,lo8(-56)
 975 0002 90E0      		ldi r25,0
 976               	.LVL73:
 977 0004 0895      		ret
 978               		.cfi_endproc
 979               	.LFE4:
 981               		.section	.text.action_tapping_process,"ax",@progbits
 982               	.global	action_tapping_process
 984               	action_tapping_process:
 985               	.LFB5:
  56:tmk_core/common/action_tapping.c ****     if (process_tapping(&record)) {
 986               		.loc 1 56 0
 987               		.cfi_startproc
 988 0000 1F93      		push r17
 989               	.LCFI20:
 990               		.cfi_def_cfa_offset 3
 991               		.cfi_offset 17, -2
 992 0002 CF93      		push r28
 993               	.LCFI21:
 994               		.cfi_def_cfa_offset 4
 995               		.cfi_offset 28, -3
 996 0004 DF93      		push r29
 997               	.LCFI22:
 998               		.cfi_def_cfa_offset 5
 999               		.cfi_offset 29, -4
 1000 0006 CDB7      		in r28,__SP_L__
 1001 0008 DEB7      		in r29,__SP_H__
 1002               	.LCFI23:
 1003               		.cfi_def_cfa_register 28
 1004 000a 2C97      		sbiw r28,12
 1005               	.LCFI24:
 1006               		.cfi_def_cfa_offset 17
 1007 000c 0FB6      		in __tmp_reg__,__SREG__
 1008 000e F894      		cli
 1009 0010 DEBF      		out __SP_H__,r29
 1010 0012 0FBE      		out __SREG__,__tmp_reg__
 1011 0014 CDBF      		out __SP_L__,r28
 1012               	/* prologue: function */
 1013               	/* frame size = 12 */
 1014               	/* stack size = 15 */
 1015               	.L__stack_usage = 15
 1016 0016 4F83      		std Y+7,r20
 1017 0018 5887      		std Y+8,r21
 1018 001a 6987      		std Y+9,r22
 1019 001c 7A87      		std Y+10,r23
 1020 001e 8B87      		std Y+11,r24
 1021 0020 9C87      		std Y+12,r25
  57:tmk_core/common/action_tapping.c ****         if (!IS_NOEVENT(record.event)) {
 1022               		.loc 1 57 0
 1023 0022 CE01      		movw r24,r28
 1024 0024 0796      		adiw r24,7
 1025 0026 0E94 0000 		call process_tapping
 1026               	.LVL74:
 1027 002a 8823      		tst r24
 1028 002c 01F0      		breq .L128
 1029 002e 9F81      		ldd r25,Y+7
 1030 0030 8885      		ldd r24,Y+8
 1031               	.LBB40:
 1032               	.LBB41:
  48:tmk_core/common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
 1033               		.loc 2 48 0
 1034 0032 2A85      		ldd r18,Y+10
 1035 0034 3B85      		ldd r19,Y+11
 1036 0036 232B      		or r18,r19
 1037 0038 01F0      		breq .L141
 1038 003a 8F3F      		cpi r24,lo8(-1)
 1039 003c 01F4      		brne .L142
 1040 003e 81E0      		ldi r24,lo8(1)
 1041 0040 9F3F      		cpi r25,lo8(-1)
 1042 0042 01F4      		brne .L142
 1043 0044 00C0      		rjmp .L129
 1044               	.L141:
 1045 0046 81E0      		ldi r24,lo8(1)
 1046 0048 00C0      		rjmp .L129
 1047               	.L142:
 1048 004a 80E0      		ldi r24,0
 1049               	.L129:
 1050               	.LBE41:
 1051               	.LBE40:
  58:tmk_core/common/action_tapping.c ****             debug("processed: ");
 1052               		.loc 1 58 0
 1053 004c 80FD      		sbrc r24,0
 1054 004e 00C0      		rjmp .L132
  60:tmk_core/common/action_tapping.c ****             debug("\n");
 1055               		.loc 1 60 0
 1056 0050 4F81      		ldd r20,Y+7
 1057 0052 5885      		ldd r21,Y+8
 1058 0054 6985      		ldd r22,Y+9
 1059 0056 7A85      		ldd r23,Y+10
 1060 0058 8B85      		ldd r24,Y+11
 1061 005a 9C85      		ldd r25,Y+12
 1062 005c 0E94 0000 		call debug_record
 1063               	.LVL75:
 1064 0060 00C0      		rjmp .L132
 1065               	.L128:
 1066 0062 86E0      		ldi r24,lo8(6)
 1067 0064 FE01      		movw r30,r28
 1068 0066 3796      		adiw r30,7
 1069 0068 DE01      		movw r26,r28
 1070 006a 1196      		adiw r26,1
 1071               		0:
 1072 006c 0190      		ld r0,Z+
 1073 006e 0D92      		st X+,r0
 1074 0070 8A95      		dec r24
 1075 0072 01F4      		brne 0b
 1076 0074 FF81      		ldd r31,Y+7
 1077               	.LVL76:
 1078 0076 E885      		ldd r30,Y+8
 1079               	.LVL77:
 1080 0078 6A85      		ldd r22,Y+10
 1081 007a 7B85      		ldd r23,Y+11
 1082               	.LVL78:
 1083               	.LBB42:
 1084               	.LBB43:
 1085               	.LBB44:
 1086               	.LBB45:
  48:tmk_core/common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
 1087               		.loc 2 48 0
 1088 007c 6115      		cp r22,__zero_reg__
 1089 007e 7105      		cpc r23,__zero_reg__
 1090 0080 01F0      		breq .L143
 1091 0082 EF3F      		cpi r30,lo8(-1)
 1092 0084 01F4      		brne .L144
 1093 0086 81E0      		ldi r24,lo8(1)
 1094 0088 FF3F      		cpi r31,lo8(-1)
 1095 008a 01F4      		brne .L144
 1096 008c 00C0      		rjmp .L133
 1097               	.L143:
 1098 008e 81E0      		ldi r24,lo8(1)
 1099 0090 00C0      		rjmp .L133
 1100               	.L144:
 1101 0092 80E0      		ldi r24,0
 1102               	.L133:
 1103               	.LBE45:
 1104               	.LBE44:
 318:tmk_core/common/action_tapping.c ****         return true;
 1105               		.loc 1 318 0
 1106 0094 80FD      		sbrc r24,0
 1107 0096 00C0      		rjmp .L132
 322:tmk_core/common/action_tapping.c ****         debug("waiting_buffer_enq: Over flow.\n");
 1108               		.loc 1 322 0
 1109 0098 2091 0000 		lds r18,waiting_buffer_head
 1110 009c 30E0      		ldi r19,0
 1111 009e C901      		movw r24,r18
 1112 00a0 0196      		adiw r24,1
 1113 00a2 8770      		andi r24,7
 1114 00a4 9927      		clr r25
 1115 00a6 4091 0000 		lds r20,waiting_buffer_tail
 1116 00aa 50E0      		ldi r21,0
 1117 00ac 8417      		cp r24,r20
 1118 00ae 9507      		cpc r25,r21
 1119 00b0 01F0      		breq .L135
 327:tmk_core/common/action_tapping.c ****     waiting_buffer_head                 = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
 1120               		.loc 1 327 0
 1121 00b2 F983      		std Y+1,r31
 1122 00b4 EA83      		std Y+2,r30
 1123 00b6 7D83      		std Y+5,r23
 1124 00b8 6C83      		std Y+4,r22
 1125 00ba 96E0      		ldi r25,lo8(6)
 1126 00bc 929F      		mul r25,r18
 1127 00be D001      		movw r26,r0
 1128 00c0 939F      		mul r25,r19
 1129 00c2 B00D      		add r27,r0
 1130 00c4 1124      		clr __zero_reg__
 1131 00c6 A050      		subi r26,lo8(-(waiting_buffer))
 1132 00c8 B040      		sbci r27,hi8(-(waiting_buffer))
 1133 00ca FE01      		movw r30,r28
 1134               	.LVL79:
 1135 00cc 3196      		adiw r30,1
 1136               		0:
 1137 00ce 0190      		ld r0,Z+
 1138 00d0 0D92      		st X+,r0
 1139 00d2 9A95      		dec r25
 1140 00d4 01F4      		brne 0b
 328:tmk_core/common/action_tapping.c **** 
 1141               		.loc 1 328 0
 1142 00d6 8093 0000 		sts waiting_buffer_head,r24
 331:tmk_core/common/action_tapping.c ****     return true;
 1143               		.loc 1 331 0
 1144 00da 0E94 0000 		call debug_waiting_buffer
 1145               	.LVL80:
 1146               	.L132:
 1147               	.LBE43:
 1148               	.LBE42:
  78:tmk_core/common/action_tapping.c ****             debug("processed: waiting_buffer[");
 1149               		.loc 1 78 0 discriminator 1
 1150 00de 16E0      		ldi r17,lo8(6)
 1151               	.L136:
  77:tmk_core/common/action_tapping.c ****         if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
 1152               		.loc 1 77 0 discriminator 1
 1153 00e0 8091 0000 		lds r24,waiting_buffer_tail
 1154 00e4 9091 0000 		lds r25,waiting_buffer_head
 1155 00e8 8917      		cp r24,r25
 1156 00ea 01F0      		breq .L127
  78:tmk_core/common/action_tapping.c ****             debug("processed: waiting_buffer[");
 1157               		.loc 1 78 0
 1158 00ec 189F      		mul r17,r24
 1159 00ee C001      		movw r24,r0
 1160 00f0 1124      		clr __zero_reg__
 1161 00f2 8050      		subi r24,lo8(-(waiting_buffer))
 1162 00f4 9040      		sbci r25,hi8(-(waiting_buffer))
 1163 00f6 0E94 0000 		call process_tapping
 1164               	.LVL81:
 1165 00fa 8823      		tst r24
 1166 00fc 01F0      		breq .L127
  82:tmk_core/common/action_tapping.c ****             debug("\n\n");
 1167               		.loc 1 82 0
 1168 00fe E091 0000 		lds r30,waiting_buffer_tail
 1169 0102 1E9F      		mul r17,r30
 1170 0104 F001      		movw r30,r0
 1171 0106 1124      		clr __zero_reg__
 1172 0108 E050      		subi r30,lo8(-(waiting_buffer))
 1173 010a F040      		sbci r31,hi8(-(waiting_buffer))
 1174 010c 4081      		ld r20,Z
 1175 010e 5181      		ldd r21,Z+1
 1176 0110 6281      		ldd r22,Z+2
 1177 0112 7381      		ldd r23,Z+3
 1178 0114 8481      		ldd r24,Z+4
 1179 0116 9581      		ldd r25,Z+5
 1180 0118 0E94 0000 		call debug_record
 1181               	.LVL82:
  77:tmk_core/common/action_tapping.c ****         if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
 1182               		.loc 1 77 0
 1183 011c 8091 0000 		lds r24,waiting_buffer_tail
 1184 0120 90E0      		ldi r25,0
 1185 0122 0196      		adiw r24,1
 1186 0124 8770      		andi r24,7
 1187 0126 9927      		clr r25
 1188 0128 8093 0000 		sts waiting_buffer_tail,r24
 1189 012c 00C0      		rjmp .L136
 1190               	.LVL83:
 1191               	.L135:
  67:tmk_core/common/action_tapping.c ****             waiting_buffer_clear();
 1192               		.loc 1 67 0
 1193 012e 0E94 0000 		call clear_keyboard
 1194               	.LVL84:
 1195               	.LBB46:
 1196               	.LBB47:
 340:tmk_core/common/action_tapping.c ****     waiting_buffer_tail = 0;
 1197               		.loc 1 340 0
 1198 0132 1092 0000 		sts waiting_buffer_head,__zero_reg__
 341:tmk_core/common/action_tapping.c **** }
 1199               		.loc 1 341 0
 1200 0136 1092 0000 		sts waiting_buffer_tail,__zero_reg__
 1201               	.LBE47:
 1202               	.LBE46:
  69:tmk_core/common/action_tapping.c ****         }
 1203               		.loc 1 69 0
 1204 013a E0E0      		ldi r30,lo8(tapping_key)
 1205 013c F0E0      		ldi r31,hi8(tapping_key)
 1206 013e 86E0      		ldi r24,lo8(6)
 1207 0140 DF01      		movw r26,r30
 1208               		0:
 1209 0142 1D92      		st X+,__zero_reg__
 1210 0144 8A95      		dec r24
 1211 0146 01F4      		brne 0b
 1212               	.L127:
 1213               	/* epilogue start */
  91:tmk_core/common/action_tapping.c **** 
 1214               		.loc 1 91 0
 1215 0148 2C96      		adiw r28,12
 1216 014a 0FB6      		in __tmp_reg__,__SREG__
 1217 014c F894      		cli
 1218 014e DEBF      		out __SP_H__,r29
 1219 0150 0FBE      		out __SREG__,__tmp_reg__
 1220 0152 CDBF      		out __SP_L__,r28
 1221 0154 DF91      		pop r29
 1222 0156 CF91      		pop r28
 1223 0158 1F91      		pop r17
 1224 015a 0895      		ret
 1225               		.cfi_endproc
 1226               	.LFE5:
 1228               		.section	.bss.waiting_buffer_tail,"aw",@nobits
 1231               	waiting_buffer_tail:
 1232 0000 00        		.zero	1
 1233               		.section	.bss.waiting_buffer_head,"aw",@nobits
 1236               	waiting_buffer_head:
 1237 0000 00        		.zero	1
 1238               		.section	.bss.waiting_buffer,"aw",@nobits
 1241               	waiting_buffer:
 1242 0000 0000 0000 		.zero	48
 1242      0000 0000 
 1242      0000 0000 
 1242      0000 0000 
 1242      0000 0000 
 1243               		.section	.bss.tapping_key,"aw",@nobits
 1246               	tapping_key:
 1247 0000 0000 0000 		.zero	6
 1247      0000 
 1248               		.text
 1249               	.Letext0:
 1250               		.file 3 "/usr/lib/avr/include/stdint.h"
 1251               		.file 4 "tmk_core/common/keycode.h"
 1252               		.file 5 "tmk_core/common/action_code.h"
 1253               		.file 6 "tmk_core/common/action.h"
 1254               		.file 7 "tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_tapping.c
     /tmp/cciw5v2k.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cciw5v2k.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cciw5v2k.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cciw5v2k.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cciw5v2k.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cciw5v2k.s:12     .text.debug_waiting_buffer:0000000000000000 debug_waiting_buffer
     /tmp/cciw5v2k.s:1231   .bss.waiting_buffer_tail:0000000000000000 waiting_buffer_tail
     /tmp/cciw5v2k.s:1236   .bss.waiting_buffer_head:0000000000000000 waiting_buffer_head
     /tmp/cciw5v2k.s:1241   .bss.waiting_buffer:0000000000000000 waiting_buffer
     /tmp/cciw5v2k.s:82     .text.debug_tapping_key:0000000000000000 debug_tapping_key
     /tmp/cciw5v2k.s:1246   .bss.tapping_key:0000000000000000 tapping_key
     /tmp/cciw5v2k.s:104    .text.waiting_buffer_scan_tap:0000000000000000 waiting_buffer_scan_tap
     /tmp/cciw5v2k.s:272    .text.process_tapping:0000000000000000 process_tapping
     /tmp/cciw5v2k.s:964    .text.get_tapping_term:0000000000000000 get_tapping_term
     /tmp/cciw5v2k.s:984    .text.action_tapping_process:0000000000000000 action_tapping_process

UNDEFINED SYMBOLS
debug_record
process_record
is_tap_key
debug_event
process_record_tap_hint
layer_switch_get_action
clear_keyboard
__do_clear_bss
